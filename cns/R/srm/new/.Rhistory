source('~/prog/alexeyche-junk/cns/R/serve.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/serve.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/serve.R', echo=TRUE)
load()
load()
plot(grads[1,],type="l")
plot(grads[2,],type="l")
plot(grads[,1],type="l")
grads
load()
plot(grads[,1],type="l")
plot(grads[,2],type="l")
plot(grads[,5],type="l")
plot(grads[,6],type="l")
plot(grads[,9],type="l")
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
plot(gr_stat_pot0[1,])
plot(gr_stat_prob0[1,])
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
load()
grads[1,]
grads[2,]
grads0[1,]
load()
grads5[1,]
load()
grads16[1,]
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
grads22[1,]
grads16[1,]
gr_stat_prob0[1,]
plot(gr_stat_prob0[1,])
plot(gr_stat_pot0[1,])
grads11[1,]
source('~/prog/alexeyche-junk/cns/R/serve.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/serve.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/serve.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/serve.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/serve.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/serve.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/serve.R', echo=TRUE)
load()
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
filled.contour(weights)
load()
filled.contour(weights)
load()
filled.contour(weights)
load()
filled.contour(weights)
load()
filled.contour(weights)
load()
filled.contour(weights)
load()
filled.contour(weights)
load()
load()
load()
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
load()
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
load()
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
load()
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
load()
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
filled.contour(weights) #colorpanel(30, "white", "grey10"))
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
load()
filled.contour(weights) #colorpanel(30, "white", "grey10"))
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
load()
filled.contour(weights) #colorpanel(30, "white", "grey10"))
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
load()
filled.contour(weights) #colorpanel(30, "white", "grey10"))
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
load()
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
filled.contour(weights) #colorpanel(30, "white", "grey10"))
load()
filled.contour(weights) #colorpanel(30, "white", "grey10"))
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
load()
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
load()
filled.contour(weights) #colorpanel(30, "white", "grey10"))
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
load()
filled.contour(weights) #colorpanel(30, "white", "grey10"))
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
load()
filled.contour(weights) #colorpanel(30, "white", "grey10"))
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
require(stringr)
source('~/prog/alexeyche-junk/cns/serv.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/gen_data.R', echo=TRUE)
?cat
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/gen_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/gen_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/gen_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/gen_data.R', echo=TRUE)
?paste
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/gen_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/serve.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
require(tsne)
?tsne
paste("/var/tmp/d",j,"_",i,".csv",sep="")
i<-1
j<-1
paste("/var/tmp/d",j,"_",i,".csv",sep="")
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/tsne_stuff.R', echo=TRUE)
?read.csv
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/tsne_stuff.R', echo=TRUE)
m
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/tsne_stuff.R', echo=TRUE)
m
?tsne
source('~/.active-rstudio-document', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/tsne_stuff.R', echo=TRUE)
t
plot(t)
as.vector(,)
as.vector(m)
str(as.vector(m))
vector(,)
vector(m)
m[1:10]
m[1:10,]
m[1:10,1:100]
m[1:10,1:10]
unlist(m)
str(unlist(m))
m
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/tsne_stuff.R', echo=TRUE)
rbind(m,m2)
m
rbind.fill(m,m2)
length(m)
length(m2)
rbind.fill(m,m2)
rbind(m,m2)
?rbind
source('~/.active-rstudio-document', echo=TRUE)
t
source('~/prog/alexeyche-junk/cns/R/serve.R', echo=TRUE)
load()
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
filled.contour(weights)
load()
filled.contour(weights)
load()
filled.contour(weights)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
load()
filled.contour(weights)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
raster1387137311
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/serve.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/tsne_stuff.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/tsne_stuff.R', echo=TRUE)
allm
p <- princomp(allm)
require(rgl)
plot3d(p$scores, col=c(rep(1,100),rep(2,100), rep(4,100)))
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/gen_data.R', echo=TRUE)
gen_sd()
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/gen_data.R', echo=TRUE)
gensd()
gen_sd()
?cat
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/gen_data.R', echo=TRUE)
gen_sd()
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/serv.R', echo=TRUE)
load()
plot(gr_stat_pot0[1,])
load()
plot(ps_ep[,1])
plot(ps_ep[,1], ps_ep[,2])
plot(ps_ep[,1], ps_ep[,2], type="l")
plot(ps_ep[,1], ps_ep[,3], type="l")
plot(ps_ep[,1], ps_ep[,4], type="l")
plot(ps_ep[,1], ps_ep[,1], type="l")
plot(ps_ep[,1], ps_ep[,2], type="l")
plot(ps_ep[,1], ps_ep[,3], type="l")
plot(ps_ep[,1], ps_ep[,3]*ps_ep[,2], type="l")
plot(ps_ep[,1], ps_ep[,3]*ps_ep[,2], type="l")
plot(ps_ep[,1], ps_ep[,2], type="l")
plot(ps_ep[,1], ps_ep[,3], type="l")
load()
plot(ps_ep[,1], ps_ep[,3], type="l")
load()
plot(gr_stat_pot0)
load()
load()
load()
load()
load()
plot(gr_stat_pot0)
plot(gr_stat_prob0)
source('~/prog/alexeyche-junk/cns/cpp/test_scripts/serv.R', echo=TRUE)
load()
plot(gr_stat_pot0)
gr_stat_pot0
plot(gr_stat_pot0[,1])
plot(gr_stat_pot0[1,])
plot(gr_stat_pot0[1,100:200])
plot(gr_stat_pot0[1,100:200], type="l")
plot(ps_ep[,1], ps_ep[,2], type="l")
plot(ps_ep[,1], ps_ep[,3], type="l")
plot(ps_ep[,1], ps_ep[,4], type="l")
plot(ps_ep[,1], ps_ep[,3], type="l")
load()
plot(ps_ep[,1], ps_ep[,3], type="l")
plot(gr_stat_pot0[1,100:200], type="l")
plot(gr_stat_pot0[1,], type="l")
plot(ps_ep[,1], ps_ep[,3], type="l")
load()
plot(ps_ep[,1], ps_ep[,3], type="l")
plot(ps_ep[,1], ps_ep[,2], type="l")
plot(ps_ep[,1], ps_ep[,3], type="l")
plot(ps_ep[500:1000,1], ps_ep[,3], type="l")
plot(ps_ep[500:1000,1], ps_ep[50:1000,3], type="l")
plot(ps_ep[500:1000,1], ps_ep[500:1000,3], type="l")
plot(ps_ep[500:1000,1], ps_ep[500:1000,3]*ps_ep[500:1000,2], type="l")
load()
plot(ps_ep[,1], ps_ep[,3]*ps_ep[,2], type="l")
plot(ps_ep[,1], ps_ep[,2], type="l")
plot(ps_ep[,1], ps_ep[,3], type="l")
plot(ps_ep[,1], ps_ep[,2], type="l")
plot(ps_ep[,1], ps_ep[,4], type="l")
Rcpp::sourceCpp('prog/alexeyche-junk/cns/R/srm/new/integrate.cpp')
Rcpp::sourceCpp('prog/alexeyche-junk/cns/R/srm/new/integrate.cpp')
Rcpp::sourceCpp('prog/alexeyche-junk/cns/R/srm/new/integrate.cpp')
Rcpp::sourceCpp('prog/alexeyche-junk/cns/R/srm/new/integrate.cpp')
Rcpp::sourceCpp('prog/alexeyche-junk/cns/R/srm/new/integrate_srm/src/integrate.cpp')
Rcpp::sourceCpp('prog/alexeyche-junk/cns/R/srm/new/integrate_srm/src/integrate.cpp')
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
neurons
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
neurons
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
neurons
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
neurons
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
neurons
grads
lapply(grads, function(gr) gr[2:5])
lapply(grads, function(gr) sapply(gr[2:5], function(g) g[1]))
sapply(grads, function(gr) sapply(gr[2:5], function(g) g[1]))
mm = sapply(grads, function(gr) sapply(gr[2:5], function(g) g[1]))
plot(mm[1,])
plot(mm[1,], type="l")
plot(mm[2,], type="l")
plot(mm[3,], type="l")
plot(mm[4,], type="l")
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
gr
T0=0
Tmax=150
net[id_n] <- pattern
#gr = grad_func(layers[[1]], 0, 150, net, target_set)
id_n = neurons$ids #sapply(neurons, function(n) n$id)
nspikes = lapply(net[id_n], function(sp) {
left = findInterval(T0, sp)+1
right = findInterval(Tmax, sp, rightmost.closed=TRUE)
if(left<=right) sp[left:right]
})
nspikes = lapply(1:length(id_n), function(ni) {
if(!is.null(nspikes[[ni]])) {
if( (length(nspikes[[ni]])/(Tmax-T0)) > llh_depr) { #0.04666667) { #0.06)  {  #  >= 4 spikes
probs = g(neurons$u_one(ni, nspikes[[ni]], net))
most_likely = probs>=mean(probs)
nspikes[[ni]][most_likely]
#NULL
} else {
nspikes[[ni]]
}
}
})
left_part = lapply(1:length(id_n), function(number) {
if(!is.null(nspikes[[number]])) {
u = neurons$u_one(number, nspikes[[number]], net)
#cat("n(", neurons[[number]]$id, ")u=",u,"\n")
ans = (p_stroke(u)/g(u))
ans[ans>5] = 5
return(ans)
}
})
spike_part = lapply(1:length(id_n), function(id_number) {
exc = rep(1, length(neurons$weights[[id_number]]))
exc[neurons$weights[[id_number]]<0] = - 1
exc*sapply(neurons$id_conns[[id_number]], function(idc) {
if(!is.null(nspikes[[id_number]])) {
sum(left_part[[id_number]]*grab_epsp(nspikes[[id_number]], net[[idc]]))
} else {
0
}
})
})
spike_part
left_part = lapply(1:length(id_n), function(number) {
if(!is.null(nspikes[[number]])) {
u = neurons$u_one(number, nspikes[[number]], net)
#cat("n(", neurons[[number]]$id, ")u=",u,"\n")
ans = (p_stroke(u)/g(u))
ans[ans>5] = 5
return(ans)
}
})
spike_part = lapply(1:length(id_n), function(id_number) {
#      exc = rep(1, length(neurons$weights[[id_number]]))
#      exc[neurons$weights[[id_number]]<0] = - 1
sapply(neurons$id_conns[[id_number]], function(idc) {
if(!is.null(nspikes[[id_number]])) {
sum(left_part[[id_number]]*grab_epsp(nspikes[[id_number]], net[[idc]]))
} else {
0
}
})
})
spike_part
neurons$weights
#!/usr/bin/RScript
setwd("~/prog/alexeyche-junk/cns/R/srm/new")
#setwd("~/my/git/alexeyche-junk/cns/R/srm/new")
require(snnSRM)
source('constants.R')
source('util.R')
source('neuron.R')
source('layers.R')
source('gen_spikes.R')
source('plot_funcs.R')
source('grad_funcs.R')
source('llh.R')
source('srm.R')
source('target_functions.R')
ID_MAX=0
M = 50
N = 5
id_m = seq(1, M)
id_n = seq(M+1, M+N)
gr1 = TSNeurons(M = M)
file <- "/home/alexeyche/prog/sim/stimuli/sd1.csv"
#file <- "/home/alexeyche/my/sim/stimuli/sd1.csv"
gr1$loadPatternFromFile(file, 150, 1, 0.5)
#net <- spikeMatToSpikeList(gr1$patterns[[1]]$data)
net = list()
net[id_m] = gr1$patterns[[1]]$data
start_w = 5.5
neurons = SRMLayer(N, start_w)
neurons$connectFF(gr1$ids, start_w)
inh_id = neurons$ids[1]
for(i in 1:N) {
dd = which(neurons$id_conns[[i]] == inh_id)
neurons$weights[[i]][dd] = -start_w
}
null_pattern = list()
for(i in 1:N) {
null_pattern[[i]] <- -Inf
}
pattern = list()
pattern[[1]] <- c(-Inf, 5, 45, 60 , 75, 95)
pattern[[2]] <- c(-Inf, 65)
pattern[[3]] <- c(-Inf, 50,80)
pattern[[4]] <- c(-Inf, 100)
pattern[[5]] <- c(-Inf, 10)
epochs = 1
run_options = list(T0 = 0, Tmax = 150, dt = 0.5, learning_rate = 0.5, learn_window_size = 150, mode="run", collect_stat=FALSE)
layers = SimLayers(list(neurons))
target_set = list(target_function_gen = full_spike_tf, depress_null=TRUE)
net_all = list()
grads = list()
net[id_n] <- pattern
T0=0
Tmax=150
id_n = neurons$ids #sapply(neurons, function(n) n$id)
nspikes = lapply(net[id_n], function(sp) {
left = findInterval(T0, sp)+1
right = findInterval(Tmax, sp, rightmost.closed=TRUE)
if(left<=right) sp[left:right]
})
nspikes = lapply(1:length(id_n), function(ni) {
if(!is.null(nspikes[[ni]])) {
if( (length(nspikes[[ni]])/(Tmax-T0)) > llh_depr) { #0.04666667) { #0.06)  {  #  >= 4 spikes
probs = g(neurons$u_one(ni, nspikes[[ni]], net))
most_likely = probs>=mean(probs)
nspikes[[ni]][most_likely]
#NULL
} else {
nspikes[[ni]]
}
}
})
#   if(sum(sapply(nspikes, length)/(Tmax-T0)) > 0.2) {
#    nspikes = lapply(1:length(id_n), function(ni) {
#        if(!is.null(nspikes[[ni]])) {
#          probs = g(neurons$u_one(ni, nspikes[[ni]], net))
#          most_likely = probs>=mean(probs)
#          nspikes[[ni]][most_likely]
#        }
#   })
#   }
left_part = lapply(1:length(id_n), function(number) {
if(!is.null(nspikes[[number]])) {
u = neurons$u_one(number, nspikes[[number]], net)
#cat("n(", neurons[[number]]$id, ")u=",u,"\n")
ans = (p_stroke(u)/g(u))
ans[ans>5] = 5
return(ans)
}
})
spike_part = lapply(1:length(id_n), function(id_number) {
#      exc = rep(1, length(neurons$weights[[id_number]]))
#      exc[neurons$weights[[id_number]]<0] = - 1
sapply(neurons$id_conns[[id_number]], function(idc) {
if(!is.null(nspikes[[id_number]])) {
sum(left_part[[id_number]]*grab_epsp(nspikes[[id_number]], net[[idc]]))
} else {
0
}
})
})
spike_part
neurons$weights
spike_part
grab_epsp(nspikes[[2]]*net[[51]])
grab_epsp(nspikes[[2]], net[[51]])
grab_epsp(nspikes[[3]], net[[51]])
grab_epsp(nspikes[[4]], net[[51]])
grab_epsp(nspikes[[5]], net[[51]])
nspikes[[1]]
nspikes[[2]]
grab_epsp(nspikes[[3]], net[[51]])
spike_part = lapply(1:length(id_n), function(id_number) {
exc = rep(1, length(neurons$weights[[id_number]]))
exc[neurons$weights[[id_number]]<0] = - 1
exc*sapply(neurons$id_conns[[id_number]], function(idc) {
if(!is.null(nspikes[[id_number]])) {
sum(left_part[[id_number]]*grab_epsp(nspikes[[id_number]], net[[idc]]))
} else {
0
}
})
})
spike_part
if(!target_set$depress_null) {
not_fired = sapply(nspikes, is.null)
} else {
not_fired = rep(FALSE, neurons$len)
}
int_options = list(T0 = T0, Tmax=Tmax, dim=sum(sapply(neurons$id_conns, length)), quad=256)
grad = integrateSRM_vec(constants, int_options, neurons$ids, neurons$id_conns, neurons$weights, net)$out
grad
int_part = list()
iter=1
for(id in 1:neurons$len) {
if(!not_fired[id]) {
int_part[[id]] = -grad[iter:(iter+length(neurons$id_conns[[id]])-1)]
} else {
int_part[[id]] = rep(0, length(neurons$id_conns[[id]]))
}
iter = iter + length(neurons$id_conns[[id]])
}
int_part
