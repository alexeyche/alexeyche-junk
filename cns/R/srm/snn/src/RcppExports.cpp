// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// evalNet
SEXP evalNet(const List patterns, const List run_options, const List constants, List layers);
RcppExport SEXP snn_evalNet(SEXP patternsSEXP, SEXP run_optionsSEXP, SEXP constantsSEXP, SEXP layersSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const List >::type patterns(patternsSEXP );
        Rcpp::traits::input_parameter< const List >::type run_options(run_optionsSEXP );
        Rcpp::traits::input_parameter< const List >::type constants(constantsSEXP );
        Rcpp::traits::input_parameter< List >::type layers(layersSEXP );
        SEXP __result = evalNet(patterns, run_options, constants, layers);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integrateSRM
SEXP integrateSRM(const List constants, const List int_options, const IntegerVector neuron_id, const IntegerVector neuron_id_conn, const NumericVector neuron_w, const List net);
RcppExport SEXP snn_integrateSRM(SEXP constantsSEXP, SEXP int_optionsSEXP, SEXP neuron_idSEXP, SEXP neuron_id_connSEXP, SEXP neuron_wSEXP, SEXP netSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const List >::type constants(constantsSEXP );
        Rcpp::traits::input_parameter< const List >::type int_options(int_optionsSEXP );
        Rcpp::traits::input_parameter< const IntegerVector >::type neuron_id(neuron_idSEXP );
        Rcpp::traits::input_parameter< const IntegerVector >::type neuron_id_conn(neuron_id_connSEXP );
        Rcpp::traits::input_parameter< const NumericVector >::type neuron_w(neuron_wSEXP );
        Rcpp::traits::input_parameter< const List >::type net(netSEXP );
        SEXP __result = integrateSRM(constants, int_options, neuron_id, neuron_id_conn, neuron_w, net);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integrateSRM_epsp_pstroke
SEXP integrateSRM_epsp_pstroke(const List constants, const List int_options, const IntegerVector neurons_id, const List neurons_id_conn, const List neurons_w, const List net);
RcppExport SEXP snn_integrateSRM_epsp_pstroke(SEXP constantsSEXP, SEXP int_optionsSEXP, SEXP neurons_idSEXP, SEXP neurons_id_connSEXP, SEXP neurons_wSEXP, SEXP netSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const List >::type constants(constantsSEXP );
        Rcpp::traits::input_parameter< const List >::type int_options(int_optionsSEXP );
        Rcpp::traits::input_parameter< const IntegerVector >::type neurons_id(neurons_idSEXP );
        Rcpp::traits::input_parameter< const List >::type neurons_id_conn(neurons_id_connSEXP );
        Rcpp::traits::input_parameter< const List >::type neurons_w(neurons_wSEXP );
        Rcpp::traits::input_parameter< const List >::type net(netSEXP );
        SEXP __result = integrateSRM_epsp_pstroke(constants, int_options, neurons_id, neurons_id_conn, neurons_w, net);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// probNoFire
SEXP probNoFire(const double T0, const double Tmax, Reference neurons, const List net, const List constants);
RcppExport SEXP snn_probNoFire(SEXP T0SEXP, SEXP TmaxSEXP, SEXP neuronsSEXP, SEXP netSEXP, SEXP constantsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const double >::type T0(T0SEXP );
        Rcpp::traits::input_parameter< const double >::type Tmax(TmaxSEXP );
        Rcpp::traits::input_parameter< Reference >::type neurons(neuronsSEXP );
        Rcpp::traits::input_parameter< const List >::type net(netSEXP );
        Rcpp::traits::input_parameter< const List >::type constants(constantsSEXP );
        SEXP __result = probNoFire(T0, Tmax, neurons, net, constants);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// probInt
SEXP probInt(const double T0, const double Tmax, Reference neurons, const List net, const List constants);
RcppExport SEXP snn_probInt(SEXP T0SEXP, SEXP TmaxSEXP, SEXP neuronsSEXP, SEXP netSEXP, SEXP constantsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const double >::type T0(T0SEXP );
        Rcpp::traits::input_parameter< const double >::type Tmax(TmaxSEXP );
        Rcpp::traits::input_parameter< Reference >::type neurons(neuronsSEXP );
        Rcpp::traits::input_parameter< const List >::type net(netSEXP );
        Rcpp::traits::input_parameter< const List >::type constants(constantsSEXP );
        SEXP __result = probInt(T0, Tmax, neurons, net, constants);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integrateSRM_epsp
SEXP integrateSRM_epsp(Reference neurons, const List int_options, const List net, const List constants);
RcppExport SEXP snn_integrateSRM_epsp(SEXP neuronsSEXP, SEXP int_optionsSEXP, SEXP netSEXP, SEXP constantsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Reference >::type neurons(neuronsSEXP );
        Rcpp::traits::input_parameter< const List >::type int_options(int_optionsSEXP );
        Rcpp::traits::input_parameter< const List >::type net(netSEXP );
        Rcpp::traits::input_parameter< const List >::type constants(constantsSEXP );
        SEXP __result = integrateSRM_epsp(neurons, int_options, net, constants);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_binary_search
int test_binary_search(const double t, const NumericVector y);
RcppExport SEXP snn_test_binary_search(SEXP tSEXP, SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const double >::type t(tSEXP );
        Rcpp::traits::input_parameter< const NumericVector >::type y(ySEXP );
        int __result = test_binary_search(t, y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// neuron_epsp
SEXP neuron_epsp(const NumericVector t, const List constants, const IntegerVector neuron_id, const IntegerVector neuron_id_conn, const NumericVector neuron_w, const List net);
RcppExport SEXP snn_neuron_epsp(SEXP tSEXP, SEXP constantsSEXP, SEXP neuron_idSEXP, SEXP neuron_id_connSEXP, SEXP neuron_wSEXP, SEXP netSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const NumericVector >::type t(tSEXP );
        Rcpp::traits::input_parameter< const List >::type constants(constantsSEXP );
        Rcpp::traits::input_parameter< const IntegerVector >::type neuron_id(neuron_idSEXP );
        Rcpp::traits::input_parameter< const IntegerVector >::type neuron_id_conn(neuron_id_connSEXP );
        Rcpp::traits::input_parameter< const NumericVector >::type neuron_w(neuron_wSEXP );
        Rcpp::traits::input_parameter< const List >::type net(netSEXP );
        SEXP __result = neuron_epsp(t, constants, neuron_id, neuron_id_conn, neuron_w, net);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// USRM
SEXP USRM(const NumericVector t, const List constants, const IntegerVector neuron_id, const IntegerVector neuron_id_conn, const NumericVector neuron_w, const List net);
RcppExport SEXP snn_USRM(SEXP tSEXP, SEXP constantsSEXP, SEXP neuron_idSEXP, SEXP neuron_id_connSEXP, SEXP neuron_wSEXP, SEXP netSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const NumericVector >::type t(tSEXP );
        Rcpp::traits::input_parameter< const List >::type constants(constantsSEXP );
        Rcpp::traits::input_parameter< const IntegerVector >::type neuron_id(neuron_idSEXP );
        Rcpp::traits::input_parameter< const IntegerVector >::type neuron_id_conn(neuron_id_connSEXP );
        Rcpp::traits::input_parameter< const NumericVector >::type neuron_w(neuron_wSEXP );
        Rcpp::traits::input_parameter< const List >::type net(netSEXP );
        SEXP __result = USRM(t, constants, neuron_id, neuron_id_conn, neuron_w, net);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// USRMs
SEXP USRMs(const NumericVector t, const List constants, const IntegerVector neurons_id, const List neurons_id_conn, const List neurons_w, const List net);
RcppExport SEXP snn_USRMs(SEXP tSEXP, SEXP constantsSEXP, SEXP neurons_idSEXP, SEXP neurons_id_connSEXP, SEXP neurons_wSEXP, SEXP netSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const NumericVector >::type t(tSEXP );
        Rcpp::traits::input_parameter< const List >::type constants(constantsSEXP );
        Rcpp::traits::input_parameter< const IntegerVector >::type neurons_id(neurons_idSEXP );
        Rcpp::traits::input_parameter< const List >::type neurons_id_conn(neurons_id_connSEXP );
        Rcpp::traits::input_parameter< const List >::type neurons_w(neurons_wSEXP );
        Rcpp::traits::input_parameter< const List >::type net(netSEXP );
        SEXP __result = USRMs(t, constants, neurons_id, neurons_id_conn, neurons_w, net);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// USRMsFull
SEXP USRMsFull(const NumericVector t, const List constants, const IntegerVector neurons_id, const List neurons_id_conn, const List neurons_w, const List net);
RcppExport SEXP snn_USRMsFull(SEXP tSEXP, SEXP constantsSEXP, SEXP neurons_idSEXP, SEXP neurons_id_connSEXP, SEXP neurons_wSEXP, SEXP netSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const NumericVector >::type t(tSEXP );
        Rcpp::traits::input_parameter< const List >::type constants(constantsSEXP );
        Rcpp::traits::input_parameter< const IntegerVector >::type neurons_id(neurons_idSEXP );
        Rcpp::traits::input_parameter< const List >::type neurons_id_conn(neurons_id_connSEXP );
        Rcpp::traits::input_parameter< const List >::type neurons_w(neurons_wSEXP );
        Rcpp::traits::input_parameter< const List >::type net(netSEXP );
        SEXP __result = USRMsFull(t, constants, neurons_id, neurons_id_conn, neurons_w, net);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// kernelWindow_spikes
SEXP kernelWindow_spikes(List d, const List kernel_options);
RcppExport SEXP snn_kernelWindow_spikes(SEXP dSEXP, SEXP kernel_optionsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type d(dSEXP );
        Rcpp::traits::input_parameter< const List >::type kernel_options(kernel_optionsSEXP );
        SEXP __result = kernelWindow_spikes(d, kernel_options);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// kernelPass_autoCorr
SEXP kernelPass_autoCorr(List d, const List kernel_options);
RcppExport SEXP snn_kernelPass_autoCorr(SEXP dSEXP, SEXP kernel_optionsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type d(dSEXP );
        Rcpp::traits::input_parameter< const List >::type kernel_options(kernel_optionsSEXP );
        SEXP __result = kernelPass_autoCorr(d, kernel_options);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// kernelPass_corr
SEXP kernelPass_corr(List d1, List d2, const List kernel_options);
RcppExport SEXP snn_kernelPass_corr(SEXP d1SEXP, SEXP d2SEXP, SEXP kernel_optionsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type d1(d1SEXP );
        Rcpp::traits::input_parameter< List >::type d2(d2SEXP );
        Rcpp::traits::input_parameter< const List >::type kernel_options(kernel_optionsSEXP );
        SEXP __result = kernelPass_corr(d1, d2, kernel_options);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// kernelPass_crossNeurons
SEXP kernelPass_crossNeurons(List d1, List d2, const List kernel_options);
RcppExport SEXP snn_kernelPass_crossNeurons(SEXP d1SEXP, SEXP d2SEXP, SEXP kernel_optionsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type d1(d1SEXP );
        Rcpp::traits::input_parameter< List >::type d2(d2SEXP );
        Rcpp::traits::input_parameter< const List >::type kernel_options(kernel_optionsSEXP );
        SEXP __result = kernelPass_crossNeurons(d1, d2, kernel_options);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// simLayers
SEXP simLayers(const List sim_options, const List constants, List layers, List net);
RcppExport SEXP snn_simLayers(SEXP sim_optionsSEXP, SEXP constantsSEXP, SEXP layersSEXP, SEXP netSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const List >::type sim_options(sim_optionsSEXP );
        Rcpp::traits::input_parameter< const List >::type constants(constantsSEXP );
        Rcpp::traits::input_parameter< List >::type layers(layersSEXP );
        Rcpp::traits::input_parameter< List >::type net(netSEXP );
        SEXP __result = simLayers(sim_options, constants, layers, net);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// timesTwo
SEXP timesTwo(NumericVector x);
RcppExport SEXP snn_timesTwo(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP );
        SEXP __result = timesTwo(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
