lines(ss)
ss = ksmooth(1:600, o_train$stat[[1]]$data[1,], bandwidth=10)
lines(ss)
ss = ksmooth(1:600, o_train$stat[[1]]$data[1,], bandwidth=30)
lines(ss)
ss = ksmooth(1:600, o_train$stat[[1]]$data, bandwidth=30)
ss
plot(ss)
ss = ksmooth(1:600, o_train$stat[[2]]$data, bandwidth=30)
plot(ss)
dim(ss)
str(ss)
sss = lapply(o_train$stat, function(x) list(data=ksmooth(1:600, x$data, bandwidth=30)$y, label=x$label))
sss
plot(sss[[1]]$data, type="l")
plot(sss[[2]]$data, type="l")
plot(sss[[3]]$data, type="l")
plot(sss[[4]]$data, type="l")
plot(sss[[5]]$data, type="l")
s2 = lapply(o_test$stat, function(x) list(data=ksmooth(1:600, x$data, bandwidth=30)$y, label=x$label))
ucr_test(s1, s2, eucl_dist_alg)
s1 = lapply(o_train$stat, function(x) list(data=ksmooth(1:600, x$data, bandwidth=30)$y, label=x$label))
s2 = lapply(o_test$stat, function(x) list(data=ksmooth(1:600, x$data, bandwidth=30)$y, label=x$label))
ucr_test(s1, s2, eucl_dist_alg)
sss = ucr_test(s1, s2, eucl_dist_alg)
x=o_train$stat[[1]]
sapply(1:nrow(x$data), function(i) ksmooth(1:600, x$data[i], bandwidth=30)$y)
sapply(1:nrow(x$data), function(i) ksmooth(1:600, x$data[i,], bandwidth=30)$y)
ssss = sapply(1:nrow(x$data), function(i) ksmooth(1:600, x$data[i,], bandwidth=30)$y)
plot(ssss[1,], type="l")
plot(ssss[,1], type="l")
plot(ssss[,2], type="l")
s1 = lapply(o_train$stat, function(x) {
d = sapply(1:nrow(x$data), function(i) ksmooth(1:600, x$data[i,], bandwidth=30)$y)
list(data=d, label=x$label))
})
s1 = lapply(o_train$stat, function(x) {
d = sapply(1:nrow(x$data), function(i) ksmooth(1:600, x$data[i,], bandwidth=30)$y)
list(data=d, label=x$label)
})
s1[[1]]$data
filled.contour(s1[[1]]$data)
s1 = lapply(o_train$stat, function(x) {
d = sapply(1:nrow(x$data), function(i) ksmooth(1:600, x$data[i,], bandwidth=40)$y)
list(data=d, label=x$label)
})
filled.contour(s1[[1]]$data)
smooth_stat = function(stat, bw) {
lapply(stat, function(x) {
d = sapply(1:nrow(x$data), function(i) ksmooth(1:600, x$data[i,], bandwidth=bw)$y)
list(data=d, label=x$label, trial=x$trial)
})
}
sm_st_tr = smooth_stat(o_train$stat, 40)
sm_st_test = smooth_stat(o_test$stat, 40)
perfs = ucr_test(sm_st_tr, sm_st_test, eucl_dist_alg)
for(bw in seq(20, 100, by=10)) {
sm_st_tr = smooth_stat(o_train$stat, 40)
sm_st_test = smooth_stat(o_test$stat, 40)
cat("bw:", bw, " ")
perfs = ucr_test(sm_st_tr, sm_st_test, eucl_dist_alg)
}
for(bw in seq(20, 100, by=10)) {
sm_st_tr = smooth_stat(o_train$stat, bw)
sm_st_test = smooth_stat(o_test$stat, bw)
cat("bw:", bw, " ")
perfs = ucr_test(sm_st_tr, sm_st_test, eucl_dist_alg)
}
filled.contour(sm_st_tr[[1]]$data)
for(bw in seq(100, 150, by=10)) {
sm_st_tr = smooth_stat(o_train$stat, bw)
sm_st_test = smooth_stat(o_test$stat, bw)
cat("bw:", bw, " ")
perfs = ucr_test(sm_st_tr, sm_st_test, eucl_dist_alg)
}
for(bw in seq(150, 200, by=10)) {
sm_st_tr = smooth_stat(o_train$stat, bw)
sm_st_test = smooth_stat(o_test$stat, bw)
cat("bw:", bw, " ")
perfs = ucr_test(sm_st_tr, sm_st_test, eucl_dist_alg)
}
perf = ucr_test(k_out_train, k_out_test, eucl_dist_alg)
?Reduce
for(i in 0:(length(x)/trials)-1) {
cat(1+i, 1+i+i*trials)
#Reduce('+', x[1+i, 1+i+i*trials])
}
x
str(x)
trials
for(i in 0:(length(x)/trials)-1) {
cat(1+i, 1+i+i*trials)
#Reduce('+', x[1+i, 1+i+i*trials])
}
length(x)/trials
0:2
1+0:2
for(i in 0:((length(x)/trials)-1)) {
cat(1+i, 1+i+i*trials)
#Reduce('+', x[1+i, 1+i+i*trials])
}
i
i
seq(1, length(x), by=trials)
x = rep(1, 100)
trials=3
seq(1, length(x), by=trials)
for(i in seq(1, length(x), by=trials))
cat(i, i+trials)
#Reduce('+', x[1+i, 1+i+i*trials])
}
for(i in seq(1, length(x), by=trials)) {
cat(i, i+trials)
#Reduce('+', x[1+i, 1+i+i*trials])
}
for(i in seq(1, length(x), by=trials)) {
cat(i, i+trials, "\n")
#Reduce('+', x[1+i, 1+i+i*trials])
}
for(i in seq(1, length(x)-trials, by=trials)) {
cat(i, i+trials, "\n")
#Reduce('+', x[1+i, 1+i+i*trials])
}
x = c(1,2,3)
trials=1
for(i in seq(1, length(x)-trials, by=trials)) {
cat(i, i+trials, "\n")
#educe('+', x[1+i, 1+i+i*trials])
}
trials=2
x=c(1,2,3,4)
for(i in seq(1, length(x)-trials, by=trials)) {
cat(i, i+trials, "\n")
#educe('+', x[1+i, 1+i+i*trials])
}
trials
for(i in seq(1, length(x)-trials, by=trials)) {
cat(i, i+trials-1, "\n")
#educe('+', x[1+i, 1+i+i*trials])
}
trials
x
for(i in seq(1, length(x), by=trials)) {
cat(i, i+trials-1, "\n")
#educe('+', x[1+i, 1+i+i*trials])
}
x=c(1,2,3,4,5,6,7,8,10)
x=rep(1,10)
trials=5
for(i in seq(1, length(x), by=trials)) {
cat(i, i+trials-1, "\n")
#educe('+', x[1+i, 1+i+i*trials])
}
x=rep(1,100)
for(i in seq(1, length(x), by=trials)) {
cat(i, i+trials-1, "\n")
#educe('+', x[1+i, 1+i+i*trials])
}
mean_on_trials = function(x, trials)  {
if(trials == 1) return(x)
it_tr = 1
out = list()
for(i in seq(1, length(x), by=trials)) {
cat(i, i+trials-1, "\n")
out[[it_tr]]= list(data = Reduce(function(x,y) x$data+y$data, x[i, i+trials-1])/trials, label=x[[i]]$label)
it_tr = it_tr+1
}
return(out)
}
trials = 3
run_options = list(T0 = 0, Tmax = duration, dt = 0.5, learning_rate = 0.5,
learn_window_size = 300, mode="run", collect_stat=TRUE,
target_set = list(target_function_gen = random_2spikes_tf, depress_null=FALSE),
learn_layer_id = 1, evalTrial = trials
)
net_neurons = SimLayers(list(neurons))
o_train = evalNet(gr1$patterns, run_options, constants, net_neurons$l)
o_test = evalNet(gr2$patterns, run_options, constants, net_neurons$l)
sigma = 10
window = 10
k_out_train = lapply(o_train$spikes, function(st) kernelPass_spikes(st, list(sigma = sigma, window = window, T0 = 0, Tmax = duration, quad = 256)) )
k_out_test = lapply(o_test$spikes, function(st) kernelPass_spikes(st, list(sigma = sigma, window = window, T0 = 0, Tmax = duration, quad = 256)) )
length(k_out_train)
ss =mean_on_trials(k_out_train)
ss =mean_on_trials(k_out_train, trials)
mean_on_trials = function(x, trials)  {
if(trials == 1) return(x)
it_tr = 1
out = list()
for(i in seq(1, length(x), by=trials)) {
cat(i, i+trials-1, "\n")
out[[it_tr]]= list(data = Reduce(function(x,y) x$data+y$data, x[i:i+trials-1])/trials, label=x[[i]]$label)
it_tr = it_tr+1
}
return(out)
}
ss =mean_on_trials(k_out_train, trials)
x = k_out_train
Reduce(function(x,y) x$data+y$data, x[i:i+trials-1])
str(Reduce(function(x,y) x$data+y$data, x[i:i+trials-1]))
str(Reduce(function(x,y) x$data+y$data, x[i:i+trials-1]))
x[i:i+trials-1]
str(k_out_train)
x = k_out_train
Reduce(function(x,y) x$data+y$data, x[i:i+trials-1])
x[i:i+trials-1]
str(x[i:i+trials-1])
i
i=1
Reduce(function(x,y) x$data+y$data, x[i:i+trials-1])
mean_on_trials = function(x, trials)  {
if(trials == 1) return(x)
it_tr = 1
out = list()
for(i in seq(1, length(x), by=trials)) {
cat(i, i+trials-1, "\n")
out[[it_tr]]= list(data = Reduce(function(x1,y1) x1$data+y1$data, x[i:i+trials-1])/trials, label=x[[i]]$label)
it_tr = it_tr+1
}
return(out)
}
x = k_out_train
i=1
Reduce(function(x1,y1) x1$data+y1$data, x[i:i+trials-1])
str(Reduce(function(x1,y1) x1$data+y1$data, x[i:i+trials-1]))
x[i:i+trials-1]
i
trials
x[1:2]
i
x[i:i+trials-1]
x
x[i:i+trials-1
i:i+trials-1
Reduce(function(x1,y1) x1$data+y1$data, x[i:(i+trials-1)])
x[i:(i+trials-1)]
Reduce(function(x1,y1) x1$data+y1$data, x[i:(i+trials-1)])
Reduce('+', x[i:(i+trials-1)])
mean_on_trials = function(x, trials)  {
if(trials == 1) return(x)
it_tr = 1
out = list()
for(i in seq(1, length(x), by=trials)) {
cat(i, i+trials-1, "\n")
acc = NULL
for(el in x[i:(i+trials-1)]) {
if(is.null(acc)) {
acc = el$data
} else {
acc = acc + el$data
}
}
out[[it_tr]]= list(data = acc, label=x[[i]]$label)
it_tr = it_tr+1
}
return(out)
}
mean_on_trials(k_out_train, 3)
mmm = mean_on_trials(k_out_train, 3)
mean_on_trials = function(x, trials)  {
if(trials == 1) return(x)
it_tr = 1
out = list()
for(i in seq(1, length(x), by=trials)) {
acc = NULL
for(el in x[i:(i+trials-1)]) {
if(is.null(acc)) {
acc = el$data
} else {
acc = acc + el$data
}
}
out[[it_tr]]= list(data = acc, label=x[[i]]$label)
it_tr = it_tr+1
}
return(out)
}
mean_on_trials = function(x, trials)  {
if(trials == 1) return(x)
it_tr = 1
out = list()
for(i in seq(1, length(x), by=trials)) {
cat(i, i+trials-1, "\n")
acc = NULL
for(el in x[i:(i+trials-1)]) {
if(is.null(acc)) {
acc = el$data
} else {
acc = acc + el$data
}
}
out[[it_tr]]= list(data = acc, label=x[[i]]$label)
it_tr = it_tr+1
}
return(out)
}
mmm = mean_on_trials(k_out_train, 3)
mean_on_trials = function(x, trials)  {
if(trials == 1) return(x)
it_tr = 1
out = list()
for(i in seq(1, length(x), by=trials)) {
acc = NULL
for(el in x[i:(i+trials-1)]) {
if(is.null(acc)) {
acc = el$data
} else {
acc = acc + el$data
}
}
out[[it_tr]]= list(data = acc, label=x[[i]]$label)
it_tr = it_tr+1
}
return(out)
}
mmm = mean_on_trials(k_out_train, 3)
plot(mmm[[1]]$data)
filled.contour(mmm[[1]]$data)
filled.contour(k_out_train[[1]]$data)
filled.contour(k_out_train[[2]]$data)
filled.contour(k_out_train[[3]]$data)
k_out_train = mean_on_trials(k_out_train, trials)
k_out_test = mean_on_trials(k_out_test, trials)
length(k_out_test)
perf = ucr_test(k_out_train, k_out_test, eucl_dist_alg)
for(bw in seq(150, 200, by=10)) {
sm_st_tr = smooth_stat(o_train$stat, bw)
sm_st_test = smooth_stat(o_test$stat, bw)
sm_st_tr = mean_on_trials(sm_st_tr, trials)
sm_st_test = mean_on_trials(sm_st_test, trials)
cat("bw:", bw, " ")
perfs = ucr_test(sm_st_tr, sm_st_test, eucl_dist_alg)
}
bw=100
sm_st_tr = smooth_stat(o_train$stat, bw)
sm_st_test = smooth_stat(o_test$stat, bw)
sm_st_tr
length(sm_st_tr)
sm_st_tr = mean_on_trials(sm_st_tr, trials)
filled.contour(sm_st_tr[[1]]$data)
filled.contour(sm_st_tr[[2]]$data)
filled.contour(sm_st_tr[[3]]$data)
for(bw in seq(50, 150, by=10)) {
sm_st_tr = smooth_stat(o_train$stat, bw)
sm_st_test = smooth_stat(o_test$stat, bw)
sm_st_tr = mean_on_trials(sm_st_tr, trials)
sm_st_test = mean_on_trials(sm_st_test, trials)
cat("bw:", bw, " ")
perfs = ucr_test(sm_st_tr, sm_st_test, eucl_dist_alg)
}
k_out_train = lapply(o_train$spikes, function(st) kernelPass_spikes(st, list(sigma = sigma, window = window, T0 = 0, Tmax = duration, quad = 256)) )
k_out_test = lapply(o_test$spikes, function(st) kernelPass_spikes(st, list(sigma = sigma, window = window, T0 = 0, Tmax = duration, quad = 256)) )
mean_on_trials = function(x, trials)  {
if(trials == 1) return(x)
it_tr = 1
out = list()
for(i in seq(1, length(x), by=trials)) {
acc = NULL
for(el in x[i:(i+trials-1)]) {
if(is.null(acc)) {
acc = el$data
} else {
acc = acc + el$data
}
}
out[[it_tr]]= list(data = acc, label=x[[i]]$label)
it_tr = it_tr+1
}
return(out)
}
k_out_train_m = mean_on_trials(k_out_train, trials)
k_out_test_m = mean_on_trials(k_out_test, trials)
perf = ucr_test(k_out_train_m, k_out_test_m, eucl_dist_alg)
filled.contour(k_out_train[[1]]$data)
filled.contour(k_out_train[[2]]$data)
filled.contour(k_out_train[[3]]$data)
filled.contour(k_out_train_m[[1]]$data)
bw=50
sm_st_tr = smooth_stat(o_train$stat, bw)
sm_st_test = smooth_stat(o_test$stat, bw)
filled.contour(sm_st_tr[[1]]$data)
filled.contour(sm_st_tr[[2]]$data)
filled.contour(sm_st_tr[[3]]$data)
filled.contour(sm_st_tr[[1]]$data)
filled.contour(sm_st_tr[[2]]$data)
filled.contour(sm_st_tr[[3]]$data)
sm_st_tr_m = mean_on_trials(sm_st_tr, trials)
sm_st_test_m = mean_on_trials(sm_st_test, trials)
filled.contour(sm_st_tr_m[[1]]$data)
filled.contour(sm_st_tr[[4]]$data)
filled.contour(sm_st_tr[[5]]$data)
filled.contour(sm_st_tr[[6]]$data)
filled.contour(sm_st_tr_m[[2]]$data)
filled.contour(sm_st_tr[[7]]$data)
filled.contour(sm_st_tr[[8]]$data)
filled.contour(sm_st_tr[[9]]$data)
plot_rastl(o_train$spikes[[9]]$data)
plot_rastl(o_train$spikes[[8]]$data)
perfs = ucr_test(sm_st_tr, sm_st_test, eucl_dist_alg)
perfs = ucr_test(sm_st_tr_m, sm_st_test_m, eucl_dist_alg)
perf = ucr_test(k_out_train_m, k_out_test_m, eucl_dist_alg)
source('~/my/git/alexeyche-junk/cns/R/srm/new/eval_funcs.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
connection
neurons$id_conns
gr1$patterns[[1]]
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
u
plot(u ,type="l")
neurons$id_conns[[1]]
net[neurons$id_conns[[1]]]
plot_rastl(net[neurons$id_conns[[1]]])
library(snnSRM)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
u
library(snnSRM)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
library(snnSRM)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
net[[51]]
u
g(u)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
net[[51]]
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
library(snnSRM)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
library(snnSRM)
Rcpp::sourceCpp('~/my/git/alexeyche-junk/cns/R/srm/snnSRM/src/neuron.cpp')
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
library(snnSRM)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
library(snnSRM)
library(snnSRM)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
plot(pp, type="l")
plot(uu, type="l")
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
plot(uu, type="l")
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
plot(uu, type="l")
plot_rastl(net[[51]])
plot_rastl(net[51])
plot_rastl(net[ neurons$id_conns[[1]] ])
library(snnSRM)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
library(snnSRM)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp.R', echo=TRUE)
x
y
t=seq(0, 100, by=0.5)
plot(t, Aminus*exp(-t/tminus), type="l")
plot(t, Aplus*exp(s/tplus), type="l")
plot(t, Aplus*exp(t/tplus), type="l")
plot(t, Aplus*exp(-t/tplus), type="l")
library(snnSRM)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
library(snnSRM)
source('~/my/git/alexeyche-junk/cns/R/srm/new/constants.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
library(snnSRM)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
net[[51]]
library(snnSRM)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
net[[51]]
library(snnSRM)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
library(snnSRM)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
library(snnSRM)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
library(snnSRM)
Rcpp::sourceCpp('~/my/git/alexeyche-junk/cns/R/srm/snnSRM/src/neuron.cpp')
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
s = seq(0,100, by=0.5)
plot(s, Aplus*exp(s/tplus), type="l")
s = seq(0,100, by=0.5)
plot(s, Aplus*exp(-s/tplus), type="l")
Aplus
tplus
plot(s, Aplus*exp(-s/tplus), type="l")
library(snnSRM)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
library(snnSRM)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp_run.R', echo=TRUE)
t
constants
library(snnSRM)
library(snnSRM)
library(snnSRM)
library(snnSRM)
library(snnSRM)
library(snnSRM)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp.R', echo=TRUE)
plot(stdp)
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp.R', echo=TRUE)
plot(stdp)
s=seq(-100, 100, by=0.5)
plot(s, stdp(s))
source('~/my/git/alexeyche-junk/cns/R/srm/new/stdp.R', echo=TRUE)
plot(s, stdp(s))
