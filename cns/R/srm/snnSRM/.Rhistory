id_patt = 1
#model_file = sprintf("%s/R/%s_%dx%d_lr%3.1f_lws_%3.1f", dir, data, M, N, run_options$learning_rate, run_options$learn_window_size)
model_file = sprintf("%s/R/%s_%dx%d", dir, data, M, N)
if(runmode=="run") {
if(file.exists(paste(model_file, ".idx", sep=""))) {
W = loadMatrix(model_file, 1)
invisible(sapply(1:N, function(id) {
id_to_conn = which(W[,id] != 0)
neurons$weights[[id]] = W[id_to_conn, id]
neurons$id_conns[[id]] = id_to_conn
}))
cat("Load - Ok\n")
} else {
cat("Can't find file for model ", model_file, "\n")
}
}
patterns = gr1$patterns
layers = SimLayers( list(neurons) )
input_neurons = gr1
net_neurons = layers
patterns = input_neurons$patterns
lengths = sapply(patterns, function(p) length(p$data))
stopifnot(all(lengths == lengths[1]))
id_m = input_neurons$ids
id_n = c(sapply(net_neurons$l, function(n) n$ids))
net = list()
net[id_m] = patterns[[1]]$data
net[id_n] = -Inf
run_options$target_set$class = patterns[[id_patt]]$class
loss = NULL
ep=1
id_patt=1
mean_dev = NULL
net_all = list()
net[id_m] = patterns[[id_patt]]$data
net[id_n] = -Inf
run_options$target_set$label = patterns[[id_patt]]$label
c(net, net_neurons, stat, grad) := run_srm(net_neurons, net, run_options)
net
get_mean_activity(net)
get_mean_activity(net$data)
#setwd("~/my/git/alexeyche-junk/cns/R/srm/new")
setwd("~/prog/alexeyche-junk/cns/R/srm/new")
#dir = '~/my/sim/tmp'
dir = '~/prog/sim'
system(sprintf("find %s/R -maxdepth 1 -name \"*.png\" -type f -exec rm -f {} \\;", dir))
source('util.R')
source('plot_funcs.R')
source('ucr_ts.R')
source('gen_spikes.R')
source('neuron.R')
source('target_functions.R')
source('learn_and_run_net.R')
source('srm.R')
source('grad_funcs.R')
source('serialize_to_bin.R')
source('eval_funcs.R')
source('layers.R')
source('kernel.R')
ID_MAX=0
#require(snowfall)
#if(!sfIsRunning()) {
#  sfInit(parallel=TRUE, cpus=10)
#  res = sfClusterEval(require('snnSRM'))
#}
#sfExport('constants')
data = synth # synthetic control
if(!exists('train_dataset')) {
set.seed(1234)
c(train_dataset, test_dataset) := read_ts_file(data)
train_dataset = train_dataset[c(sample(1:50, 10), sample(51:100, 10), sample(101:150,10),
sample(151:200, 10), sample(201:250,10), sample(251:300,10))] # cut
test_dataset = test_dataset[c(sample(1:50, 10), sample(51:100, 10), sample(101:150, 10),
sample(151:200, 10), sample(201:250,10), sample(251:300, 10))]
ucr_test(train_dataset, test_dataset, eucl_dist_alg)
}
duration = 300
N = 10
M = 50
dt = 0.5
start_w.M = 10 #matrix(rnorm( M*N, mean=2, sd=0.5), ncol=N, nrow=M)
start_w.N = 5 #matrix(rnorm( (N-1)*N, mean=2, sd=0.5), ncol=N, nrow=(N-1))
gr1 = TSNeurons(M = M)
gr2 = TSNeurons(M = M, ids_c = 1000:(1000+M))
neurons = SRMLayer(N, start_w.N, p_edge_prob=0.5)
gr1$loadPatterns(train_dataset, duration, dt, lambda=5)
gr2$loadPatterns(test_dataset, duration, dt, lambda=5)
patt_len = length(gr1$patterns)
gr1$patterns = gr1$patterns[sample(patt_len)]
#plot_rastl(gr1$patterns[[3]]$data)
connection = matrix(gr1$ids, nrow=length(gr1$ids), ncol=N)
connect_window = N*2
step = M/N
overlap = 1
for(ni in 0:(N-1)) {
if(ni != 0) connection[1:((ni*step)-overlap),ni+1] = 0
if(ni != N-1) connection[((ni*step)+step+1+overlap):M,ni+1] = 0
}
neurons$connectFF(connection, start_w.M, 1:N )
runmode="learn"
#runmode="run"
test_trials=5
run_options = list(T0 = 0, Tmax = duration, dt = dt,
learning_rate = 0.01, epochs = 100, weight_decay = 0,
reward_learning=FALSE,
fp_window = 30, fp_kernel_size = 15, dev_frac_norm = 0.5,
learn_window_size = 150, mode=runmode, collect_stat=TRUE,
target_set = list(target_function_gen = random_4spikes_tf, depress_null=FALSE),
learn_layer_id = 1,
test_patterns = gr2$patterns,
test_function = function(train_set, test_set) {
kernSize=10
train_processed = post_process_set(train_set, test_trials, 0, duration, binKernel, kernSize)
test_processed = post_process_set(test_set, test_trials, 0, duration, binKernel, kernSize)
perf = ucr_test(train_processed, test_processed, eucl_dist_alg)
return(perf$rate)
}, trials=test_trials, test_run_freq=5
)
ro = run_options # for debug
id_patt = 1
#model_file = sprintf("%s/R/%s_%dx%d_lr%3.1f_lws_%3.1f", dir, data, M, N, run_options$learning_rate, run_options$learn_window_size)
model_file = sprintf("%s/R/%s_%dx%d", dir, data, M, N)
if(runmode=="run") {
if(file.exists(paste(model_file, ".idx", sep=""))) {
W = loadMatrix(model_file, 1)
invisible(sapply(1:N, function(id) {
id_to_conn = which(W[,id] != 0)
neurons$weights[[id]] = W[id_to_conn, id]
neurons$id_conns[[id]] = id_to_conn
}))
cat("Load - Ok\n")
} else {
cat("Can't find file for model ", model_file, "\n")
}
}
patterns = gr1$patterns
layers = SimLayers( list(neurons) )
input_neurons = gr1
net_neurons = layers
patterns = input_neurons$patterns
lengths = sapply(patterns, function(p) length(p$data))
stopifnot(all(lengths == lengths[1]))
id_m = input_neurons$ids
id_n = c(sapply(net_neurons$l, function(n) n$ids))
net = list()
net[id_m] = patterns[[1]]$data
net[id_n] = -Inf
run_options$target_set$class = patterns[[id_patt]]$class
loss = NULL
ep=1
run_options = list(T0 = 0, Tmax = duration, dt = dt,
learning_rate = 0.01, epochs = 100, weight_decay = 0,
reward_learning=TRUE,
fp_window = 30, fp_kernel_size = 15, dev_frac_norm = 0.5,
learn_window_size = 150, mode=runmode, collect_stat=TRUE,
target_set = list(target_function_gen = random_4spikes_tf, depress_null=FALSE),
learn_layer_id = 1,
test_patterns = gr2$patterns,
test_function = function(train_set, test_set) {
kernSize=10
train_processed = post_process_set(train_set, test_trials, 0, duration, binKernel, kernSize)
test_processed = post_process_set(test_set, test_trials, 0, duration, binKernel, kernSize)
perf = ucr_test(train_processed, test_processed, eucl_dist_alg)
return(perf$rate)
}, trials=test_trials, test_run_freq=5
)
ro = run_options # for debug
mean_dev = NULL
net_all = list()
for(id_patt in 1:length(patterns)) {
net[id_m] = patterns[[id_patt]]$data
net[id_n] = -Inf
run_options$target_set$label = patterns[[id_patt]]$label
c(net, net_neurons, stat, grad) := run_srm(net_neurons, net, run_options)
mean_dev = c(mean_dev, reward_func(net[id_n], run_options))
cat("epoch: ", ep, ", pattern # ", id_patt,"\n")
neurons = net_neurons$l[[1]]
W = get_weights_matrix(net_neurons$l)
not_fired = all(sapply(net[id_n], function(sp) length(sp) == 1))
pic_filename = sprintf("%s/R/run_ep%s_patt%s_label%s.png", dir, ep, id_patt, patterns[[id_patt]]$label)
png(pic_filename, width=1024, height=480)
if(!not_fired)
p1 = plot_rastl(net[id_n], sprintf("epoch %d, pattern %d, class %d", ep, id_patt, patterns[[id_patt]]$label))
p2 = levelplot(W, col.regions=colorRampPalette(c("black", "white")))
p3 = levelplot(list_to_matrix(grad), col.regions=colorRampPalette(c("black", "white")))
#      if(!is.null(loss))
#        p4 = xyplot(y~x, list(x=1:ep,y=loss), type="l")
if(!is.null(mean_dev))
p4 = xyplot(y~x, list(x=1:id_patt,y=mean_dev), type="l")
if(!not_fired)
print(p1, position=c(0, 0.5, 0.5, 1), more=TRUE)
#      if(!is.null(loss))
#        print(p4, position=c(0, 0, 0.5, 0.5), more=TRUE)
if(!is.null(mean_dev))
print(p4, position=c(0, 0, 0.5, 0.5), more=TRUE)
print(p2, position=c(0.5, 0, 1, 0.5), more=TRUE)
print(p3, position=c(0.5, 0.5, 1, 1))
dev.off()
if(open_plots)
system(sprintf("eog -w %s 1>/dev/null 2>/dev/null",pic_filename), ignore.stdout=TRUE, ignore.stderr=TRUE, wait=FALSE)
net_all[[id_patt]] = list(data=net[id_n], label=patterns[[id_patt]]$label)
}
open_plots=FALSE
model_descr=NULL
mean_dev = NULL
net_all = list()
for(id_patt in 1:length(patterns)) {
net[id_m] = patterns[[id_patt]]$data
net[id_n] = -Inf
run_options$target_set$label = patterns[[id_patt]]$label
c(net, net_neurons, stat, grad) := run_srm(net_neurons, net, run_options)
mean_dev = c(mean_dev, reward_func(net[id_n], run_options))
cat("epoch: ", ep, ", pattern # ", id_patt,"\n")
neurons = net_neurons$l[[1]]
W = get_weights_matrix(net_neurons$l)
not_fired = all(sapply(net[id_n], function(sp) length(sp) == 1))
pic_filename = sprintf("%s/R/run_ep%s_patt%s_label%s.png", dir, ep, id_patt, patterns[[id_patt]]$label)
png(pic_filename, width=1024, height=480)
if(!not_fired)
p1 = plot_rastl(net[id_n], sprintf("epoch %d, pattern %d, class %d", ep, id_patt, patterns[[id_patt]]$label))
p2 = levelplot(W, col.regions=colorRampPalette(c("black", "white")))
p3 = levelplot(list_to_matrix(grad), col.regions=colorRampPalette(c("black", "white")))
#      if(!is.null(loss))
#        p4 = xyplot(y~x, list(x=1:ep,y=loss), type="l")
if(!is.null(mean_dev))
p4 = xyplot(y~x, list(x=1:id_patt,y=mean_dev), type="l")
if(!not_fired)
print(p1, position=c(0, 0.5, 0.5, 1), more=TRUE)
#      if(!is.null(loss))
#        print(p4, position=c(0, 0, 0.5, 0.5), more=TRUE)
if(!is.null(mean_dev))
print(p4, position=c(0, 0, 0.5, 0.5), more=TRUE)
print(p2, position=c(0.5, 0, 1, 0.5), more=TRUE)
print(p3, position=c(0.5, 0.5, 1, 1))
dev.off()
if(open_plots)
system(sprintf("eog -w %s 1>/dev/null 2>/dev/null",pic_filename), ignore.stdout=TRUE, ignore.stderr=TRUE, wait=FALSE)
net_all[[id_patt]] = list(data=net[id_n], label=patterns[[id_patt]]$label)
}
net_all
f(run_options$reward_learning)
run_options$mean_activity_stat = get_mean_activity(net_all, run_options)
if(run_options$reward_learning)
run_options$mean_activity_stat = get_mean_activity(net_all, run_options)
xm = run_options$mean_activity_stat
filled.contour(xm)
xm
c(xm, r) := get_mean_activity(net_all, run_options)
filled.contour(xm)
source('~/prog/alexeyche-junk/cns/R/srm/new/kernel.R', echo=TRUE)
c(xm, r) := get_mean_activity(net_all, run_options)
filled.contour(xm)
x = lapply(net_all, function(x) get_finger_print(x$data, ro$T0, ro$Tmax, ro$fp_window, ro$fp_kernel_size))
x = simplify2array(x)
xm = apply(x, c(1,2), mean)
xm
filled.contour(xm)
x = simplify2array(x)
xm = apply(x, c(1,2), mean)
filled.contour(xm)
x
xm
filled.contour(x[,,1])
filled.contour(x[,,2])
source('~/prog/alexeyche-junk/cns/R/srm/new/kernel.R', echo=TRUE)
x = lapply(net_all, function(x) get_finger_print(x$data, ro$T0, ro$Tmax, ro$fp_window, ro$fp_kernel_size))
ro$T0
ro$Tmax
ro$Tfp_window
ro$fp_window
ro$fp_kernel_size
plot_rastl(net_all[[1]]$data)
plot_rastl(net_all[[2]]$data)
plot_rastl(net_all[[3]]$data)
x[,,3]
x = simplify2array(x)
x[,,3]
filled.contour(x[,,3])
plot_rastl(net_all[[3]]$data)
plot_rastl(net_all[[4]]$data)
plot_rastl(net_all[[2]]$data)
filled.contour(x[,,2])
xm = apply(x, c(1,2), mean)
dd = sapply(1:dim(x)[3], function(i) sum((xm - x[,,i])^2))
dd
plot(dd)
dd[32]
filled.contour(x[,,32])
plot_rastl(net_data[[32]])
plot_rastl(net_data[[32]]$data)
plot_rastl(net_all[[32]]$data)
plot(dd)
plot_rastl(net_all[[3]]$data)
source('~/prog/alexeyche-junk/cns/R/srm/new/kernel.R', echo=TRUE)
x = lapply(net_all, function(x) get_finger_print(x$data, ro$T0, ro$Tmax, ro$fp_window, ro$fp_kernel_size))
x = simplify2array(x)
xm = apply(x, c(1,2), mean)
filled.contour(xm)
dd = sapply(1:dim(x)[3], function(i) sum((xm - x[,,i])^2))
dd
plot(dd)
dd[40]
plot_rastl(net_all[[40]]$data)
filled.contour(x[,,40])
filled.contour(xm)
plot(dd)
filled.contour(x[,,18])
plot_rastl(net_all[[18]]$data)
source('~/prog/alexeyche-junk/cns/R/srm/new/kernel.R', echo=TRUE)
x = lapply(net_all, function(x) get_finger_print(x$data, ro$T0, ro$Tmax, ro$fp_window, ro$fp_kernel_size))
x = simplify2array(x)
xm = apply(x, c(1,2), mean)
dd = sapply(1:dim(x)[3], function(i) sum((xm - x[,,i])^2))
filled.contour(xm)
plot(dd)
which(dd == max(dd))
dd[32]
plot_rastl(net_all[[32]]$data)
source('~/prog/alexeyche-junk/cns/R/srm/new/main_ucr.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/kernel.R', echo=TRUE)
x = lapply(net_all, function(x) get_finger_print(x$data, ro$T0, ro$Tmax, ro$fp_window, ro$fp_kernel_size))
x = simplify2array(x)
xm = apply(x, c(1,2), mean)
dd = sapply(1:dim(x)[3], function(i) sum((xm - x[,,i])^2))
plot(dd)
x[,,32]
source('~/prog/alexeyche-junk/cns/R/srm/new/main_ucr.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/main_ucr.R', echo=TRUE)
net_all
net_all[[1]]
binKernel(net_all[[1]]$data, 0, 300, 10)
binKernel(net_all[[2]]$data, 0, 300, 10)
binKernel(net_all[[32]]$data, 0, 300, 10)
post_process_set(net_all, 1, 0, 300, binKernel, 10)
mode_acc = run_options$mode
test_net_all = list()
cat("Running net on test data (N=", length(run_options$test_patterns),") with ", run_options$trials, " sampling trials\n", sep="")
for(id_patt in 1:length(run_options$test_patterns)) {
for(trial in 1:run_options$trials) {
glob_id = trial+(id_patt-1)*run_options$trials
net[id_m] = run_options$test_patterns[[id_patt]]$data
net[id_n] = -Inf
run_options$target_set$class = run_options$test_patterns[[id_patt]]$label
run_options$mode = "run"
c(net, net_neurons, stat, mean_grad) := run_srm(net_neurons, net, run_options)
net = lapply(net[neurons$ids], function(sp) sp[sp != -Inf])
test_net_all[[glob_id]] = list(data=net, label=run_options$test_patterns[[id_patt]]$label)
}
}
net_all = list()
cat("Running net on train data (N=", length(patterns),") with ", run_options$trials, " sampling trials\n", sep="")
for(id_patt in 1:length(patterns)) {
for(trial in 1:run_options$trials) {
glob_id = trial+(id_patt-1)*run_options$trials
net[id_m] = patterns[[id_patt]]$data
net[id_n] = -Inf
run_options$target_set$class = patterns[[id_patt]]$label
run_options$mode = "run"
c(net, net_neurons, stat, mean_grad) := run_srm(net_neurons, net, run_options)
net = lapply(net[neurons$ids], function(sp) sp[sp != -Inf])
net_all[[glob_id]] = list(data=net, label=patterns[[id_patt]]$label)
}
}
run_options$mode = mode_acc
train_set = net_all
test_set = test_net_all
train_processed = post_process_set(train_set, test_trials, 0, duration, binKernel, kernSize)
kernSize=10
train_processed = post_process_set(train_set, test_trials, 0, duration, binKernel, kernSize)
test_processed = post_process_set(test_set, test_trials, 0, duration, binKernel, kernSize)
test_set
set =test_set
trials=5
T0 = 0
Tmax=300
kernel=binKernel
kernSize=10
spikes_proc = list()
for(id_patt in 1:(length(set)/trials)) {
st_i = (id_patt-1)*trials+1
fin_i = st_i + trials -1
data_proc_l = lapply(set[st_i:fin_i], function(n) binKernel(n$data, T0, Tmax, kernSize))
data_proc = array(0, dim=c(length(set[[st_i]]$data), (Tmax-T0)/kernSize, length(data_proc_l)))
for(i in 1:length(data_proc_l)) {
data_proc[,,i] = data_proc_l[[i]]
}
spikes_proc[[id_patt]] = list(data=apply(data_proc, c(1,2), mean), label=set[[st_i]]$label)
}
id_patt
set[[5]]
set[[5]]$data
st_i = (id_patt-1)*trials+1
fin_i = st_i + trials -1
st_i
fin_i
data_proc_l = lapply(set[st_i:fin_i], function(n) binKernel(n$data, T0, Tmax, kernSize))
binKernel(set[[21]]$data, 0 ,300, 10)
binKernel(set[[22]]$data, 0 ,300, 10)
binKernel(set[[23]]$data, 0 ,300, 10)
binKernel(set[[24]]$data, 0 ,300, 10)
binKernel(set[[25]]$data, 0 ,300, 10)
binKernel(set[[25]]$data, 0 ,300, 10)
set[[25]]$data
net_data = set[[25]]$data
maxl = max(sapply(net_data, length))
breaks = seq(T0, Tmax, by=binSize)
lb = length(breaks)-1
if( (Tmax-T0)/binSize > (Tmax-T0)%/%binSize) lb = lb + 1
binSize=10
maxl = max(sapply(net_data, length))
breaks = seq(T0, Tmax, by=binSize)
lb = length(breaks)-1
if( (Tmax-T0)/binSize > (Tmax-T0)%/%binSize) lb = lb + 1
hist_ans = matrix(0, length(net_data), lb)
maxl
source('~/prog/alexeyche-junk/cns/R/srm/new/eval_funcs.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/main_ucr.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/main_ucr.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
?paste
strsplit("123 123", " ")
strsplit(" 123", " ")
#setwd("~/my/git/alexeyche-junk/cns/R/srm/new")
setwd("~/prog/alexeyche-junk/cns/R/srm/new")
require(snnSRM)
source('include.R')
source('ucr_ts.R')
source('eval_funcs.R')
source('layers.R')
#dir = "/home/alexeyche/my/sim"
dir = "~/prog/sim"
#system(sprintf("find %s -name \"*.png\" -type f -exec rm -f {} \\;", dir))
ID_MAX=0
M = 50
N = 10
data = synth # synthetic control
set.seed(1234)
c(train_dataset, test_dataset) := read_ts_file(data)
train_dataset = train_dataset[c(sample(1:50, 10), sample(51:100, 10), sample(101:150,10),
sample(151:200, 10), sample(201:250,10), sample(251:300,10))] # cut
test_dataset = test_dataset[c(sample(1:50, 10), sample(51:100, 10), sample(101:150, 10),
sample(151:200, 10), sample(201:250,5), sample(251:300, 10))]
ucr_test(train_dataset, test_dataset, eucl_dist_alg)
#train_dataset = train_dataset[c(1,101, 2, 102, 3, 103, 4, 104, 5, 105)] # cut
duration = 300
N = 10
start_w.M = 4 #matrix(rnorm( M*N, mean=2, sd=0.5), ncol=N, nrow=M)
start_w.N = 3 #matrix(rnorm( (N-1)*N, mean=2, sd=0.5), ncol=N, nrow=(N-1))
M = 50
dt = 0.5
gr1 = TSNeurons(M = M)
neurons = SRMLayer(N, start_w.N)
gr1$loadPatterns(train_dataset, duration, dt, lambda=8)
gr1$loadPatterns(test_dataset, duration, dt, lambda=8)
patt_len = length(gr1$patterns)
connection = matrix(gr1$ids, nrow=length(gr1$ids), ncol=N)
connect_window = N*2
step = M/N
overlap = 1
for(ni in 0:(N-1)) {
if(ni != 0) connection[1:((ni*step)-overlap),ni+1] = 0
if(ni != N-1) connection[((ni*step)+step+1+overlap):M,ni+1] = 0
}
neurons$connectFF(connection, start_w.M, 1:N )
args <- commandArgs(trailingOnly = TRUE)
if(length(args)>0) {
model_file = args
} else {
model_file = sprintf("%s/R/%s_%dx%d", dir, data, M, N)
}
if(file.exists(paste(model_file, ".idx", sep=""))) {
W = loadMatrix(model_file, 1)
invisible(sapply(1:N, function(id) {
id_to_conn = which(W[,id] != 0)
neurons$weights[[id]] = W[id_to_conn, id]
neurons$id_conns[[id]] = id_to_conn
}))
paste("model",model_file, "successfully loaded\n")
} else {
cat("Can't find file for model ", model_file, "\n")
}
run_options = list(T0 = 0, Tmax = duration, dt = 0.5, learning_rate = 0.5,
learn_window_size = 300, mode="run", collect_stat=TRUE,
target_set = list(target_function_gen = random_2spikes_tf, depress_null=FALSE),
learn_layer_id = 1
)
#patterns = gr1$patterns[1:length(train_dataset)] #[c(1:10,51:60, 101:110, 151:160, 201:210, 251:260)]
patterns = gr1$patterns #[(length(train_dataset)+1):(length(train_dataset)+length(test_dataset))] #[c(1:10,51:60, 101:110, 151:160, 201:210, 251:260)]
trials = 1
net_all = list()
u_all = list()
p_all = list()
net_neurons = SimLayers(list(neurons))
net_neurons
for(id_patt in 1:length(patterns)) {
for(trial in 1:trials) {
net = list()
net[gr1$ids] = patterns[[id_patt]]$data
net[neurons$ids] = -Inf
run_options$class = patterns[[id_patt]]$class
c(net, net_neurons, stat, mean_grad) := run_srm(net_neurons, net, run_options)
net = lapply(net[neurons$ids], function(sp) sp[sp != -Inf])
glob_id = trial+(id_patt-1)*trials
net_all[[glob_id]] = list(data=net, label=patterns[[id_patt]]$label)
#    u_all[[glob_id]] = list(data=stat[[1]]$u, label=patterns[[id_patt]]$label)
#    p_all[[glob_id]] = list(data=stat[[1]]$p, label=patterns[[id_patt]]$label)
}
}
net_all
simLayers
