left = findInterval(T0, sp)+1
right = findInterval(Tmax, sp, rightmost.closed=TRUE)
if(left<=right) sp[left:right]
})
#nspikes = lapply(1:length(nspikes), target_set$target_function_gen(nspikes))
left_part = lapply(1:length(id_n), function(number) {
if(!is.null(nspikes[[number]])) {
u = neurons$u_one(number, nspikes[[number]], net)
#cat("n(", neurons[[number]]$id, ")u=",u,"\n")
(p_stroke(u)/g(u))
}
})
id_n = neurons$ids #sapply(neurons, function(n) n$id)
nspikes = lapply(net[id_n], function(sp) {
left = findInterval(T0, sp)+1
right = findInterval(Tmax, sp, rightmost.closed=TRUE)
if(left<=right) sp[left:right]
})
T0=0
Tmax=150
id_n = neurons$ids #sapply(neurons, function(n) n$id)
nspikes = lapply(net[id_n], function(sp) {
left = findInterval(T0, sp)+1
right = findInterval(Tmax, sp, rightmost.closed=TRUE)
if(left<=right) sp[left:right]
})
nspikes
left_part = lapply(1:length(id_n), function(number) {
if(!is.null(nspikes[[number]])) {
u = neurons$u_one(number, nspikes[[number]], net)
#cat("n(", neurons[[number]]$id, ")u=",u,"\n")
(p_stroke(u)/g(u))
}
})
left_part
source('~/prog/alexeyche-junk/cns/R/srm/new/llh.R', echo=TRUE)
#!/usr/bin/RScript
setwd("~/prog/alexeyche-junk/cns/R/srm/new")
#setwd("~/my/git/alexeyche-junk/cns/R/srm/new")
require(snnSRM)
require(snowfall)
require(cubature)
source('util.R')
source('neuron.R')
source('gen_spikes.R')
source('plot_funcs.R')
source('grad_funcs.R')
source('llh.R')
source('srm.R')
source('target_functions.R')
ID_MAX=0
if(!sfIsRunning()) {
sfInit(parallel=TRUE, cpus=10)
res = sfClusterEval(require('snnSRM'))
}
sfExport('constants')
dir = "/home/alexeyche/prog/sim/R"
M = 50
N = 5
id_m = seq(1, M)
id_n = seq(M+1, M+N)
gr1 = TSNeurons(M = M)
file <- "/home/alexeyche/prog/sim/stimuli/sd1.csv"
#file <- "/home/alexeyche/my/sim/stimuli/sd1.csv"
gr1$loadPatternFromFile(file, 150, 1, 0.5)
#net <- spikeMatToSpikeList(gr1$patterns[[1]]$data)
net = list()
net[id_m] = gr1$patterns[[1]]$data
start_w = 5.5
neurons = SRMLayer(N, start_w)
neurons$connectFF(gr1$ids, start_w)
null_pattern = list()
for(i in 1:N) {
null_pattern[[i]] <- -Inf
}
pattern = list()
pattern[[1]] <- c(-Inf, 75)
pattern[[2]] <- c(-Inf, 65)
pattern[[3]] <- c(-Inf, 50,80)
pattern[[4]] <- c(-Inf, 100)
pattern[[5]] <- c(-Inf, 10)
epochs = 50
run_options = list(T0 = 0, Tmax = 150, dt = 0.5, learning_rate = 0.5, learn_window_size = 10, mode="run", collect_stat=FALSE)
layers = list(neurons)
target_set = list(target_function_gen = full_spike_tf, depress_null=TRUE)
net[id_n] <- pattern
gr = grad_func(layers[[1]], 0, 150, net, target_set)
net[id_n] <- null_pattern
c(net, layers, stat) := run_srm(layers, net, run_options)
not_fired = all(sapply(net[id_n], function(sp) length(sp) == 1))
if(!not_fired)
p1 = plot_rastl(net[id_n], sprintf("epoch %d", ep))
p2 = levelplot(sapply(gr, function(x) x), col.regions=colorRampPalette(c("black", "white")))
if(!not_fired)
print(p1, position=c(0, 0.5, 1, 1), more=TRUE)
print(p2, position=c(0, 0, 1, 0.5))
invisible(sapply(1:N, function(i) layers[[1]]$weights[[i]] <- layers[[1]]$weights[[i]] + run_options$learning_rate * gr[[i]] ))
source('~/prog/alexeyche-junk/cns/R/srm/new/llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/llh.R', echo=TRUE)
net[id_n] <- pattern
gr = grad_func(layers[[1]], 0, 150, net, target_set)
gr
net[id_n] <- null_pattern
c(net, layers, stat) := run_srm(layers, net, run_options)
not_fired = all(sapply(net[id_n], function(sp) length(sp) == 1))
if(!not_fired)
p1 = plot_rastl(net[id_n], sprintf("epoch %d", ep))
p2 = levelplot(sapply(gr, function(x) x), col.regions=colorRampPalette(c("black", "white")))
if(!not_fired)
print(p1, position=c(0, 0.5, 1, 1), more=TRUE)
print(p2, position=c(0, 0, 1, 0.5))
invisible(sapply(1:N, function(i) layers[[1]]$weights[[i]] <- layers[[1]]$weights[[i]] + run_options$learning_rate * gr[[i]] ))
ep=1
net[id_n] <- null_pattern
c(net, layers, stat) := run_srm(layers, net, run_options)
not_fired = all(sapply(net[id_n], function(sp) length(sp) == 1))
if(!not_fired)
p1 = plot_rastl(net[id_n], sprintf("epoch %d", ep))
p2 = levelplot(sapply(gr, function(x) x), col.regions=colorRampPalette(c("black", "white")))
if(!not_fired)
print(p1, position=c(0, 0.5, 1, 1), more=TRUE)
print(p2, position=c(0, 0, 1, 0.5))
invisible(sapply(1:N, function(i) layers[[1]]$weights[[i]] <- layers[[1]]$weights[[i]] + run_options$learning_rate * gr[[i]] ))
neurons$weights
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
gr
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
gr
grad = adaptIntegrate(function(t) integrand(t, net, neurons), T0, Tmax, tol=1e-03, fDim=length(id_n)*length(neurons$id_conns[[1]]), maxEval=300)
grad
int_part = matrix(-grad$integral, nrow = length(neurons$id_conns[[1]]), ncol=length(id_n))
int_part
spike_part
dim(spike_part)
dim(int_part)
id_n = neurons$ids #sapply(neurons, function(n) n$id)
nspikes = lapply(net[id_n], function(sp) {
left = findInterval(T0, sp)+1
right = findInterval(Tmax, sp, rightmost.closed=TRUE)
if(left<=right) sp[left:right]
})
#nspikes = lapply(1:length(nspikes), target_set$target_function_gen(nspikes))
left_part = lapply(1:length(id_n), function(number) {
if(!is.null(nspikes[[number]])) {
u = neurons$u_one(number, nspikes[[number]], net)
#cat("n(", neurons[[number]]$id, ")u=",u,"\n")
(p_stroke(u)/g(u))
}
})
spike_part = lapply(1:length(id_n), function(id_number) {
sapply(neurons$id_conns[[id_number]], function(idc) {
if(!is.null(nspikes[[id_number]])) {
sum(left_part[[id_number]]*grab_epsp(nspikes[[id_number]], net[[idc]]))
} else {
0
}
})
})
spike_part
int_part
int_part
int_part
apply(int_part, 2, function(x) x)
?apply
?lapply
lapply(int_part, 2, function(x) x)
lapply(int_part, function(x) x)
list(for(i in ncol(int_part)) i)
lapply(seq_len(ncol(int_part)), function(ci) int_part[,ci])
source('~/prog/alexeyche-junk/cns/R/srm/new/llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
net
net[id_n] <- pattern
id_n = neurons$ids #sapply(neurons, function(n) n$id)
nspikes = lapply(net[id_n], function(sp) {
left = findInterval(T0, sp)+1
right = findInterval(Tmax, sp, rightmost.closed=TRUE)
if(left<=right) sp[left:right]
})
nspikes
Tmax
Tmax=150
id_n = neurons$ids #sapply(neurons, function(n) n$id)
nspikes = lapply(net[id_n], function(sp) {
left = findInterval(T0, sp)+1
right = findInterval(Tmax, sp, rightmost.closed=TRUE)
if(left<=right) sp[left:right]
})
left_part = lapply(1:length(id_n), function(number) {
if(!is.null(nspikes[[number]])) {
u = neurons$u_one(number, nspikes[[number]], net)
#cat("n(", neurons[[number]]$id, ")u=",u,"\n")
(p_stroke(u)/g(u))
}
})
left_part
u = neurons$u_one(1, nspikes[[1]], net)
u
nspike[[1]]
nspikes[[1]]
neuron$u_one(1,60, net)
u = neurons$u_one(1, nspikes[[1]], net)
neurons$u_one(1,60, net)
neurons$u_one(1, 60, net)
neurons
sapply(left_part, function(x) Inf %in% x)
any(sapply(left_part, function(x) Inf %in% x))
any(c(FALSE, FALSE, TRUE))
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
t
net
id_n = neurons$ids #sapply(neurons, function(n) n$id)
nspikes = lapply(net[id_n], function(sp) {
left = findInterval(T0, sp)+1
right = findInterval(Tmax, sp, rightmost.closed=TRUE)
if(left<=right) sp[left:right]
})
left_part = lapply(1:length(id_n), function(number) {
if(!is.null(nspikes[[number]])) {
u = neurons$u_one(number, nspikes[[number]], net)
#cat("n(", neurons[[number]]$id, ")u=",u,"\n")
(p_stroke(u)/g(u))
}
})
left_part
u = neurons$u_one(1, nspikes[[1]], net)
u
neurons$u_one(1, nspikes[[1]], net)
neurons$u_one(1, nspikes[[2]], net)
neurons$u_one(1, nspikes[[3]], net)
neurons$u_one(1, nspikes[[4]], net)
neurons$u_one(1, nspikes[[5]], net)
p_stroke(-180)
g(-180)
source('~/prog/alexeyche-junk/cns/R/srm/new/llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
warnings()
source('~/prog/alexeyche-junk/cns/R/srm/new/llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
#!/usr/bin/RScript
setwd("~/prog/alexeyche-junk/cns/R/srm/new")
#setwd("~/my/git/alexeyche-junk/cns/R/srm/new")
require(snnSRM)
require(snowfall)
require(cubature)
source('util.R')
source('neuron.R')
source('gen_spikes.R')
source('plot_funcs.R')
source('grad_funcs.R')
source('llh.R')
source('srm.R')
source('target_functions.R')
ID_MAX=0
if(!sfIsRunning()) {
sfInit(parallel=TRUE, cpus=10)
res = sfClusterEval(require('snnSRM'))
}
sfExport('constants')
dir = "/home/alexeyche/prog/sim/R"
M = 50
N = 5
id_m = seq(1, M)
id_n = seq(M+1, M+N)
gr1 = TSNeurons(M = M)
file <- "/home/alexeyche/prog/sim/stimuli/sd1.csv"
#file <- "/home/alexeyche/my/sim/stimuli/sd1.csv"
gr1$loadPatternFromFile(file, 150, 1, 0.5)
#net <- spikeMatToSpikeList(gr1$patterns[[1]]$data)
net = list()
net[id_m] = gr1$patterns[[1]]$data
start_w = 5.5
neurons = SRMLayer(N, start_w)
neurons$connectFF(gr1$ids, start_w)
null_pattern = list()
for(i in 1:N) {
null_pattern[[i]] <- -Inf
}
pattern = list()
pattern[[1]] <- c(-Inf, 75)
pattern[[2]] <- c(-Inf, 65)
pattern[[3]] <- c(-Inf, 50,80)
pattern[[4]] <- c(-Inf, 100)
pattern[[5]] <- c(-Inf, 10)
epochs = 30
run_options = list(T0 = 0, Tmax = 150, dt = 0.5, learning_rate = 1, learn_window_size = 10, mode="run", collect_stat=FALSE)
layers = list(neurons)
id_n = neurons$ids #sapply(neurons, function(n) n$id)
nspikes = lapply(net[id_n], function(sp) {
left = findInterval(T0, sp)+1
right = findInterval(Tmax, sp, rightmost.closed=TRUE)
if(left<=right) sp[left:right]
})
#nspikes = lapply(1:length(nspikes), target_set$target_function_gen(nspikes))
left_part = lapply(1:length(id_n), function(number) {
if(!is.null(nspikes[[number]])) {
u = neurons$u_one(number, nspikes[[number]], net)
#cat("n(", neurons[[number]]$id, ")u=",u,"\n")
ans = (p_stroke(u)/g(u))
ans[ans == Inf] = 0
return(ans)
}
})
left_part
net[id_n] <- pattern
id_n = neurons$ids #sapply(neurons, function(n) n$id)
nspikes = lapply(net[id_n], function(sp) {
left = findInterval(T0, sp)+1
right = findInterval(Tmax, sp, rightmost.closed=TRUE)
if(left<=right) sp[left:right]
})
#nspikes = lapply(1:length(nspikes), target_set$target_function_gen(nspikes))
left_part = lapply(1:length(id_n), function(number) {
if(!is.null(nspikes[[number]])) {
u = neurons$u_one(number, nspikes[[number]], net)
#cat("n(", neurons[[number]]$id, ")u=",u,"\n")
ans = (p_stroke(u)/g(u))
ans[ans == Inf] = 0
return(ans)
}
})
left_part
spike_part = lapply(1:length(id_n), function(id_number) {
sapply(neurons$id_conns[[id_number]], function(idc) {
if(!is.null(nspikes[[id_number]])) {
sum(left_part[[id_number]]*grab_epsp(nspikes[[id_number]], net[[idc]]))
} else {
0
}
})
})
if(!target_set$depress_null) {
not_fired = sapply(nspikes, is.null)
} else {
not_fired = rep(FALSE, neurons$len)
}
int_options = list(T0 = T0, Tmax=Tmax)
grad = adaptIntegrate(function(t) integrand(t, net, neurons), T0, Tmax, tol=1e-03, fDim=length(id_n)*length(neurons$id_conns[[1]]), maxEval=300)
int_part = matrix(-grad$integral, nrow = length(neurons$id_conns[[1]]), ncol=length(id_n))
int_part = lapply(seq_len(ncol(int_part)), function(ci) int_part[,ci])
gr = mapply("+", spike_part, int_part, SIMPLIFY=FALSE)
invisible(sapply(1:N, function(i) layers[[1]]$weights[[i]] <- layers[[1]]$weights[[i]] + run_options$learning_rate * gr[[i]] ))
neurons
id_n = neurons$ids #sapply(neurons, function(n) n$id)
nspikes = lapply(net[id_n], function(sp) {
left = findInterval(T0, sp)+1
right = findInterval(Tmax, sp, rightmost.closed=TRUE)
if(left<=right) sp[left:right]
})
#nspikes = lapply(1:length(nspikes), target_set$target_function_gen(nspikes))
left_part = lapply(1:length(id_n), function(number) {
if(!is.null(nspikes[[number]])) {
u = neurons$u_one(number, nspikes[[number]], net)
#cat("n(", neurons[[number]]$id, ")u=",u,"\n")
ans = (p_stroke(u)/g(u))
ans[ans == Inf] = 0
return(ans)
}
})
left_part
source('~/prog/alexeyche-junk/cns/R/srm/new/llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
stop
?stop
source('~/prog/alexeyche-junk/cns/R/srm/new/llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
id_n = neurons$ids #sapply(neurons, function(n) n$id)
nspikes = lapply(net[id_n], function(sp) {
left = findInterval(T0, sp)+1
right = findInterval(Tmax, sp, rightmost.closed=TRUE)
if(left<=right) sp[left:right]
})
#nspikes = lapply(1:length(nspikes), target_set$target_function_gen(nspikes))
left_part = lapply(1:length(id_n), function(number) {
if(!is.null(nspikes[[number]])) {
u = neurons$u_one(number, nspikes[[number]], net)
#cat("n(", neurons[[number]]$id, ")u=",u,"\n")
ans = (p_stroke(u)/g(u))
#ans[ans == Inf] = 0
return(ans)
}
})
left_part
nspikes
Tmax=150
id_n = neurons$ids #sapply(neurons, function(n) n$id)
nspikes = lapply(net[id_n], function(sp) {
left = findInterval(T0, sp)+1
right = findInterval(Tmax, sp, rightmost.closed=TRUE)
if(left<=right) sp[left:right]
})
#nspikes = lapply(1:length(nspikes), target_set$target_function_gen(nspikes))
left_part = lapply(1:length(id_n), function(number) {
if(!is.null(nspikes[[number]])) {
u = neurons$u_one(number, nspikes[[number]], net)
#cat("n(", neurons[[number]]$id, ")u=",u,"\n")
ans = (p_stroke(u)/g(u))
#ans[ans == Inf] = 0
return(ans)
}
})
left_part
g(-150)
p_stroke(-150)/g(-150)
p_stroke(-150)
source('~/prog/alexeyche-junk/cns/R/srm/new/llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
net
id_n = neurons$ids #sapply(neurons, function(n) n$id)
nspikes = lapply(net[id_n], function(sp) {
left = findInterval(T0, sp)+1
right = findInterval(Tmax, sp, rightmost.closed=TRUE)
if(left<=right) sp[left:right]
})
#nspikes = lapply(1:length(nspikes), target_set$target_function_gen(nspikes))
left_part = lapply(1:length(id_n), function(number) {
if(!is.null(nspikes[[number]])) {
u = neurons$u_one(number, nspikes[[number]], net)
#cat("n(", neurons[[number]]$id, ")u=",u,"\n")
ans = (p_stroke(u)/g(u))
ans[ans == Inf] = 0
return(ans)
}
})
left_part
Tmax=150
id_n = neurons$ids #sapply(neurons, function(n) n$id)
nspikes = lapply(net[id_n], function(sp) {
left = findInterval(T0, sp)+1
right = findInterval(Tmax, sp, rightmost.closed=TRUE)
if(left<=right) sp[left:right]
})
#nspikes = lapply(1:length(nspikes), target_set$target_function_gen(nspikes))
left_part = lapply(1:length(id_n), function(number) {
if(!is.null(nspikes[[number]])) {
u = neurons$u_one(number, nspikes[[number]], net)
#cat("n(", neurons[[number]]$id, ")u=",u,"\n")
ans = (p_stroke(u)/g(u))
ans[ans == Inf] = 0
return(ans)
}
})
left_part
g(-150)
g(-70)
g(-150)
g
alpha <- 1
beta <- 1
tr <- -50 # mV
g <- Vectorize(function(u) {
(beta/alpha)*(log(1+exp(alpha*(tr-u))) -alpha*(tr-u))
})
g(-150)
g(-150:-100)
g(-150:-70)
-80+50
exp(-80+50)
1+exp(-80+50)
1+exp(-80+50)*5
exp(-80+50)*5
exp(-80+50)*10
1+exp(-80+50)*5
1+exp(-80+50)*10
1+exp(-80+50)*20
exp(-80+50)
sifnig()
?signif
signif(1+exp(-80+50)*10, 10)
signif(1+exp(-80+50)*20, 10)
exp(-80+50)
exp(-80+50)*20
exp(-80+50)*100
exp(-80+50)*10000
signif(1+exp(-80+50)*10000, 10)
signif(1+exp(-80+50)*1000000, 10)
signif(1+exp(-80+50)*100000000, 10)
g
plot(g)
plot(g(seq(-150,0)))
source('~/prog/alexeyche-junk/cns/R/srm/new/llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/test_llh.R', echo=TRUE)
require(RcppArmadillo)
require(RcppArmadillo)
install.packages('RcppArmadillo')
?install.packages('RcppArmadillo')
Rcpp::LdFlags()
