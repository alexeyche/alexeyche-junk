stopifnot(all(lengths == lengths[1]))
M = lengths[1]
N = sum(sapply(layers, function(l) l$len))
id_m = seq(1, M)
id_n = seq(M+1, M+N)
all_n = M
run_options$mode = "run"
gr = list()
for(id_patt in 1:length(patterns)) {
net[id_m] = patterns[[id_patt]]$data
net[id_n] = null_pattern.N
run_options$class = patterns[[id_patt]]$class
c(net, layers, sprob, spot, mean_grad) := run_srm(layers, net, run_options)
target_set$class = patterns[[id_patt]]$class
gr[[id_patt]] = layers[[2]]$grad(run_options$T0, run_options$Tmax, net, target_set)
}
source('~/prog/alexeyche-junk/cns/R/srm/new/srm.R', echo=TRUE)
target_set$class = patterns[[id_patt]]$class
id_patt
gr
gr = list(0,0)
for(id_patt in 1:length(patterns)) {
net[id_m] = patterns[[id_patt]]$data
net[id_n] = null_pattern.N
run_options$class = patterns[[id_patt]]$class
c(net, layers, sprob, spot, mean_grad) := run_srm(layers, net, run_options)
target_set$class = patterns[[id_patt]]$class
gr = gr + layers[[2]]$grad(run_options$T0, run_options$Tmax, net, target_set)
}
gr
layers[[2]]$grad(run_options$T0, run_options$Tmax, net, target_set)
layers[[2]]$grad(run_options$T0, run_options$Tmax, net, target_set) + gr
gr = list()
for(id_patt in 1:length(patterns)) {
net[id_m] = patterns[[id_patt]]$data
net[id_n] = null_pattern.N
run_options$class = patterns[[id_patt]]$class
c(net, layers, sprob, spot, mean_grad) := run_srm(layers, net, run_options)
target_set$class = patterns[[id_patt]]$class
gr[[id_patt]] = layers[[2]]$grad(run_options$T0, run_options$Tmax, net, target_set)
}
for(g in gr) {
invisible(sapply(1:layers[[2]]$len, function(i) layers[[2]]$weights[[i]] = layers[[2]]$weights[[i]] + run_options$learning_rate * g[[i]] ))
}
setwd("~/prog/alexeyche-junk/cns/R/srm/new")
#setwd("~/my/git/alexeyche-junk/cns/R/srm/new")
source('include.R')
if(!sfIsRunning()) {
sfInit(parallel=TRUE, cpus=10)
res = sfClusterEval(require('snnSRM'))
}
sfExport('constants')
dir = "/home/alexeyche/prog/sim/R"
#dir = "/home/alexeyche/my/sim/R"
system(sprintf("find %s -name \"*.png\" -type f -exec rm -f {} \\;", dir))
M = 50
N = 10
Nro = 2
gr1 = TSNeurons(M = M, patterns = list())
file <- "/home/alexeyche/prog/sim/stimuli/sd1.csv"
file2 <- "/home/alexeyche/prog/sim/stimuli/sd2.csv"
#file <- "/home/alexeyche/my/sim/stimuli/sd1.csv"
#file2 <- "/home/alexeyche/my/sim/stimuli/sd2.csv"
gr1$loadPattern(file, 100, 1)
gr1$loadPattern(file2, 100, 2)
id_m = 1:M
id_n = (M+1):(M+N)
id_ro = (M+N+1):(M+N+Nro)
start_w = 5
weights = list()
id_conns = list()
ids = NULL
for(i in 1:N) {
conn <- id_m
conn <- c(conn, id_n[id_n != id_n[i]]) # id of srm neurons: no self connections
w <- c(rep(start_w, M), rep(start_w/4, N-1))
id_conns[[i]] = conn
weights[[i]] = w
ids = c(ids, id_n[i])
}
neurons = SRMLayer(id_conns = id_conns, weights = weights, ids=ids)
weights_ro = list()
for(i in 1:Nro) {
weights_ro[[i]] <- c(rep(start_w, N))
}
ro_neurons = SMNeuronLayer(weights = weights_ro, id_conn = id_n, ids = id_ro)
layers = list(neurons, ro_neurons)
epochs = 100
#run_mode = "run"
run_mode = "learn"
run_options = list(T0 = 0, Tmax = 100, dt = 0.5, learning_rate = 0.001,
learn_window_size = 100, mode=run_mode, collect_stat=TRUE,
target_set = list(target_function_gen = random_2spikes_tf, depress_null=FALSE),
learn_layer_id = 2
)
patterns = gr1$patterns
lengths = sapply(patterns, function(p) p$len)
stopifnot(all(lengths == lengths[1]))
M = lengths[1]
N = sum(sapply(layers, function(l) l$len))
id_m = seq(1, M)
id_n = seq(M+1, M+N)
all_n = M
model_file = sprintf("%s/%dx%d", dir, M, N-2)
if(file.exists(paste(model_file, ".idx", sep=""))) {
if(run_options$learn_layer_id != 1) {
W = loadMatrix(model_file, 1)
invisible(sapply(1:(N-2), function(id) {
layers[[1]]$weights[[id]] = W[1:length(layers[[1]]$id_conns[[id]]),id]
}
))
}
} else {
cat("Can't find file for model ", model_file, "\n")
}
layers[[1]]
layers[[2]]
run_options$mode = "run"
gr = list()
nnet = list()
for(id_patt in 1:length(patterns)) {
net[id_m] = patterns[[id_patt]]$data
net[id_n] = null_pattern.N
run_options$class = patterns[[id_patt]]$class
c(net, layers, sprob, spot, mean_grad) := run_srm(layers, net, run_options)
nnet[[id_patt]] = net
target_set$class = patterns[[id_patt]]$class
gr[[id_patt]] = layers[[2]]$grad(run_options$T0, run_options$Tmax, net, target_set)
}
for(g in gr) {
invisible(sapply(1:layers[[2]]$len, function(i) layers[[2]]$weights[[i]] = layers[[2]]$weights[[i]] + run_options$learning_rate * g[[i]] ))
}
r1 = rowSums(sapply(seq(run_options$T0, run_options$Tmax, by=0.5), function(t) nl$r(t, nnet[[1]])))
r2 = rowSums(sapply(seq(run_options$T0, run_options$Tmax, by=0.5), function(t) nl$r(t, nnet[[2]])))
cat("r1: ", r1, " r2: ", r2, "\n")
r1 = rowSums(sapply(seq(run_options$T0, run_options$Tmax, by=0.5), function(t) layers[[2]]$r(t, nnet[[1]])))
r2 = rowSums(sapply(seq(run_options$T0, run_options$Tmax, by=0.5), function(t) layers[[2]]$r(t, nnet[[2]])))
cat("r1: ", r1, " r2: ", r2, "\n")
r1 = rowSums(sapply(seq(run_options$T0, run_options$Tmax, by=0.5), function(t) layers[[2]]$rate(t, nnet[[1]])))
r2 = rowSums(sapply(seq(run_options$T0, run_options$Tmax, by=0.5), function(t) layers[[2]]$rate(t, nnet[[2]])))
cat("r1: ", r1, " r2: ", r2, "\n")
source('~/prog/alexeyche-junk/cns/R/srm/new/softmax.R', echo=TRUE)
learn_layer(patterns, layers, run_options)
source('~/prog/alexeyche-junk/cns/R/srm/new/softmax.R', echo=TRUE)
learn_layer(patterns, layers, run_options)
source('~/prog/alexeyche-junk/cns/R/srm/new/softmax.R', echo=TRUE)
learn_layer(patterns, layers, run_options)
run_options
source('~/prog/alexeyche-junk/cns/R/srm/new/softmax.R', echo=TRUE)
learn_layer(patterns, layers, run_options)
source('~/prog/alexeyche-junk/cns/R/srm/new/main.R', echo=TRUE)
M = lengths[1]
N = sum(sapply(layers, function(l) l$len))
id_m = seq(1, M)
id_n = seq(M+1, M+N)
all_n = M
model_file = sprintf("%s/%dx%d", dir, M, N-2)
if(file.exists(paste(model_file, ".idx", sep=""))) {
if(run_options$learn_layer_id != 1) {
W = loadMatrix(model_file, 1)
invisible(sapply(1:(N-2), function(id) {
layers[[1]]$weights[[id]] = W[1:length(layers[[1]]$id_conns[[id]]),id]
}
))
}
} else {
cat("Can't find file for model ", model_file, "\n")
}
learn_layer(patterns, layers, run_options)
#!/usr/bin/RScript
setwd("~/prog/alexeyche-junk/cns/R/srm/new")
#setwd("~/my/git/alexeyche-junk/cns/R/srm/new")
source('include.R')
if(!sfIsRunning()) {
sfInit(parallel=TRUE, cpus=10)
res = sfClusterEval(require('snnSRM'))
}
sfExport('constants')
dir = "/home/alexeyche/prog/sim/R"
#dir = "/home/alexeyche/my/sim/R"
system(sprintf("find %s -name \"*.png\" -type f -exec rm -f {} \\;", dir))
M = 50
N = 10
Nro = 2
gr1 = TSNeurons(M = M, patterns = list())
file <- "/home/alexeyche/prog/sim/stimuli/sd1.csv"
file2 <- "/home/alexeyche/prog/sim/stimuli/sd2.csv"
#file <- "/home/alexeyche/my/sim/stimuli/sd1.csv"
#file2 <- "/home/alexeyche/my/sim/stimuli/sd2.csv"
gr1$loadPattern(file, 100, 1)
gr1$loadPattern(file2, 100, 2)
id_m = 1:M
id_n = (M+1):(M+N)
id_ro = (M+N+1):(M+N+Nro)
start_w = 5
weights = list()
id_conns = list()
ids = NULL
for(i in 1:N) {
conn <- id_m
conn <- c(conn, id_n[id_n != id_n[i]]) # id of srm neurons: no self connections
w <- c(rep(start_w, M), rep(start_w/4, N-1))
id_conns[[i]] = conn
weights[[i]] = w
ids = c(ids, id_n[i])
}
neurons = SRMLayer(id_conns = id_conns, weights = weights, ids=ids)
weights_ro = list()
for(i in 1:Nro) {
weights_ro[[i]] <- c(rep(start_w, N))
}
ro_neurons = SMNeuronLayer(weights = weights_ro, id_conn = id_n, ids = id_ro)
layers = list(neurons, ro_neurons)
epochs = 100
#run_mode = "run"
run_mode = "learn"
run_options = list(T0 = 0, Tmax = 100, dt = 0.5, learning_rate = 0.001,
learn_window_size = 100, mode=run_mode, collect_stat=TRUE,
target_set = list(target_function_gen = random_2spikes_tf, depress_null=FALSE),
learn_layer_id = 2
)
patterns = gr1$patterns
source('~/prog/alexeyche-junk/cns/R/srm/new/learn_and_run_net.R', echo=TRUE)
M = lengths[1]
N = sum(sapply(layers, function(l) l$len))
id_m = seq(1, M)
id_n = seq(M+1, M+N)
all_n = M
model_file = sprintf("%s/%dx%d", dir, M, N-2)
if(file.exists(paste(model_file, ".idx", sep=""))) {
if(run_options$learn_layer_id != 1) {
W = loadMatrix(model_file, 1)
invisible(sapply(1:(N-2), function(id) {
layers[[1]]$weights[[id]] = W[1:length(layers[[1]]$id_conns[[id]]),id]
}
))
}
} else {
cat("Can't find file for model ", model_file, "\n")
}
layers
learn_layer(patterns, layers, run_options)
nnet = list()
net = list()
for(id_patt in 1:length(patterns)) {
net[id_m] = patterns[[id_patt]]$data
net[id_n] = null_pattern.N
run_options$class = patterns[[id_patt]]$class
c(net, layers, sprob, spot, mean_grad) := run_srm(layers, net, run_options)
nnet[[id_patt]] = net
target_set$class = patterns[[id_patt]]$class
gr[[id_patt]] = layers[[2]]$grad(run_options$T0, run_options$Tmax, net, target_set)
}
nnet
run_options = list(T0 = 0, Tmax = 100, dt = 0.5, learning_rate = 0.01,
learn_window_size = 100, mode=run_mode, collect_stat=TRUE,
target_set = list(target_function_gen = random_2spikes_tf, depress_null=FALSE),
learn_layer_id = 2
)
start_w = 5
weights = list()
id_conns = list()
ids = NULL
for(i in 1:N) {
conn <- id_m
conn <- c(conn, id_n[id_n != id_n[i]]) # id of srm neurons: no self connections
w <- c(rep(start_w, M), rep(start_w/4, N-1))
id_conns[[i]] = conn
weights[[i]] = w
ids = c(ids, id_n[i])
}
neurons = SRMLayer(id_conns = id_conns, weights = weights, ids=ids)
weights_ro = list()
for(i in 1:Nro) {
weights_ro[[i]] <- c(rep(start_w, N))
}
ro_neurons = SMNeuronLayer(weights = weights_ro, id_conn = id_n, ids = id_ro)
layers = list(neurons, ro_neurons)
lengths = sapply(patterns, function(p) p$len)
stopifnot(all(lengths == lengths[1]))
M = lengths[1]
N = sum(sapply(layers, function(l) l$len))
id_m = seq(1, M)
id_n = seq(M+1, M+N)
all_n = M
model_file = sprintf("%s/%dx%d", dir, M, N-2)
if(file.exists(paste(model_file, ".idx", sep=""))) {
if(run_options$learn_layer_id != 1) {
W = loadMatrix(model_file, 1)
invisible(sapply(1:(N-2), function(id) {
layers[[1]]$weights[[id]] = W[1:length(layers[[1]]$id_conns[[id]]),id]
}
))
}
} else {
cat("Can't find file for model ", model_file, "\n")
}
N
#!/usr/bin/RScript
setwd("~/prog/alexeyche-junk/cns/R/srm/new")
#setwd("~/my/git/alexeyche-junk/cns/R/srm/new")
source('include.R')
if(!sfIsRunning()) {
sfInit(parallel=TRUE, cpus=10)
res = sfClusterEval(require('snnSRM'))
}
sfExport('constants')
dir = "/home/alexeyche/prog/sim/R"
#dir = "/home/alexeyche/my/sim/R"
system(sprintf("find %s -name \"*.png\" -type f -exec rm -f {} \\;", dir))
M = 50
N = 10
Nro = 2
gr1 = TSNeurons(M = M, patterns = list())
file <- "/home/alexeyche/prog/sim/stimuli/sd1.csv"
file2 <- "/home/alexeyche/prog/sim/stimuli/sd2.csv"
#file <- "/home/alexeyche/my/sim/stimuli/sd1.csv"
#file2 <- "/home/alexeyche/my/sim/stimuli/sd2.csv"
gr1$loadPattern(file, 100, 1)
gr1$loadPattern(file2, 100, 2)
id_m = 1:M
id_n = (M+1):(M+N)
id_ro = (M+N+1):(M+N+Nro)
start_w = 5
weights = list()
id_conns = list()
ids = NULL
for(i in 1:N) {
conn <- id_m
conn <- c(conn, id_n[id_n != id_n[i]]) # id of srm neurons: no self connections
w <- c(rep(start_w, M), rep(start_w/4, N-1))
id_conns[[i]] = conn
weights[[i]] = w
ids = c(ids, id_n[i])
}
neurons = SRMLayer(id_conns = id_conns, weights = weights, ids=ids)
weights_ro = list()
for(i in 1:Nro) {
weights_ro[[i]] <- c(rep(start_w, N))
}
ro_neurons = SMNeuronLayer(weights = weights_ro, id_conn = id_n, ids = id_ro)
layers = list(neurons, ro_neurons)
epochs = 100
#run_mode = "run"
run_mode = "learn"
run_options = list(T0 = 0, Tmax = 100, dt = 0.5, learning_rate = 0.01,
learn_window_size = 100, mode=run_mode, collect_stat=TRUE,
target_set = list(target_function_gen = random_2spikes_tf, depress_null=FALSE),
learn_layer_id = 2
)
lengths = sapply(patterns, function(p) p$len)
stopifnot(all(lengths == lengths[1]))
M = lengths[1]
N = sum(sapply(layers, function(l) l$len))
id_m = seq(1, M)
id_n = seq(M+1, M+N)
all_n = M
model_file = sprintf("%s/%dx%d", dir, M, N-2)
if(file.exists(paste(model_file, ".idx", sep=""))) {
if(run_options$learn_layer_id != 1) {
W = loadMatrix(model_file, 1)
invisible(sapply(1:(N-2), function(id) {
layers[[1]]$weights[[id]] = W[1:length(layers[[1]]$id_conns[[id]]),id]
}
))
}
} else {
cat("Can't find file for model ", model_file, "\n")
}
layers
learn_layer(patterns, layers, run_options)
patterns = gr1$patterns
learn_layer(patterns, layers, run_options)
N
null_pattern.N = list()
for(i in 1:N) {
null_pattern.N[[i]] <- -Inf
}
learn_layer(patterns, layers, run_options)
spot
c(net, layers, sprob, spot, mean_grad) := run_srm(layers, net, run_options)
net = list()
net[id_m] = patterns[[id_patt]]$data
net[id_n] = null_pattern.N
id_patt=1
net[id_m] = patterns[[id_patt]]$data
net[id_n] = null_pattern.N
run_options$class = patterns[[id_patt]]$class
c(net, layers, sprob, spot, mean_grad) := run_srm(layers, net, run_options)
spot
run_options
run_options = list(T0 = 0, Tmax = 100, dt = 0.5, learning_rate = 0.1,
learn_window_size = 100, mode=run_mode, collect_stat=TRUE,
target_set = list(target_function_gen = random_2spikes_tf, depress_null=FALSE),
learn_layer_id = 2
)
patterns = gr1$patterns
#run_net(layers, patterns, epochs, run_options)
learn_layer(patterns, layers, run_options)
source('~/prog/alexeyche-junk/cns/R/srm/new/softmax.R', echo=TRUE)
run_options = list(T0 = 0, Tmax = 100, dt = 0.5, learning_rate = 0.05,
learn_window_size = 100, mode=run_mode, collect_stat=TRUE,
target_set = list(target_function_gen = random_2spikes_tf, depress_null=FALSE),
learn_layer_id = 2
)
patterns = gr1$patterns
#run_net(layers, patterns, epochs, run_options)
learn_layer(patterns, layers, run_options)
run_options = list(T0 = 0, Tmax = 100, dt = 0.5, learning_rate = 0.005,
learn_window_size = 100, mode=run_mode, collect_stat=TRUE,
target_set = list(target_function_gen = random_2spikes_tf, depress_null=FALSE),
learn_layer_id = 2
)
patterns = gr1$patterns
#run_net(layers, patterns, epochs, run_options)
learn_layer(patterns, layers, run_options)
run_options
layers[[2]]$weights[[1]]
layers[[2]]$weights[[1]] = rep(5, 10)
layers[[2]]$weights[[2]] = rep(5, 10)
run_mode = "learn"
run_options = list(T0 = 0, Tmax = 100, dt = 0.5, learning_rate = 0.005,
learn_window_size = 100, mode=run_mode, collect_stat=TRUE,
target_set = list(target_function_gen = random_2spikes_tf, depress_null=FALSE),
learn_layer_id = 2
)
patterns = gr1$patterns
#run_net(layers, patterns, epochs, run_options)
learn_layer(patterns, layers, run_options)
layers[[2]]
run_options = list(T0 = 0, Tmax = 100, dt = 0.5, learning_rate = 0.01,
learn_window_size = 100, mode=run_mode, collect_stat=TRUE,
target_set = list(target_function_gen = random_2spikes_tf, depress_null=FALSE),
learn_layer_id = 2
)
patterns = gr1$patterns
layers[[2]]$weights[[2]] = rep(5, 10)
layers[[2]]$weights[[1]] = rep(5, 10)
learn_layer(patterns, layers, run_options)
source('~/prog/alexeyche-junk/cns/R/srm/new/srm.R', echo=TRUE)
c(net, layers, stat, mean_grad) := run_srm(layers, net, run_options)
source('~/prog/alexeyche-junk/cns/R/srm/new/srm.R', echo=TRUE)
c(net, layers, stat, mean_grad) := run_srm(layers, net, run_options)
source('~/prog/alexeyche-junk/cns/R/srm/new/srm.R', echo=TRUE)
c(net, layers, stat, mean_grad) := run_srm(layers, net, run_options)
source('~/prog/alexeyche-junk/cns/R/srm/new/srm.R', echo=TRUE)
c(net, layers, stat, mean_grad) := run_srm(layers, net, run_options)
stat = list()
for(i in 1:length(layers)) {
stat[[i]] = list()
stat[[i]]$p = NULL
stat[[i]]$u = NULL
}
stat
source('~/prog/alexeyche-junk/cns/R/srm/new/srm.R', echo=TRUE)
stat = list()
for(i in 1:length(layers)) {
stat[[i]] = list()
stat[[i]]$p = logical(0)
stat[[i]]$u = logical(0)
}
stat
c(net, layers, stat, mean_grad) := run_srm(layers, net, run_options)
c(net, layers, stat, mean_grad) := run_srm(layers, net, run_options)
i
q
q()
source('~/prog/alexeyche-junk/cns/R/srm/new/srm.R', echo=TRUE)
c(net, layers, stat, mean_grad) := run_srm(layers, net, run_options)
sta
stat
stat[[1]]$uu
stat[[1]]$u
source('~/prog/alexeyche-junk/cns/R/srm/new/srm.R', echo=TRUE)
c(net, layers, stat, mean_grad) := run_srm(layers, net, run_options)
stat[[1]]$u
source('~/prog/alexeyche-junk/cns/R/srm/new/srm.R', echo=TRUE)
c(net, layers, stat, mean_grad) := run_srm(layers, net, run_options)
uu = neurons$u(t,net)
t
t=1
uu = neurons$u(t,net)
uu
rbind(uu, uu)
uu
t(uu)
source('~/prog/alexeyche-junk/cns/R/srm/new/srm.R', echo=TRUE)
c(net, layers, stat, mean_grad) := run_srm(layers, net, run_options)
c(net, layers, stat, mean_grad) := run_srm(layers, net, run_options)
uu
t(uu)
c(uu)
pp
source('~/prog/alexeyche-junk/cns/R/srm/new/srm.R', echo=TRUE)
c(net, layers, stat, mean_grad) := run_srm(layers, net, run_options)
stat[[1]]$u
unet = stat[[1]]$u
sapply(unet), function(u) sum(u[u<10]))
sapply(unet), function(u) sum(u[u<10])
sapply(unet, function(u) sum(u[u<10]) )
unet
dim(unet)
t(unet)
unet = t(unet)
sapply(unet, function(u) sum(u[u<10]) )
?apply
apply(unet, 2, function(u) sum(u[u<10]) )
dim)apply(unet, 2, function(u) sum(u[u<10]) ))
dim(apply(unet, 2, function(u) sum(u[u<10]) ))
apply(unet, 1, function(u) sum(u[u<10]) )
u<10
unet[1,]
