all(sapply(gr1$patterns, function(x) x$label) == 1)
sapply(gr1$patterns, function(x) x$label)
which(sapply(gr1$patterns, function(x) x$label) == 1)
which(sapply(gr1$patterns, function(x) x$label) == 2)
which(sapply(gr1$patterns, function(x) x$label) == 3)
which(sapply(gr1$patterns, function(x) x$label) == 4)
which(sapply(gr1$patterns, function(x) x$label) == 5)
which(sapply(gr1$patterns, function(x) x$label) == 6)
patterns = gr1$patterns[c(1:2,51:52)]
trials = 10
net_all = list()
u_all = list()
p_all = list()
for(id_patt in 1:length(patterns)) {
for(trial in 1:trials) {
net = list()
net[gr1$ids] = patterns[[id_patt]]$data
net[neurons$ids] = -Inf
run_options$class = patterns[[id_patt]]$class
c(net, net_neurons, stat, mean_grad) := run_srm(net_neurons, net, run_options)
net = lapply(net[neurons$ids], function(sp) sp[sp != -Inf])
glob_id = trial+(id_patt-1)*trials
net_all[[glob_id]] = list(data=net, label=patterns[[id_patt]]$label)
u_all[[glob_id]] = list(data=stat[[1]]$u, label=patterns[[id_patt]]$label)
p_all[[glob_id]] = list(data=stat[[1]]$p, label=patterns[[id_patt]]$label)
}
}
split_data <- function(data, ratio=0.15) {
N = length(data)
ind = sample(N)
spl_i = ratio*N
test_i = ind[1:spl_i]
train_i = ind[(spl_i+1):N]
return(list(data[train_i], data[test_i]))
}
id_patt=1
st_i = id_patt+(id_patt-1)*trials
fin_i = st_i + trials
st_i
fin_i
id_patt=2
st_i = id_patt+(id_patt-1)*trials
fin_i = st_i + trials -1
fin_i
st_i
(id_patt-1)*trials
st_i = (id_patt-1)*trials+1
st_i
fin_i = st_i + trials -1
fin_i
spikes_proc = list()
for(id_patt in 1:length(patterns)) {
st_i = (id_patt-1)*trials+1
fin_i = st_i + trials -1
data_proc_l = lapply(net_all[st_i:fin_i], function(n) binKernel(n$data, 0, duration, kernSize))
data_proc = array(0, dim=c(N, duration/kernSize, length(data_proc_l)))
for(i in 1:length(data_proc_l)) {
data_proc[,,i] = data_proc_l[[i]]
}
spikes_proc[[id_patt]] = apply(data_proc, c(1,2), mean)
}
spike_proc
spikes_proc
spikes_proc = list()
for(id_patt in 1:length(patterns)) {
st_i = (id_patt-1)*trials+1
fin_i = st_i + trials -1
data_proc_l = lapply(net_all[st_i:fin_i], function(n) binKernel(n$data, 0, duration, kernSize))
data_proc = array(0, dim=c(N, duration/kernSize, length(data_proc_l)))
for(i in 1:length(data_proc_l)) {
data_proc[,,i] = data_proc_l[[i]]
}
spikes_proc[[id_patt]] = list(data=apply(data_proc, c(1,2), mean), label=patterns[[id_patt]]$label)
}
spikes_proc
filled.contour(spikes_proc[[4]])
filled.contour(spikes_proc[[4]]$data)
filled.contour(spikes_proc[[3]]$data)
filled.contour(spikes_proc[[4]]$data)
filled.contour(spikes_proc[[2]]$data)
filled.contour(spikes_proc[[1]]$data)
plot_rastl(net_all[[1]]$data)
plot_rastl(net_all[[2]]$data)
plot_rastl(net_all[[11]]$data)
plot_rastl(net_all[[21]]$data)
plot_rastl(net_all[[31]]$data)
net_all[[31]]
neurons
get_weight_matrix(list(neurons))
get_weights_matrix(list(neurons))
W = get_weights_matrix(list(neurons))
p2 = levelplot(W, col.regions=colorRampPalette(c("black", "white")))
print(p2)
model_file = sprintf("%s/R/%s_%dx%d", dir, data, M, N)
model_file
W = loadMatrix(model_file, 1)
W
p2 = levelplot(W, col.regions=colorRampPalette(c("black", "white")))
print(p2)
invisible(sapply(1:N, function(id) {
id_to_conn = which(W[,id]>0)
net_neurons[[1]]$weights[[id]] = W[id_to_conn, id]
net_neurons[[1]]$id_conns[[id]] = id_to_conn
}))
net_neurons
get_weights_matrix(net_neurons)
W = get_weights_matrix(net_neurons)
p2 = levelplot(W, col.regions=colorRampPalette(c("black", "white")))
print(p2)
W = loadMatrix(model_file, 1)
W
p2 = levelplot(W, col.regions=colorRampPalette(c("black", "white")))
print(p2)
duration = 100
N = 10
start_w.M = 4 #matrix(rnorm( M*N, mean=2, sd=0.5), ncol=N, nrow=M)
start_w.N = 3 #matrix(rnorm( (N-1)*N, mean=2, sd=0.5), ncol=N, nrow=(N-1))
M = 50
dt = 0.5
gr1 = TSNeurons(M = M)
neurons = SRMLayer(N, start_w.N)
gr1$loadPatterns(train_dataset, duration, dt, lambda=8)
patt_len = length(gr1$patterns)
connection = matrix(gr1$ids, nrow=length(gr1$ids), ncol=N)
connect_window = N*2
step = M/N
overlap = 1
for(ni in 0:(N-1)) {
if(ni != 0) connection[1:((ni*step)-overlap),ni+1] = 0
if(ni != N-1) connection[((ni*step)+step+1+overlap):M,ni+1] = 0
}
neurons$connectFF(connection, start_w.M, 1:N )
neurons
ID_MAX=0
gr1 = TSNeurons(M = M)
neurons = SRMLayer(N, start_w.N)
gr1$loadPatterns(train_dataset, duration, dt, lambda=8)
patt_len = length(gr1$patterns)
connection = matrix(gr1$ids, nrow=length(gr1$ids), ncol=N)
connect_window = N*2
step = M/N
overlap = 1
for(ni in 0:(N-1)) {
if(ni != 0) connection[1:((ni*step)-overlap),ni+1] = 0
if(ni != N-1) connection[((ni*step)+step+1+overlap):M,ni+1] = 0
}
neurons$connectFF(connection, start_w.M, 1:N )
neurons
W = loadMatrix(model_file, 1)
W
max(W)
N
invisible(sapply(1:N, function(id) {
id_to_conn = which(W[,id] != 0)
neurons$weights[[id]] = W[id_to_conn, id]
neurons$id_conns[[id]] = id_to_conn
}))
neurons
net_neurons = list(neurons)
run_options = list(T0 = 0, Tmax = duration, dt = 0.5, learning_rate = 0.5,
learn_window_size = 100, mode="run", collect_stat=TRUE,
target_set = list(target_function_gen = random_2spikes_tf, depress_null=FALSE),
learn_layer_id = 1
)
patterns = gr1$patterns[c(1:2,51:52)]
trials = 10
net_all = list()
u_all = list()
p_all = list()
for(id_patt in 1:length(patterns)) {
for(trial in 1:trials) {
net = list()
net[gr1$ids] = patterns[[id_patt]]$data
net[neurons$ids] = -Inf
run_options$class = patterns[[id_patt]]$class
c(net, net_neurons, stat, mean_grad) := run_srm(net_neurons, net, run_options)
net = lapply(net[neurons$ids], function(sp) sp[sp != -Inf])
glob_id = trial+(id_patt-1)*trials
net_all[[glob_id]] = list(data=net, label=patterns[[id_patt]]$label)
u_all[[glob_id]] = list(data=stat[[1]]$u, label=patterns[[id_patt]]$label)
p_all[[glob_id]] = list(data=stat[[1]]$p, label=patterns[[id_patt]]$label)
}
}
split_data <- function(data, ratio=0.15) {
N = length(data)
ind = sample(N)
spl_i = ratio*N
test_i = ind[1:spl_i]
train_i = ind[(spl_i+1):N]
return(list(data[train_i], data[test_i]))
}
plot_rastl(net_all[[1]]$data)
plot_rastl(net_all[[2]]$data)
plot_rastl(net_all[[3]]$data)
kernSize=5
spikes_proc = list()
for(id_patt in 1:length(patterns)) {
st_i = (id_patt-1)*trials+1
fin_i = st_i + trials -1
data_proc_l = lapply(net_all[st_i:fin_i], function(n) binKernel(n$data, 0, duration, kernSize))
data_proc = array(0, dim=c(N, duration/kernSize, length(data_proc_l)))
for(i in 1:length(data_proc_l)) {
data_proc[,,i] = data_proc_l[[i]]
}
spikes_proc[[id_patt]] = list(data=apply(data_proc, c(1,2), mean), label=patterns[[id_patt]]$label)
}
spikes_proc
filled_contour(spikes_proc[[1]]$data)
filled.contour(spikes_proc[[1]]$data)
filled.contour(spikes_proc[[2]]$data)
filled.contour(spikes_proc[[3]]$data)
filled.contour(spikes_proc[[4]]$data)
filled.contour(spikes_proc[[1]]$data)
filled.contour(spikes_proc[[2]]$data)
filled.contour(spikes_proc[[3]]$data)
eucl_dist_al(spikes_proc, spikes_proc[[1]]$data)
eucl_dist_alg <- function(train, unknown_object) {
best_so_far = Inf
class = -1
for(i in 1:length(train)) {
compare_to_this = train[[i]]$data
dist = sqrt(sum( (compare_to_this-unknown_object)^2) )
if(dist < best_so_far) {
class = train[[i]]$label
best_so_far = dist
}
}
return(class)
}
eucl_dist_al(spikes_proc, spikes_proc[[1]]$data)
eucl_dist_alg <- function(train, unknown_object) {
best_so_far = Inf
class = -1
for(i in 1:length(train)) {
compare_to_this = train[[i]]$data
dist = sqrt(sum( (compare_to_this-unknown_object)^2) )
if(dist < best_so_far) {
class = train[[i]]$label
best_so_far = dist
}
}
return(class)
}
eucl_dist_alg(spikes_proc, spikes_proc[[1]]$data)
sum( (spikes_proc[[2]]$data - spikes_proc[[1]]$data)^2)
sum( (spikes_proc[[3]]$data - spikes_proc[[1]]$data)^2)
sum( (spikes_proc[[4]]$data - spikes_proc[[1]]$data)^2)
net_all[[1]]
plot_rastl(net_all[[1]])
plot_rastl(net_all[[1]]$data)
plot_rastl(net_all[[2]]$data)
plot_rastl(net_all[[11]]$data)
plot_rastl(net_all[[12]]$data)
plot_rastl(net_all[[13]]$data)
plot_rastl(net_all[[21]]$data)
plot_rastl(net_all[[22]]$data)
plot_rastl(net_all[[23]]$data)
plot_rastl(net_all[[31]]$data)
source('~/prog/alexeyche-junk/cns/R/srm/new/eval.R', echo=TRUE)
plot(patters[[1]]$data)
plot(patterns[[1]]$data)
patterns[[1]]$data
plot_rastl(patterns[[1]]$data)
plot_rastl(patterns[[2]]$data)
plot_rastl(patterns[[10]]$data)
plot_rastl(patterns[[3]]$data)
plot_rastl(patterns[[4]]$data)
plot_rastl(patterns[[5]]$data)
plot_rastl(patterns[[3]]$data)
plot_rastl(patterns[[4]]$data)
plot_rastl(net_all[[4]]$data)
plot_rastl(net_all[[1]]$data)
plot_rastl(net_all[[11]]$data)
plot_rastl(net_all[[21]]$data)
plot_rastl(net_all[[31]]$data)
plot_rastl(net_all[[41]]$data)
plot_rastl(net_all[[42]]$data)
kernSize=5
spikes_proc = list()
for(id_patt in 1:length(patterns)) {
st_i = (id_patt-1)*trials+1
fin_i = st_i + trials -1
data_proc_l = lapply(net_all[st_i:fin_i], function(n) binKernel(n$data, 0, duration, kernSize))
data_proc = array(0, dim=c(N, duration/kernSize, length(data_proc_l)))
for(i in 1:length(data_proc_l)) {
data_proc[,,i] = data_proc_l[[i]]
}
spikes_proc[[id_patt]] = list(data=apply(data_proc, c(1,2), mean), label=patterns[[id_patt]]$label)
}
spikes_proc
filled.contour(spikes_proc[[1]]$data)
filled.contour(spikes_proc[[2]]$data)
filled.contour(spikes_proc[[3]]$data)
filled.contour(spikes_proc[[4]]$data)
filled.contour(spikes_proc[[5]]$data)
filled.contour(spikes_proc[[6]]$data)
filled.contour(spikes_proc[[7]]$data)
filled.contour(spikes_proc[[8]]$data)
filled.contour(spikes_proc[[9]]$data)
source('~/prog/alexeyche-junk/cns/R/srm/new/eval.R', echo=TRUE)
net_all
spikes_proc
dist = matrix(0, nrow=length(spikes_proc), ncol=length(spikes_proc))
for(i in 1:length(spikes_proc)) {
for(j in 1:length(spikes_proc)) {
dist[i,j] =  sum((spikes_proc[[i]]$data - spikes_proc[[j]]$data)^2)
}
}
dist
View(dist)
p2 = levelplot(dist, col.regions=colorRampPalette(c("black", "white")))
print(p2)
c(train, test) := split_data(spikes_proc,0.3)
train
ucr_test(train, test, eucl_dist_alg)
gr1$loadPatterns(test_dataset, duration, dt, lambda=8)
patterns = gr1$patterns[1:length(train_dataset)] #[c(1:10,51:60, 101:110, 151:160, 201:210, 251:260)]
trials = 10
net_all = list()
u_all = list()
p_all = list()
for(id_patt in 1:length(patterns)) {
for(trial in 1:trials) {
net = list()
net[gr1$ids] = patterns[[id_patt]]$data
net[neurons$ids] = -Inf
run_options$class = patterns[[id_patt]]$class
c(net, net_neurons, stat, mean_grad) := run_srm(net_neurons, net, run_options)
net = lapply(net[neurons$ids], function(sp) sp[sp != -Inf])
glob_id = trial+(id_patt-1)*trials
net_all[[glob_id]] = list(data=net, label=patterns[[id_patt]]$label)
u_all[[glob_id]] = list(data=stat[[1]]$u, label=patterns[[id_patt]]$label)
p_all[[glob_id]] = list(data=stat[[1]]$p, label=patterns[[id_patt]]$label)
}
}
kernSize=5
spikes_proc = list()
for(id_patt in 1:length(patterns)) {
st_i = (id_patt-1)*trials+1
fin_i = st_i + trials -1
data_proc_l = lapply(net_all[st_i:fin_i], function(n) binKernel(n$data, 0, duration, kernSize))
data_proc = array(0, dim=c(N, duration/kernSize, length(data_proc_l)))
for(i in 1:length(data_proc_l)) {
data_proc[,,i] = data_proc_l[[i]]
}
spikes_proc[[id_patt]] = list(data=apply(data_proc, c(1,2), mean), label=patterns[[id_patt]]$label)
}
train_proc = spikes_proc
length(train_proc)
(1:length(train_dataset)+1):length(train_dataset)+length(test_dataset)
(1:length(train_dataset)+1):(length(train_dataset)+length(test_dataset))
(length(train_dataset)+1):(length(train_dataset)+length(test_dataset))
length(gr1$patterns)
patterns = gr1$patterns[(length(train_dataset)+1):(length(train_dataset)+length(test_dataset))] #[c(1:10,51:60, 101:110, 151:160, 201:210, 251:260)]
trials = 10
net_all = list()
u_all = list()
p_all = list()
for(id_patt in 1:length(patterns)) {
for(trial in 1:trials) {
net = list()
net[gr1$ids] = patterns[[id_patt]]$data
net[neurons$ids] = -Inf
run_options$class = patterns[[id_patt]]$class
c(net, net_neurons, stat, mean_grad) := run_srm(net_neurons, net, run_options)
net = lapply(net[neurons$ids], function(sp) sp[sp != -Inf])
glob_id = trial+(id_patt-1)*trials
net_all[[glob_id]] = list(data=net, label=patterns[[id_patt]]$label)
u_all[[glob_id]] = list(data=stat[[1]]$u, label=patterns[[id_patt]]$label)
p_all[[glob_id]] = list(data=stat[[1]]$p, label=patterns[[id_patt]]$label)
}
}
length(test_dataset)
length(train_dataset)
patterns = gr1$patterns[(length(train_dataset)+1):(length(train_dataset)+length(test_dataset))] #[c(1:10,51:60, 101:110, 151:160, 201:210, 251:260)]
trials = 10
net_all = list()
u_all = list()
p_all = list()
for(id_patt in 1:length(patterns)) {
for(trial in 1:trials) {
net = list()
net[gr1$ids] = patterns[[id_patt]]$data
net[neurons$ids] = -Inf
run_options$class = patterns[[id_patt]]$class
c(net, net_neurons, stat, mean_grad) := run_srm(net_neurons, net, run_options)
net = lapply(net[neurons$ids], function(sp) sp[sp != -Inf])
glob_id = trial+(id_patt-1)*trials
net_all[[glob_id]] = list(data=net, label=patterns[[id_patt]]$label)
u_all[[glob_id]] = list(data=stat[[1]]$u, label=patterns[[id_patt]]$label)
p_all[[glob_id]] = list(data=stat[[1]]$p, label=patterns[[id_patt]]$label)
}
}
plot_rastl(net_all[[1]]$data)
plot_rastl(net_all[[2]]$data)
plot_rastl(net_all[[51]]$data)
plot_rastl(net_all[[101]]$data)
plot_rastl(net_all[[102]]$data)
net_all[[102]]$labe
net_all[[102]]$label
sapply(net_all, function(x) x$label)
#  binKernel(net_all[[2]]$data, 0, 100, 5)
kernSize=5
spikes_proc = list()
for(id_patt in 1:length(patterns)) {
st_i = (id_patt-1)*trials+1
fin_i = st_i + trials -1
data_proc_l = lapply(net_all[st_i:fin_i], function(n) binKernel(n$data, 0, duration, kernSize))
data_proc = array(0, dim=c(N, duration/kernSize, length(data_proc_l)))
for(i in 1:length(data_proc_l)) {
data_proc[,,i] = data_proc_l[[i]]
}
spikes_proc[[id_patt]] = list(data=apply(data_proc, c(1,2), mean), label=patterns[[id_patt]]$label)
}
spikes_test = spikes_proc
spikes_test[[1]]$data
spikes_test[[1]]$label
spikes_test[[51]]$label
spikes_test[[51]]$data
ucr_test(spikes_train, spikes_test, eucl_dist_alg)
spikes_train = train_proc
ucr_test(spikes_train, spikes_test, eucl_dist_alg)
source('~/prog/alexeyche-junk/cns/R/srm/new/eval.R', echo=TRUE)
length(spikes_proc)
length(net_all)
kernSize=10
spikes_proc = list()
for(id_patt in 1:length(patterns)) {
st_i = (id_patt-1)*trials+1
fin_i = st_i + trials -1
data_proc_l = lapply(net_all[st_i:fin_i], function(n) binKernel(n$data, 0, duration, kernSize))
data_proc = array(0, dim=c(N, duration/kernSize, length(data_proc_l)))
for(i in 1:length(data_proc_l)) {
data_proc[,,i] = data_proc_l[[i]]
}
spikes_proc[[id_patt]] = list(data=apply(data_proc, c(1,2), mean), label=patterns[[id_patt]]$label)
}
ucr_test(spikes_proc[1:300], spikes_proc[301:600], eucl_dist_alg)
kernSize=15
spikes_proc = list()
for(id_patt in 1:length(patterns)) {
st_i = (id_patt-1)*trials+1
fin_i = st_i + trials -1
data_proc_l = lapply(net_all[st_i:fin_i], function(n) binKernel(n$data, 0, duration, kernSize))
data_proc = array(0, dim=c(N, duration/kernSize, length(data_proc_l)))
for(i in 1:length(data_proc_l)) {
data_proc[,,i] = data_proc_l[[i]]
}
spikes_proc[[id_patt]] = list(data=apply(data_proc, c(1,2), mean), label=patterns[[id_patt]]$label)
}
ucr_test(spikes_proc[1:300], spikes_proc[301:600], eucl_dist_alg)
kernSize=20
spikes_proc = list()
for(id_patt in 1:length(patterns)) {
st_i = (id_patt-1)*trials+1
fin_i = st_i + trials -1
data_proc_l = lapply(net_all[st_i:fin_i], function(n) binKernel(n$data, 0, duration, kernSize))
data_proc = array(0, dim=c(N, duration/kernSize, length(data_proc_l)))
for(i in 1:length(data_proc_l)) {
data_proc[,,i] = data_proc_l[[i]]
}
spikes_proc[[id_patt]] = list(data=apply(data_proc, c(1,2), mean), label=patterns[[id_patt]]$label)
}
ucr_test(spikes_proc[1:300], spikes_proc[301:600], eucl_dist_alg)
kernSize=10
spikes_proc = list()
for(id_patt in 1:length(patterns)) {
st_i = (id_patt-1)*trials+1
fin_i = st_i + trials -1
data_proc_l = lapply(net_all[st_i:fin_i], function(n) binKernel(n$data, 0, duration, kernSize))
data_proc = array(0, dim=c(N, duration/kernSize, length(data_proc_l)))
for(i in 1:length(data_proc_l)) {
data_proc[,,i] = data_proc_l[[i]]
}
spikes_proc[[id_patt]] = list(data=apply(data_proc, c(1,2), mean), label=patterns[[id_patt]]$label)
}
ucr_test(spikes_proc[1:300], spikes_proc[301:600], eucl_dist_alg)
source('~/prog/alexeyche-junk/cns/R/srm/new/eval.R', echo=TRUE)
kernSize=5
spikes_proc = list()
for(id_patt in 1:length(patterns)) {
st_i = (id_patt-1)*trials+1
fin_i = st_i + trials -1
data_proc_l = lapply(net_all[st_i:fin_i], function(n) binKernel(n$data, 0, duration, kernSize))
data_proc = array(0, dim=c(N, duration/kernSize, length(data_proc_l)))
for(i in 1:length(data_proc_l)) {
data_proc[,,i] = data_proc_l[[i]]
}
spikes_proc[[id_patt]] = list(data=apply(data_proc, c(1,2), mean), label=patterns[[id_patt]]$label)
}
ucr_test(spikes_proc[1:300], spikes_proc[301:600], eucl_dist_alg)
source('~/prog/alexeyche-junk/cns/R/srm/new/eval.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/eval.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/eval.R', echo=TRUE)
length(net_all)
2400/300
2400/600
trail
trial
trial=5
net = list()
net[gr1$ids] = patterns[[id_patt]]$data
net[neurons$ids] = -Inf
run_options$class = patterns[[id_patt]]$class
c(net, net_neurons, stat, mean_grad) := run_srm(net_neurons, net, run_options)
net = lapply(net[neurons$ids], function(sp) sp[sp != -Inf])
glob_id = trial+(id_patt-1)*trials
net_all[[glob_id]] = list(data=net, label=patterns[[id_patt]]$label)
u_all[[glob_id]] = list(data=stat[[1]]$u, label=patterns[[id_patt]]$label)
p_all[[glob_id]] = list(data=stat[[1]]$p, label=patterns[[id_patt]]$label)
source('~/prog/alexeyche-junk/cns/R/srm/new/eval.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/new/eval.R', echo=TRUE)
