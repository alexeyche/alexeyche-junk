y = p_all[,11]
y <- decodeClassLabels(y)
set <- splitForTrainingAndTest(x, y, ratio=0.15)
mod_rbf = rbf(set$inputsTrain, y$targetsTrain, size=15, maxit=100)
y$targetsTrain
mod_rbf = rbf(set$inputsTrain, set$targetsTrain, size=15, maxit=100)
summary(mod_rbf)
weightMatrix(mod_rbf)
filled.contour(weightMatrix(mod_rbf))
x
source('~/my/git/alexeyche-junk/cns/R/srm/new/eval.R', echo=TRUE)
weightMatrix(mod_rbf)
filled.contour(weightMatrix(mod_rbf))
mod_rbf = rbf(set$inputsTrain, set$targetsTrain, size=15, maxit=1000)
filled.contour(weightMatrix(mod_rbf))
mod_rbf = rbf(set$inputsTrain, set$targetsTrain, size=10, maxit=100)
filled.contour(weightMatrix(mod_rbf))
mod_rbf = rbf(set$inputsTrain, set$targetsTrain, size=5, maxit=100)
filled.contour(weightMatrix(mod_rbf))
mod_rbf = rbf(set$inputsTrain, set$targetsTrain, size=40, maxit=100)
filled.contour(weightMatrix(mod_rbf))
extractNetInfo(mod_rbf)
plotIterativeError(mod_rbf)
predictions = predict(mod_rbf, set$inputsTest)
predictions
length(p_all)
nrow(p_all)
sample(4020)
?sample
source('~/my/git/alexeyche-junk/cns/R/srm/new/eval.R', echo=TRUE)
pw = p_all[sample(m),]
x = 1-exp(-pw[,1:10])
y = pw[,11]
y <- decodeClassLabels(y)
set <- splitForTrainingAndTest(x, y, ratio=0.15)
mod_rbf = rbf(set$inputsTrain, set$targetsTrain, size=40, maxit=100)
filled.contour(weightMatrix(mod_rbf))
predictions = predict(mod_rbf, set$inputsTest)
predictions
plotRegressionError(predictions[,2], set$targetsTest[,2])
?plotRegressionError
confusionMatrix(set$targetsTrain,fitted.values(model))
set$targetsTrain
confusionMatrix(set$targetsTrain,fitted.values(mod_rbf))
fitted.values(mod_rbf)
confusionMatrix(set$targetsTest,predictions)
plotROC(fitted.values(model)[,2], set$targetsTrain[,2])
plotROC(fitted.values(mod_rbf)[,2], set$targetsTrain[,2])
plotROC(predictions[,2], set$targetsTest[,2])
d = plotROC(predictions[,2], set$targetsTest[,2])
d
source('~/my/git/alexeyche-junk/cns/R/srm/new/eval.R', echo=TRUE)
plotROC(fitted.values(mod_rbf)[,2], set$targetsTrain[,2])
mod_rbf = rbf(set$inputsTrain, set$targetsTrain, size=40, maxit=100, initFuncParams=c(-4,4, 0, 0.02, 0.04))
filled.contour(weightMatrix(mod_rbf))
mod_rbf = rbf(set$inputsTrain, set$targetsTrain, size=10, maxit=100, initFuncParams=c(-4,4, 0, 0.02, 0.04))
filled.contour(weightMatrix(mod_rbf))
plotROC(fitted.values(mod_rbf)[,2], set$targetsTrain[,2])
plotROC(predictions[,2], set$targetsTest[,2])
u_all
uw = u_all[sample(m),]
x = normalizeData(uw, "0_1")
x
uw = u_all[sample(m),]
x = normalizeData(uw, "0_1")
y = uw[,11]
y <- decodeClassLabels(y)
set <- splitForTrainingAndTest(x, y, ratio=0.15)
mod_rbf = rbf(set$inputsTrain, set$targetsTrain, size=10, maxit=100, initFuncParams=c(-4,4, 0, 0.02, 0.04))
filled.contour(weightMatrix(mod_rbf))
predictions = predict(mod_rbf, set$inputsTest)
plotRegressionError(predictions[,2], set$targetsTest[,2])
confusionMatrix(set$targetsTrain,fitted.values(mod_rbf))
confusionMatrix(set$targetsTest,predictions)
plotROC(fitted.values(mod_rbf)[,2], set$targetsTrain[,2])
plotROC(predictions[,2], set$targetsTest[,2])
plotROC(fitted.values(mod_rbf)[,2], set$targetsTrain[,2])
plotROC(predictions[,2], set$targetsTest[,2])
filled.contour(weightMatrix(mod_rbf))
confusionMatrix(set$targetsTest,predictions)
confusionMatrix(set$targetsTrain,fitted.values(mod_rbf))
plotRegressionError(predictions[,2], set$targetsTest[,2])
uw = u_all[sample(m),1:10]
x = normalizeData(uw, "0_1")
y = uw[,11]
uw = u_all[sample(m),]
y = uw[,11]
uw = uw[,1:10]
x = normalizeData(uw, "0_1")
y <- decodeClassLabels(y)
set <- splitForTrainingAndTest(x, y, ratio=0.15)
mod_rbf = rbf(set$inputsTrain, set$targetsTrain, size=10, maxit=100, initFuncParams=c(-4,4, 0, 0.02, 0.04))
filled.contour(weightMatrix(mod_rbf))
predictions = predict(mod_rbf, set$inputsTest)
plotRegressionError(predictions[,2], set$targetsTest[,2])
predictions[,2]
set$targetsTest[,2]
confusionMatrix(set$targetsTrain,fitted.values(mod_rbf))
confusionMatrix(set$targetsTest,predictions)
plotROC(fitted.values(mod_rbf)[,2], set$targetsTrain[,2])
plotROC(predictions[,2], set$targetsTest[,2])
plotRegressionError(predictions[,2], set$targetsTest[,2])
?mlp
mod = mlp(set$inputsTrain, set$targetsTrain)
filled.contour(weightMatrix(mod))
predictions = predict(mod, set$inputsTest)
plotRegressionError(predictions[,2], set$targetsTest[,2])
confusionMatrix(set$targetsTrain,fitted.values(mod))
confusionMatrix(set$targetsTest,predictions)
plotROC(fitted.values(mod)[,2], set$targetsTrain[,2])
plotROC(predictions[,2], set$targetsTest[,2])
source('~/my/git/alexeyche-junk/cns/R/srm/new/eval.R', echo=TRUE)
plotROC(fitted.values(mod)[,2], set$targetsTrain[,2])
if(source_data == "prob") {
m = nrow(p_all)
pw = p_all[sample(m),]
#x = 1-exp(-pw[,1:10])
x = pw[,1:10]
y = pw[,11]
} else
if(source_data == "pot") {
uw = u_all[sample(m),]
y = uw[,11]
x = normalizeData(uw[,1:10], "0_1")
}
y <- decodeClassLabels(y)
set <- splitForTrainingAndTest(x, y, ratio=0.15)
#mod_rbf = rbf(set$inputsTrain, set$targetsTrain, size=10, maxit=100, initFuncParams=c(-4,4, 0, 0.02, 0.04))
mod = mlp(set$inputsTrain, set$targetsTrain)
filled.contour(weightMatrix(mod))
plotRegressionError(predictions[,2], set$targetsTest[,2])
predictions = predict(mod, set$inputsTest)
plotRegressionError(predictions[,2], set$targetsTest[,2])
y <- decodeClassLabels(y)
set <- splitForTrainingAndTest(x, y, ratio=0.15)
#mod_rbf = rbf(set$inputsTrain, set$targetsTrain, size=10, maxit=100, initFuncParams=c(-4,4, 0, 0.02, 0.04))
mod = mlp(set$inputsTrain, set$targetsTrain, size=10)
filled.contour(weightMatrix(mod))
predictions = predict(mod, set$inputsTest)
plotRegressionError(predictions[,2], set$targetsTest[,2])
confusionMatrix(set$targetsTrain,fitted.values(mod))
confusionMatrix(set$targetsTest,predictions)
plotROC(fitted.values(mod)[,2], set$targetsTrain[,2])
plotROC(predictions[,2], set$targetsTest[,2])
plotROC(fitted.values(mod)[,2], set$targetsTrain[,2])
source('~/my/git/alexeyche-junk/cns/R/srm/new/eval.R', echo=TRUE)
plotROC(fitted.values(mod)[,2], set$targetsTrain[,2])
plotIterativeError(mod)
mod = mlp(set$inputsTrain, set$targetsTrain, size=10, maxit=1000)
plotIterativeError(mod)
filled.contour(weightMatrix(mod))
predictions = predict(mod, set$inputsTest)
plotRegressionError(predictions[,2], set$targetsTest[,2])
confusionMatrix(set$targetsTrain,fitted.values(mod))
confusionMatrix(set$targetsTest,predictions)
plotROC(fitted.values(mod)[,2], set$targetsTrain[,2])
mod = mlp(set$inputsTrain, set$targetsTrain, size=10, maxit=2000)
plotIterativeError(mod)
filled.contour(weightMatrix(mod))
setwd("~/my/git/alexeyche-junk/cns/R/srm/new")
plotROC(fitted.values(mod)[,2], set$targetsTrain[,2])
plotROC(predictions[,2], set$targetsTest[,2])
mod = mlp(set$inputsTrain, set$targetsTrain, size=10, maxit=1500)
plotIterativeError(mod)
plotROC(fitted.values(mod)[,2], set$targetsTrain[,2])
plotROC(predictions[,2], set$targetsTest[,2])
mod = mlp(set$inputsTrain, set$targetsTrain, size=10, maxit=500)
plotIterativeError(mod)
plotROC(fitted.values(mod)[,2], set$targetsTrain[,2])
plotROC(predictions[,2], set$targetsTest[,2])
filled.contour(weightMatrix(mod))
mod = mlp(set$inputsTrain, set$targetsTrain, size=20, maxit=500)
plotIterativeError(mod)
filled.contour(weightMatrix(mod))
plotROC(fitted.values(mod)[,2], set$targetsTrain[,2])
plotROC(predictions[,2], set$targetsTest[,2])
mod = mlp(set$inputsTrain, set$targetsTrain, size=5, maxit=500)
plotIterativeError(mod)
plotROC(fitted.values(mod)[,2], set$targetsTrain[,2])
plotROC(predictions[,2], set$targetsTest[,2])
mod2 = dlvq(set$inputsTrain, set$targetsTrain)
inputColumns
dataset <- snnsData$dlvq_ziff_100.pat
require(snnsData)
inputColumns(set$inputsTrain)
install.packages('snnsData')
mod2 = rbfDDA(set$inputsTrain, set$targetsTrain)
mod = mod2
plotIterativeError(mod)
filled.contour(weightMatrix(mod))
predictions = predict(mod, set$inputsTest)
plotRegressionError(predictions[,2], set$targetsTest[,2])
source('~/my/git/alexeyche-junk/cns/R/srm/new/eval.R', echo=TRUE)
predictions = predict(mod, set$inputsTest)
plotRegressionError(predictions[,2], set$targetsTest[,2])
confusionMatrix(set$targetsTrain,fitted.values(mod))
confusionMatrix(set$targetsTest,predictions)
plotROC(fitted.values(mod)[,2], set$targetsTrain[,2])
plotROC(predictions[,2], set$targetsTest[,2])
confusionMatrix(set$targetsTrain,fitted.values(mod))
confusionMatrix(set$targetsTest,predictions)
y <- decodeClassLabels(y)
set <- splitForTrainingAndTest(x, y, ratio=0.35)
mod = rbfDDA(set$inputsTrain, set$targetsTrain)
#mod_rbf = rbf(set$inputsTrain, set$targetsTrain, size=10, maxit=100, initFuncParams=c(-4,4, 0, 0.02, 0.04))
#mod = mlp(set$inputsTrain, set$targetsTrain, size=5, maxit=500)
plotIterativeError(mod)
filled.contour(weightMatrix(mod))
source('~/.active-rstudio-document', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/ucr_ts.R', echo=TRUE)
dir = "/home/alexeyche/my/sim"
source('~/my/git/alexeyche-junk/cns/R/srm/new/ucr_ts.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/ucr_ts.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/ucr_ts.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/ucr_ts.R', echo=TRUE)
?scan
synth_train = scan(sprintf("%s/ts/synthetic_control/synthetic_control_TRAIN",dir), sep=" ")
synth_train
dim(synth_train)
str(synth_train)
synth_train = scan(sprintf("%s/ts/synthetic_control/synthetic_control_TRAIN",dir))
synth_train
synth_train = matrix(synth_train, nrow=300, by.row=TRUE)
synth_train = matrix(synth_train, nrow=300, byrow=TRUE)
synth_train
dim(synth_train)
synth_train[1:2,]
ts_file = sprintf("%s/ts/synthetic_control/synthetic_control_TRAIN",dir)
system(sprintf("cat %s | wc -l", ts_file))
ts_file = sprintf("%s/ts/synthetic_control/synthetic_control_TRAIN",dir)
nlines = system(sprintf("cat %s | wc -l", ts_file))
synth_train = scan(ts_file)
synth_train = matrix(synth_train, nrow=nlines, byrow=TRUE)
nlines
nlines = system(sprintf("cat %s | wc -l", ts_file))
nlines = system(sprintf("cat %s | wc -l", ts_file), intern=TRUE)
nlines
nlines = as.character(system(sprintf("cat %s | wc -l", ts_file), intern=TRUE))
nlines
nlines = as.numeric(system(sprintf("cat %s | wc -l", ts_file), intern=TRUE))
nlines
source('~/my/git/alexeyche-junk/cns/R/srm/new/ucr_ts.R', echo=TRUE)
synth_train[1,]
source('~/my/git/alexeyche-junk/cns/R/srm/new/ucr_ts.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/ucr_ts.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/ucr_ts.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/ucr_ts.R', echo=TRUE)
setwd("~/my/git/alexeyche-junk/cns/R/srm/new")
source('~/my/git/alexeyche-junk/cns/R/srm/new/ucr_ts.R', echo=TRUE)
plot(synth_train[1,], type="l")
plot(synth_train[2,], type="l")
plot(synth_train[150,], type="l")
plot(synth_train[150,2:61], type="l")
plot(synth_train[,2], type="l")
plot(synth_train[,3], type="l")
source('~/my/git/alexeyche-junk/cns/R/srm/new/ucr_ts.R', echo=TRUE)
l = train(ncol)
train_labels = train[,1]
test_labels = test[,1]
train = train[,2:l]
test = test[,2:l]
train = synth_train
test = synth_test
l = ncol(train)
train_labels = train[,1]
test_labels = test[,1]
train = train[,2:l]
test = test[,2:l]
test
1 % 50
1 %% 50
source('~/my/git/alexeyche-junk/cns/R/srm/new/ucr_ts.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/ucr_ts.R', echo=TRUE)
ucr_test(train, test, eucl_dist_alg)
source('~/my/git/alexeyche-junk/cns/R/srm/new/ucr_ts.R', echo=TRUE)
ucr_test(train, test, eucl_dist_alg)
source('~/my/git/alexeyche-junk/cns/R/srm/new/ucr_ts.R', echo=TRUE)
ucr_test(train, test, eucl_dist_alg)
source('~/my/git/alexeyche-junk/cns/R/srm/new/ucr_ts.R', echo=TRUE)
ucr_test(train, test, eucl_dist_alg)
source('~/my/git/alexeyche-junk/cns/R/srm/new/ucr_ts.R', echo=TRUE)
ucr_test(train, test, eucl_dist_alg)
source('~/my/git/alexeyche-junk/cns/R/srm/new/ucr_ts.R', echo=TRUE)
ecg = "ECG200"
c(synth_train, synth_test) := read_ts_file(synth)
ucr_test(train, test, eucl_dist_alg)
ecg = "ECG200"
c(train, test) := read_ts_file(synth)
ucr_test(train, test, eucl_dist_alg)
ecg = "ECG200"
c(train, test) := read_ts_file(ecg)
ucr_test(train, test, eucl_dist_alg)
dim(train)
ts_name = "ECG200"
ts_file_train = sprintf("%s/ts/%s/%s_TRAIN",dir, ts_name, ts_name)
ts_file_test = sprintf("%s/ts/%s/%s_TEST",dir, ts_name, ts_name)
nlines_train = as.numeric(system(sprintf("cat %s | wc -l", ts_file_train), intern=TRUE))
nlines_test = as.numeric(system(sprintf("cat %s | wc -l", ts_file_test), intern=TRUE))
nlines_train
nlines_test
ts_file_train
ts_file_test
nlines_train
ts_train = scan(ts_file_train)
ts_train
?scan
source('~/my/git/alexeyche-junk/cns/R/srm/new/ucr_ts.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/ucr_ts.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/ucr_ts.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/ucr_ts.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/ucr_ts.R', echo=TRUE)
train
test
source('~/my/git/alexeyche-junk/cns/R/srm/new/ucr_ts.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/ucr_ts.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/ucr_ts.R', echo=TRUE)
length(train)
length(test)
source('~/my/git/alexeyche-junk/cns/R/srm/new/ucr_ts.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/eval.R', echo=TRUE)
u_all[[1]]
err = sqrt(sum((u_all[[1]]$data-u_all[[2]]$data)^2))
err
err = sqrt(sum((u_all[[1]]$data-u_all[[3]]$data)^2))
sqrt(sum((u_all[[1]]$data-u_all[[3]]$data)^2))
sqrt(sum((u_all[[1]]$data-u_all[[4]]$data)^2))
sqrt(sum((u_all[[1]]$data-u_all[[11]]$data)^2))
sqrt(sum((u_all[[1]]$data-u_all[[12]]$data)^2))
patterns[[id_patt]]$data
length(u_all)
length(u_all)*0.15
ind = sample(length(u_all))
spl_i = ratio*length(ind)
ratio=0.2
spl_i = ratio*length(ind)
spl_i
source('~/my/git/alexeyche-junk/cns/R/srm/new/eval.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/eval.R', echo=TRUE)
c(train, test) := split_data(u_all, ratio=0.2)
length(train)
length(ttest)
length(test)
0.2*5
0.2*6
0.2*60
ucr_test(train, test, eucl_dist_alg)
train[[1]]
train[[2]]
train[[3]]
train[[4]]
train[[5]]
train[[6]]
train[[7]]
sample(100)
c(train, test) := split_data(u_all, ratio=0.1)
ucr_test(train, test, eucl_dist_alg)
c(train, test) := split_data(p_all, ratio=0.1)
ucr_test(train, test, eucl_dist_alg)
c(train, test) := split_data(net_all, ratio=0.1)
ucr_test(train, test, eucl_dist_alg)
source('~/my/git/alexeyche-junk/cns/R/srm/new/eval.R', echo=TRUE)
ucr_test(train, test, eucl_dist_alg)
net_all[[1]]$data - net_all[[2]]$data
RSiteSearch('hidden markov model')
?rbf
require(RSNNS)
?rbf
?fft
fft(p_all[[1]]$value)
fft(p_all[[1]]$data)
mvfft(p_all[[1]]$data)
mvfft(p_all[[1]]$data)
fft(p_all[[1]]$data)
v = fft(p_all[[1]]$data)
v
dim(v)
dim(mvfft(p_all[[1]]$data))
filled.contour(v)
net_all[[1]]$data
?hist
hist(net_all[[1]]$data, plot=FALSE)
hist(net_all[[1]]$data[[1]], plot=FALSE)
net_data = net_all[[1]]$data
sapply(net_data, max)
max(sapply(net_data, max))
sapply(net_data, length)
maxl = max(sapply(net_data, length))
maxl
T0=0
Tmax=100
seq(T0, Tmax, by=10)
?hist
i=1sapply(net_data, function(sp) if(length(sp)<=i) sp[i])
i=1; sapply(net_data, function(sp) if(length(sp)<=i) sp[i])
i=1; sapply(net_data, function(sp) if(length(sp)<=i) sp[2])
i=1; sapply(net_data, function(sp) if(length(sp)<=i) sp[i])
i=2; sapply(net_data, function(sp) if(length(sp)<=i) sp[i])
i=3; sapply(net_data, function(sp) if(length(sp)<=i) sp[i])
i=3; sapply(net_data, function(sp) if(length(sp)<i) sp[i] else NULL)
net_data[[9]]
i=3; sapply(net_data, function(sp) if(length(sp)<=i) sp[i] else NULL)
net_data[[9]]
i=3; sapply(net_data, function(sp) if(length(sp)>=i) sp[i] else NULL)
i=1; sapply(net_data, function(sp) if(length(sp)>=i) sp[i] else NULL)
i=2; sapply(net_data, function(sp) if(length(sp)>=i) sp[i] else NULL)
i=3; sapply(net_data, function(sp) if(length(sp)>=i) sp[i] else NULL)
i=4; sapply(net_data, function(sp) if(length(sp)>=i) sp[i] else NULL)
i=4; sapply(net_data, function(sp) if(length(sp)>=i) sp[i] else NA)
i=4; sapply(net_data, function(sp) if(length(sp)>=i) sp[i] else NA)
i=4; v=sapply(net_data, function(sp) if(length(sp)>=i) sp[i] else NA)
v/(Tmax-T0)
v/Tmax
v/Tmax - 10
v/Tmax
(v-T0)/Tmax
((v-T0)/Tmax)*lb
lb=length(breaks)
breaks = seq(T0, Tmax, by=10)
lb=length(breaks)
((v-T0)/Tmax)*lb
floor(((v-T0)/Tmax)*lb)
ind = !is.na(floor(((v-T0)/Tmax)*lb))
ind
source('~/my/git/alexeyche-junk/cns/R/srm/new/eval.R', echo=TRUE)
pattern
gr1$patterns
gr1$patterns[[1]]
gr1$patterns[[1]]$data
gr1$patterns[[1]]$data[[1]]
gr1$patterns[[1]]$data[[1]] <- c(2,5)
source('~/my/git/alexeyche-junk/cns/R/srm/new/srm_funcs.R', echo=TRUE)
t=0
epsp(t-0)
epsp(2-0)
t = 0:30
t
epsp(t-0)
plot(epsp(t-0))
plot(epsp(t-0), type="l")
plot(epsp(t-5), type="l")
epsp(5-10)
epsp
t
epsp(t-10)
epx(-1/0.7)
exp(-1/0.7)
exp(-1/0.7) - exp(-1/10)
e0*(exp(-1/0.7) - exp(-1/10))
e0*(exp(-1/1) - exp(-1/10))
s=1
s=1-0
e0*(exp(-s/tm) - exp(-s/ts))
e0*(exp(-s/1) - exp(-s/10))
sts
ts
tm
e0*(exp(-s/tm) - exp(-s/ts))
e0*(exp(-s/10) - exp(-s/1))
g
g(-55)
g(0)
g(0)
dt = 0.5
seq(0, 100, by=dt)
t = seq(0, 100, by=dt)
for(t_el in t) { print(t_el)}
for(t_el in t) { }
dt*g(0)
1-exp(-dt*g(0))
1-exp(-dt*g(0))
dt*g(0)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
dt*g(0)> runif(1)
dt*g(-65)> runif(1)
dt*g(-65)
1-exp(-dt*g(0))> runif(1)
1-exp(-dt*g(0))> runif(1)
1-exp(-dt*g(0))> runif(1)
for(t_el in t) { print(g(-50)*dt>runif(1)) }
g(-50)
spikes=NULL; for(t_el in t) { if(g(-50)*dt>runif(1)) spikes = c(spikes, t_el) }
spieks
spikes
plot(spikes)
plot(spikes, rep(1, length(spikes)))
rep(1, 10)
spikes=NULL; for(t_el in t) { if(g(-45)*dt>runif(1)) spikes = c(spikes, t_el) }
plot(spikes, rep(1, length(spikes)))
spikes=NULL; for(t_el in t) { if(g(-55)*dt>runif(1)) spikes = c(spikes, t_el) }
plot(spikes, rep(1, length(spikes)))
spikes=NULL; for(t_el in t) { if(g(-52)*dt>runif(1)) spikes = c(spikes, t_el) }
plot(spikes, rep(1, length(spikes)))
spikes
nu
nu(5-5)
nu(5-4.5)
nu(5-6)
nu(6-6)
spikes
nu(10-spikes)
nu(17-spikes)
nu(19-spikes)
nu(25-spikes)
source('~/my/git/alexeyche-junk/cns/R/srm/new/main_ucr.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/main_ucr.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/srm.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/new/main_ucr.R', echo=TRUE)
