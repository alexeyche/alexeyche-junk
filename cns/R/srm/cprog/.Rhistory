<<<<<<< HEAD
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
load()
plot(ps_ep[,1], ps_ep[,2], type="l")
plot(ps_ep[,1], ps_ep[,2], type="l")
plot(ps_ep[,1], ps_ep[,3], type="l")
plot(ps_ep[,1], ps_ep[,2], type="l")
plot(ps_ep[,1], ps_ep[,2]*ps_ep[,3], type="l")
load()
plot(ps_ep[,1], ps_ep[,2]*ps_ep[,3], type="l")
plot(ps_ep[,1], ps_ep[,2], type="l")
plot(ps_ep[,1], ps_ep[,3], type="l")
load()
plot(ps_ep[,1], ps_ep[,3], type="l")
plot(ps_ep[,1], ps_ep[,2], type="l")
p_stroke <- function(u) {
beta/(1+exp(alpha*(tr-u)))
}
uu <- seq(-70,-40,by=0.1)
plot(uu, p_stroke(uu),type="l")
# stochastic threshold g(u):
alpha <- 0.45
beta <- 0.35
tr <- -50 # mV
g <- Vectorize(function(u) {
(beta/alpha)*(log(1+exp(alpha*(tr-u))) -alpha*(tr-u))
})
p_stroke <- function(u) {
beta/(1+exp(alpha*(tr-u)))
}
uu <- seq(-70,-40,by=0.1)
plot(uu, p_stroke(uu),type="l")
# stochastic threshold g(u):
alpha <- 0.45
beta <- 0.55
tr <- -50 # mV
g <- Vectorize(function(u) {
(beta/alpha)*(log(1+exp(alpha*(tr-u))) -alpha*(tr-u))
})
p_stroke <- function(u) {
beta/(1+exp(alpha*(tr-u)))
}
uu <- seq(-70,-40,by=0.1)
plot(uu, p_stroke(uu),type="l")
# stochastic threshold g(u):
alpha <- 0.45
beta <- 0.55
tr <- -50 # mV
g <- Vectorize(function(u) {
(beta/alpha)*(log(1+exp(alpha*(tr-u))) -alpha*(tr-u))
})
p_stroke <- function(u) {
beta/(1+exp(alpha*(tr-u)))
}
uu <- seq(-70,-40,by=0.1)
plot(uu, p_stroke(uu),type="l")
us<-seq(-70, -25, by=0.1)
plot(us, g(us),type="l")
# stochastic threshold g(u):
alpha <- 0.45
beta <- 0.95
tr <- -50 # mV
g <- Vectorize(function(u) {
(beta/alpha)*(log(1+exp(alpha*(tr-u))) -alpha*(tr-u))
})
p_stroke <- function(u) {
beta/(1+exp(alpha*(tr-u)))
}
uu <- seq(-70,-40,by=0.1)
plot(uu, p_stroke(uu),type="l")
us<-seq(-70, -25, by=0.1)
plot(us, g(us),type="l")
# stochastic threshold g(u):
alpha <- 0.45
beta <- 0.55
tr <- -50 # mV
g <- Vectorize(function(u) {
(beta/alpha)*(log(1+exp(alpha*(tr-u))) -alpha*(tr-u))
})
p_stroke <- function(u) {
beta/(1+exp(alpha*(tr-u)))
}
uu <- seq(-70,-40,by=0.1)
plot(uu, p_stroke(uu),type="l")
us<-seq(-70, -25, by=0.1)
plot(us, g(us),type="l")
alpha <- 0.45
beta <- 0.55
tr <- -50 # mV
g <- Vectorize(function(u) {
(beta/alpha)*(log(1+exp(alpha*(tr-u))) -alpha*(tr-u))
})
p_stroke <- function(u) {
beta/(1+exp(alpha*(tr-u)))
}
uu <- seq(-70,-40,by=0.1)
plot(uu, p_stroke(uu),type="l")
# stochastic threshold g(u):
alpha <- 0.45
beta <- 0.95
tr <- -50 # mV
g <- Vectorize(function(u) {
(beta/alpha)*(log(1+exp(alpha*(tr-u))) -alpha*(tr-u))
})
p_stroke <- function(u) {
beta/(1+exp(alpha*(tr-u)))
}
uu <- seq(-70,-40,by=0.1)
plot(uu, p_stroke(uu),type="l")
# stochastic threshold g(u):
alpha <- 0.45
beta <- 0.45
tr <- -50 # mV
g <- Vectorize(function(u) {
(beta/alpha)*(log(1+exp(alpha*(tr-u))) -alpha*(tr-u))
})
p_stroke <- function(u) {
beta/(1+exp(alpha*(tr-u)))
}
uu <- seq(-70,-40,by=0.1)
plot(uu, p_stroke(uu),type="l")
# stochastic threshold g(u):
alpha <- 0.15
beta <- 0.45
tr <- -50 # mV
g <- Vectorize(function(u) {
(beta/alpha)*(log(1+exp(alpha*(tr-u))) -alpha*(tr-u))
})
p_stroke <- function(u) {
beta/(1+exp(alpha*(tr-u)))
}
uu <- seq(-70,-40,by=0.1)
plot(uu, p_stroke(uu),type="l")
# stochastic threshold g(u):
alpha <- 0.85
beta <- 0.45
tr <- -50 # mV
g <- Vectorize(function(u) {
(beta/alpha)*(log(1+exp(alpha*(tr-u))) -alpha*(tr-u))
})
p_stroke <- function(u) {
beta/(1+exp(alpha*(tr-u)))
}
uu <- seq(-70,-40,by=0.1)
plot(uu, p_stroke(uu),type="l")
# stochastic threshold g(u):
alpha <- 2
beta <- 0.45
tr <- -50 # mV
g <- Vectorize(function(u) {
(beta/alpha)*(log(1+exp(alpha*(tr-u))) -alpha*(tr-u))
})
p_stroke <- function(u) {
beta/(1+exp(alpha*(tr-u)))
}
uu <- seq(-70,-40,by=0.1)
plot(uu, p_stroke(uu),type="l")
# stochastic threshold g(u):
alpha <- 2
beta <- 0.45
tr <- -50 # mV
g <- Vectorize(function(u) {
(beta/alpha)*(log(1+exp(alpha*(tr-u))) -alpha*(tr-u))
})
p_stroke <- function(u) {
beta/(1+exp(alpha*(tr-u)))
}
uu <- seq(-70,-40,by=0.1)
plot(uu, p_stroke(uu),type="l")
us<-seq(-70, -25, by=0.1)
plot(us, g(us),type="l")
# stochastic threshold g(u):
alpha <- 0.5
beta <- 0.45
tr <- -50 # mV
g <- Vectorize(function(u) {
(beta/alpha)*(log(1+exp(alpha*(tr-u))) -alpha*(tr-u))
})
p_stroke <- function(u) {
beta/(1+exp(alpha*(tr-u)))
}
uu <- seq(-70,-40,by=0.1)
plot(uu, p_stroke(uu),type="l")
us<-seq(-70, -25, by=0.1)
plot(us, g(us),type="l")
# stochastic threshold g(u):
alpha <- 0.5
beta <- 0.45
tr <- -50 # mV
g <- Vectorize(function(u) {
(beta/alpha)*(log(1+exp(alpha*(tr-u))) -alpha*(tr-u))
})
p_stroke <- function(u) {
beta/(1+exp(alpha*(tr-u)))
}
uu <- seq(-70,-40,by=0.1)
plot(uu, p_stroke(uu),type="l")
# stochastic threshold g(u):
alpha <- 0.5
beta <- 0.65
tr <- -50 # mV
g <- Vectorize(function(u) {
(beta/alpha)*(log(1+exp(alpha*(tr-u))) -alpha*(tr-u))
})
p_stroke <- function(u) {
beta/(1+exp(alpha*(tr-u)))
}
uu <- seq(-70,-40,by=0.1)
plot(uu, p_stroke(uu),type="l")
us<-seq(-70, -25, by=0.1)
plot(us, g(us),type="l")
load()
plot(ps_ep[,1], ps_ep[,3], type="l")
plot(ps_ep[,1], ps_ep[,2], type="l")
load()
plot(ps_ep[,1], ps_ep[,2], type="l")
plot(ps_ep[,1], ps_ep[,2], type="l")
load()
plot(ps_ep[,1], ps_ep[,2], type="l")
plot(ps_ep[,1], ps_ep[,3], type="l")
load()
plot(ps_ep[,1], ps_ep[,3], type="l")
plot(ps_ep[,1], ps_ep[,2], type="l")
plot(ps_ep[,1], ps_ep[,3], type="l")
load()
plot(ps_ep[,1], ps_ep[,3], type="l")
load()
plot(ps_ep[,1], ps_ep[,3], type="l")
plot(ps_ep[,1], ps_ep[,2], type="l")
plot(ps_ep[,1], ps_ep[,3], type="l")
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
filled.contour(weights)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
load()
filled.contour(weights)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/serv.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
plot_rast(rast_last)
plot_rast <- function(raster) {
x <- c()
y <- c()
for(i in 1:nrow(raster)) {
spikes <- which(raster[i,]>0)
x <- c(x, raster[i,spikes])
y <- c(y, rep(i, length(spikes)))
}
plot(x,y)
}
plot_rast(rast_last)
rast_last <- get(l[[sl[length(sl)] ]])
plot_rast(rast_last)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
load()
filled.contour(weights)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
load()
filled.contour(weights)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/tsne_stuff.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/tsne_stuff.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/tsne_stuff.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/tsne_stuff.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
load()
filled.contour(weights)
load()
filled.contour(weights)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/tsne_stuff.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/tsne_stuff.R', echo=TRUE)
length(m)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/tsne_stuff.R', echo=TRUE)
length(m)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/tsne_stuff.R', echo=TRUE)
length(m)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/tsne_stuff.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/tsne_stuff.R', echo=TRUE)
length(m)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/tsne_stuff.R', echo=TRUE)
length(m)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/tsne_stuff.R', echo=TRUE)
plot_rast <- function(raster, newplot=TRUE, c=1) {
x <- c()
y <- c()
for(i in 1:nrow(raster)) {
spikes <- which(raster[i,]>0)
x <- c(x, raster[i,spikes])
y <- c(y, rep(i, length(spikes)))
}
if(newplot) {
plot(x,y,col=c)
} else {
lines(x,y,col=c)
}
}
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/tsne_stuff.R', echo=TRUE)
plot_rast <- function(raster, newplot=TRUE, c=1) {
x <- c()
y <- c()
for(i in 1:nrow(raster)) {
spikes <- which(raster[i,]>0)
x <- c(x, raster[i,spikes])
y <- c(y, rep(i, length(spikes)))
}
if(newplot) {
plot(x,y,col=c)
} else {
points(x,y,col=c)
}
}
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/tsne_stuff.R', echo=TRUE)
allm <- NULL
newp=TRUE
par(mfrow=c(1,3))
for(j in 1:3) {
for(i in 1:10) {
for(ep in 0:9) {
m <- read.table(paste("/var/tmp/d",j,"_",i,"_ep_",ep,"_resp.csv",sep=""), sep=",")
plot_rast(m, newp,j)
if(newp) { newp=FALSE }
# m<-unlist(m)
# m <- c(m, rep(0, max_length-length(m)))
# allm <- rbind(allm, m)
}
}
newp=TRUE
}
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/gen_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/serv.R', echo=TRUE)
load()
filled.contour(weights)
load()
load()
require(stringr)
l <- list()
for(i in ls()) {
m <- str_match(i, "raster([0-9]+)")
if(!is.na(m[2])) {
l[[m[2]]] <- i
}
}
rast_last <- get(l[[sl[length(sl)] ]])
sl <- sort(names(l))
rast_last <- get(l[[sl[length(sl)] ]])
plot_rast(rast_last)
plot_rast <- function(raster, newplot=TRUE, c=1) {
x <- c()
y <- c()
for(i in 1:nrow(raster)) {
spikes <- which(raster[i,]>0)
x <- c(x, raster[i,spikes])
y <- c(y, rep(i, length(spikes)))
}
if(newplot) {
plot(x,y,col=c)
} else {
points(x,y,col=c)
}
}
plot_rast(rast_last)
load()
load()
require(stringr)
l <- list()
for(i in ls()) {
m <- str_match(i, "raster([0-9]+)")
if(!is.na(m[2])) {
l[[m[2]]] <- i
}
}
sl <- sort(names(l))
rast_last <- get(l[[sl[length(sl)] ]])
plot_rast(rast_last)
filled.contour(weights)
load()
filled.contour(weights)
load()
filled.contour(weights)
load()
filled.contour(weights)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
gen_ou <- function() {
set.seed(8)
d1 <- ornstein_uhlenbeck(10,999, 0.2, 1, 0.007, 0.15)
d2 <- ornstein_uhlenbeck(10,999, 0.19, 0.5, 0.01, 0.15)
d3 <- ornstein_uhlenbeck(10,999, 0.15, 0.5, 0.01, 0.21)
write.table(d1, "/home/alexeyche/my/sim/stimuli/d1.csv", sep=",", col.names=F, row.names=F)
write.table(d2, "/home/alexeyche/my/sim/stimuli/d2.csv", sep=",", col.names=F, row.names=F)
write.table(d3, "/home/alexeyche/my/sim/stimuli/d3.csv", sep=",", col.names=F, row.names=F)
for(i in 1:10) {
set.seed(i+10)
d1c <- ornstein_uhlenbeck(10,999, 0.2, 1, 0.007, 0.15)
d2c <- ornstein_uhlenbeck(10,999, 0.19, 0.5, 0.01, 0.15)
d3c <- ornstein_uhlenbeck(10,999, 0.15, 0.5, 0.01, 0.21)
write.table(d1c, paste("/home/alexeyche/my/sim/stimuli/d1_",i,".csv",sep=""), sep=",", col.names=F, row.names=F)
write.table(d2c, paste("/home/alexeyche/my/sim/stimuli/d2_",i,".csv",sep=""), sep=",", col.names=F, row.names=F)
write.table(d3c, paste("/home/alexeyche/my/sim/stimuli/d3_",i,".csv",sep=""), sep=",", col.names=F, row.names=F)
}
plot(d1, type="l", col="blue")
lines(d2, col="red")
lines(d3, col="green")
}
seq(1:50)
plot(seq(1:50))
seq(50,1)
gen_sd <- function() {
sd1 <- seq(1, 50)
sd2 <- seq(50, 1)
write.table(sd1, "/home/alexeyche/my/sim/stimuli/sd1.csv", sep=",", col.names=F, row.names=F)
write.table(sd2, "/home/alexeyche/my/sim/stimuli/sd2.csv", sep=",", col.names=F, row.names=F)
}
gen_sd()
load()
filled.contour(weights)
load()
filled.contour(weights)
load()
filled.contour(weights)
load()
filled.contour(weights)
load()
filled.contour(weights)
load()
filled.contour(weights)
load()
plot_rast(raster1388407401)
load()
gr_stat_pot0
plot(gr_stat_pot0[1,])
plot(gr_stat_pot0[2,])
load()
plot(gr_stat_pot0[2,])
plot(gr_stat_pot0[1,])
load()
plot(gr_stat_prob0[1,])
plot(gr_stat_prob0[2,])
plot(gr_stat_pot0[1,])
plot(gr_stat_pot0[1,1:100])
plot(gr_stat_pot0[1,900:1000])
load()
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
plot_rast(rast_last)
source('~/my/git/alexeyche-junk/cns/cpp/test_scripts/main.R', echo=TRUE)
gen_sd <- function() {
sd1 <- seq(1, 10)
sd2 <- seq(10, 1)
write.table(sd1, "/home/alexeyche/my/sim/stimuli/sd1.csv", sep=",", col.names=F, row.names=F)
write.table(sd2, "/home/alexeyche/my/sim/stimuli/sd2.csv", sep=",", col.names=F, row.names=F)
}
gen_sd()
us<-seq(-70, -25, by=0.1)
plot(us, g(us),type="l")
# stochastic threshold g(u):
beta <- 2
alpha <- 2
tr <- -50 # mV
g <- Vectorize(function(u) {
(beta/alpha)*(log(1+exp(alpha*(tr-u))) -alpha*(tr-u))
})
plot(us, g(us),type="l")
# stochastic threshold g(u):
beta <- 0.65
alpha <- 0.65
tr <- -50 # mV
g <- Vectorize(function(u) {
(beta/alpha)*(log(1+exp(alpha*(tr-u))) -alpha*(tr-u))
})
plot(us, g(us),type="l")
beta <- 100
alpha <- 100
tr <- -50 # mV
g <- Vectorize(function(u) {
(beta/alpha)*(log(1+exp(alpha*(tr-u))) -alpha*(tr-u))
})
plot(us, g(us),type="l")
beta <- 100
alpha <- 1
tr <- -50 # mV
g <- Vectorize(function(u) {
(beta/alpha)*(log(1+exp(alpha*(tr-u))) -alpha*(tr-u))
})
plot(us, g(us),type="l")
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
=======
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/gen_ucr_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/gen_ucr_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/gen_ucr_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
library(snn)
setwd("~/prog/alexeyche-junk/cns/R/srm/cprog")
source('../ucr_ts.R')
source('../interpolate_ts.R')
data_dir = '~/prog/sim'
samples_per_class = 50
samples_from_dataset = 1000
#sample_size = 1024
sample_size = 1024
selected_classes = c(1,2,3)
#data = synth # synthetic control
data = starlight_curves
train_fname = sprintf("%s/ts/%s/%s_TRAIN_%s", data_dir,data,data,sample_size)
test_fname = sprintf("%s/ts/%s/%s_TEST_%s", data_dir,data,data,sample_size)
if(!file.exists(sprintf("%s.bin", train_fname))) {
c(train_dataset, test_dataset) := read_ts_file(data, NA, data_dir)
train_dataset_inter = matrix(0, length(train_dataset), sample_size+1)
test_dataset_inter = matrix(0, length(test_dataset), sample_size+1)
train_dataset_inter_bin = list()
test_dataset_inter_bin = list()
for(i in 1:length(train_dataset)) {
inter_ts = interpolate_ts(train_dataset[[i]]$data, sample_size)
train_dataset_inter[i, ] = c(train_dataset[[i]]$label,inter_ts)
train_dataset_inter_bin[[i]] = matrix(inter_ts, nrow=1, ncol=length(inter_ts))
}
for(i in 1:length(test_dataset)) {
inter_ts = interpolate_ts(test_dataset[[i]]$data, sample_size)
test_dataset_inter[i, ] = c(test_dataset[[i]]$label,inter_ts)
test_dataset_inter_bin[[i]] = matrix(inter_ts, nrow=1, ncol=length(inter_ts))
}
#write.table(train_dataset_inter,file=fname,sep=" ", col.names = F, row.names = F, append=F)
saveMatrixList(train_fname, train_dataset_inter_bin)
saveMatrixList(sprintf("%s_labels", train_fname), list(matrix(sapply(train_dataset, function(x) x$label))) )
#write.table(test_dataset_inter,file=fname,sep=" ", col.names = F, row.names = F)
saveMatrixList(test_fname, test_dataset_inter_bin)
saveMatrixList(sprintf("%s_labels", test_fname), list(matrix(sapply(test_dataset, function(x) x$label))) )
}
train_dataset = list()
test_dataset = list()
train_labels = c(loadMatrix(sprintf("%s_labels", train_fname),1))
for(i in 1:length(train_labels)) {
train_dataset[[i]] = list(data=loadMatrix(train_fname, i), label=train_labels[i])
}
test_labels = c(loadMatrix(sprintf("%s_labels", test_fname),1))
for(i in 1:length(test_labels)) {
test_dataset[[i]] = list(data=loadMatrix(test_fname, i), label=test_labels[i])
}
source('../gen_spikes.R')
patterns = list()
dt=1
duration=1024
M=100
for(ds in train_dataset) {
p = genSpikePattern(M, ds$data, duration, dt, lambda=25)
p = lapply(p, function(sp) sp)
patterns[[length(patterns)+1]] = list(data=p, label=ds$label)
}
test_patterns = list()
it=0
for(ds in test_dataset) {
p = genSpikePattern(M, ds$data, duration, dt, lambda=25)
p = lapply(p, function(sp) sp)
test_patterns[[length(test_patterns)+1]] = list(data=p, label=ds$label)
cat("iter number: ", it, "\n")
it=it+1
}
duration=1024
gap=0
spikes_dir = "~/prog/sim/spikes/ucr"
for(ep in 1:10) {
ntrain = NetClass(patterns[sample(length(patterns), length(patterns))], duration, gap=gap)
saveMatrixList(sprintf("%s/%s_train_spikes",spikes_dir,ep), list(list_to_matrix(ntrain$net),
as.matrix(ntrain$timeline),
as.matrix(ntrain$labels)))
}
ntest = NetClass(test_patterns[sample(length(test_patterns), length(test_patterns))], duration, gap=gap)
saveMatrixList(sprintf("%s/test_spikes",spikes_dir), list(list_to_matrix(ntest$net),
as.matrix(ntest$timeline),
as.matrix(ntest$labels)))
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
train_dataset = list()
test_dataset = list()
train_labels = c(loadMatrix(sprintf("%s_labels", train_fname),1))
for(i in 1:length(train_labels)) {
train_dataset[[i]] = list(data=loadMatrix(train_fname, i), label=train_labels[i])
if(i>150) break
}
test_labels = c(loadMatrix(sprintf("%s_labels", test_fname),1))
for(i in 1:length(test_labels)) {
test_dataset[[i]] = list(data=loadMatrix(test_fname, i), label=test_labels[i])
if(i>150) break
}
# fiter=0
# for(fname in c(train_fname, test_fname)) {
#     data_labels = c(loadMatrix(sprintf("%s_labels", fname), 1))
#     iter=1
#     data_selected = list()
#     data_labels_selected = c()
#     for(cl in selected_classes) {
#         for(i in 1:samples_from_dataset) {
#             m = loadMatrix(fname, (cl-1)*samples_per_class+i)
#             data_selected[[ length(data_selected)+1 ]] = m
#             data_labels_selected = c(data_labels_selected, data_labels[ (cl-1)*samples_per_class+i ])
#             if(fiter==0) {
#                 train_dataset[[iter]] = list(data=m, label=data_labels[ (cl-1)*samples_per_class+i ])
#             } else {
#                 test_dataset[[iter]] = list(data=m, label=data_labels[ (cl-1)*samples_per_class+i ])
#             }
#             iter=iter+1
#         }
#     }
#     saveMatrixList(sprintf("%s_sel", fname), data_selected)
#     saveMatrixList(sprintf("%s_sel_labels", fname), list(matrix(data_labels_selected)))
#     fiter=fiter+1
# }
source('../gen_spikes.R')
patterns = list()
dt=1
duration=1024
M=100
for(ds in train_dataset) {
p = genSpikePattern(M, ds$data, duration, dt, lambda=25)
p = lapply(p, function(sp) sp)
patterns[[length(patterns)+1]] = list(data=p, label=ds$label)
}
test_patterns = list()
it=0
for(ds in test_dataset) {
p = genSpikePattern(M, ds$data, duration, dt, lambda=25)
p = lapply(p, function(sp) sp)
test_patterns[[length(test_patterns)+1]] = list(data=p, label=ds$label)
cat("iter number: ", it, "\n")
it=it+1
}
duration=1024
gap=0
spikes_dir = "~/prog/sim/spikes/ucr"
for(ep in 1:10) {
ntrain = NetClass(patterns[sample(length(patterns), length(patterns))], duration, gap=gap)
saveMatrixList(sprintf("%s/%s_train_spikes",spikes_dir,ep), list(list_to_matrix(ntrain$net),
as.matrix(ntrain$timeline),
as.matrix(ntrain$labels)))
}
ntest = NetClass(test_patterns[sample(length(test_patterns), length(test_patterns))], duration, gap=gap)
saveMatrixList(sprintf("%s/test_spikes",spikes_dir), list(list_to_matrix(ntest$net),
as.matrix(ntest$timeline),
as.matrix(ntest$labels)))
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/gen_ucr_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
library(snn)
setwd("~/prog/alexeyche-junk/cns/R/srm/cprog")
source('../ucr_ts.R')
source('../interpolate_ts.R')
data_dir = '~/prog/sim'
samples_per_class = 50
samples_from_dataset = 1000
sample_size = 60
#sample_size = 1024
selected_classes = c(1,2,3)
data = synth # synthetic control
#data = starlight_curves
train_fname = sprintf("%s/ts/%s/%s_TRAIN_%s", data_dir,data,data,sample_size)
test_fname = sprintf("%s/ts/%s/%s_TEST_%s", data_dir,data,data,sample_size)
if(!file.exists(sprintf("%s.bin", train_fname))) {
c(train_dataset, test_dataset) := read_ts_file(data, NA, data_dir)
train_dataset_inter = matrix(0, length(train_dataset), sample_size+1)
test_dataset_inter = matrix(0, length(test_dataset), sample_size+1)
train_dataset_inter_bin = list()
test_dataset_inter_bin = list()
for(i in 1:length(train_dataset)) {
inter_ts = interpolate_ts(train_dataset[[i]]$data, sample_size)
train_dataset_inter[i, ] = c(train_dataset[[i]]$label,inter_ts)
train_dataset_inter_bin[[i]] = matrix(inter_ts, nrow=1, ncol=length(inter_ts))
}
for(i in 1:length(test_dataset)) {
inter_ts = interpolate_ts(test_dataset[[i]]$data, sample_size)
test_dataset_inter[i, ] = c(test_dataset[[i]]$label,inter_ts)
test_dataset_inter_bin[[i]] = matrix(inter_ts, nrow=1, ncol=length(inter_ts))
}
#write.table(train_dataset_inter,file=fname,sep=" ", col.names = F, row.names = F, append=F)
saveMatrixList(train_fname, train_dataset_inter_bin)
saveMatrixList(sprintf("%s_labels", train_fname), list(matrix(sapply(train_dataset, function(x) x$label))) )
#write.table(test_dataset_inter,file=fname,sep=" ", col.names = F, row.names = F)
saveMatrixList(test_fname, test_dataset_inter_bin)
saveMatrixList(sprintf("%s_labels", test_fname), list(matrix(sapply(test_dataset, function(x) x$label))) )
}
library(snn)
setwd("~/prog/alexeyche-junk/cns/R/srm/cprog")
source('../ucr_ts.R')
source('../interpolate_ts.R')
data_dir = '~/prog/sim'
samples_per_class = 50
samples_from_dataset = 10
sample_size = 60
#sample_size = 1024
selected_classes = c(1,2,3,4)
data = synth # synthetic control
#data = starlight_curves
train_dataset = list()
test_dataset = list()
# train_labels = c(loadMatrix(sprintf("%s_labels", train_fname),1))
# for(i in 1:length(train_labels)) {
#     train_dataset[[i]] = list(data=loadMatrix(train_fname, i), label=train_labels[i])
#     if(i>100) break
# }
# test_labels = c(loadMatrix(sprintf("%s_labels", test_fname),1))
# for(i in 1:length(test_labels)) {
#     test_dataset[[i]] = list(data=loadMatrix(test_fname, i), label=test_labels[i])
#     if(i>100) break
# }
fiter=0
for(fname in c(train_fname, test_fname)) {
data_labels = c(loadMatrix(sprintf("%s_labels", fname), 1))
iter=1
data_selected = list()
data_labels_selected = c()
for(cl in selected_classes) {
for(i in 1:samples_from_dataset) {
m = loadMatrix(fname, (cl-1)*samples_per_class+i)
data_selected[[ length(data_selected)+1 ]] = m
data_labels_selected = c(data_labels_selected, data_labels[ (cl-1)*samples_per_class+i ])
if(fiter==0) {
train_dataset[[iter]] = list(data=m, label=data_labels[ (cl-1)*samples_per_class+i ])
} else {
test_dataset[[iter]] = list(data=m, label=data_labels[ (cl-1)*samples_per_class+i ])
}
iter=iter+1
}
}
saveMatrixList(sprintf("%s_sel", fname), data_selected)
saveMatrixList(sprintf("%s_sel_labels", fname), list(matrix(data_labels_selected)))
fiter=fiter+1
}
source('../gen_spikes.R')
patterns = list()
dt=1
duration=60
M=100
for(ds in train_dataset) {
p = genSpikePattern(M, ds$data, duration, dt, lambda=25)
p = lapply(p, function(sp) sp*10)
patterns[[length(patterns)+1]] = list(data=p, label=ds$label)
}
test_patterns = list()
it=0
for(ds in test_dataset) {
p = genSpikePattern(M, ds$data, duration, dt, lambda=25)
p = lapply(p, function(sp) sp*10)
test_patterns[[length(test_patterns)+1]] = list(data=p, label=ds$label)
cat("iter number: ", it, "\n")
it=it+1
}
duration=60*10
gap=0
spikes_dir = "~/prog/sim/spikes/ucr"
for(ep in 1:10) {
ntrain = NetClass(patterns[sample(length(patterns), length(patterns))], duration, gap=gap)
saveMatrixList(sprintf("%s/%s_train_spikes",spikes_dir,ep), list(list_to_matrix(ntrain$net),
as.matrix(ntrain$timeline),
as.matrix(ntrain$labels)))
}
ntest = NetClass(test_patterns[sample(length(test_patterns), length(test_patterns))], duration, gap=gap)
saveMatrixList(sprintf("%s/test_spikes",spikes_dir), list(list_to_matrix(ntest$net),
as.matrix(ntest$timeline),
as.matrix(ntest$labels)))
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/gen_ucr_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/gen_ucr_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/gen_test_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/gen_test_data.R', echo=TRUE)
plot_rastl(patterns[[1]]$data)
p1 = gen_pattern(fun1, patt_dur, N)
plot_rastl(p1)
gen_pattern = function(f, dur, N, len=1000, del=75) {
net=blank_net(N)
for(t in seq(0,dur,length.out=len)) {
i = as.integer(99*(1+f(t/del))/2)+1
net[[i]] = c(net[[i]], t)
}
return(net)
}
fun1 = function(x) {
return(cos(x))
}
fun2 = function(x) {
return(-cos(x))
}
patt_dur = 5000
p1 = gen_pattern(fun1, patt_dur, N)
plot_rastl(p1)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/gen_test_data.R', echo=TRUE)
plot_rastl(p1)
gen_pattern = function(f, dur, N, len=1000, del=10) {
net=blank_net(N)
for(t in seq(0,dur,length.out=len)) {
i = as.integer(99*(1+f(t/del))/2)+1
net[[i]] = c(net[[i]], t)
}
return(net)
}
p1 = gen_pattern(fun1, patt_dur, N)
plot_rastl(p1)
gen_pattern = function(f, dur, N, len=1000, del=50) {
net=blank_net(N)
for(t in seq(0,dur,length.out=len)) {
i = as.integer(99*(1+f(t/del))/2)+1
net[[i]] = c(net[[i]], t)
}
return(net)
}
p1 = gen_pattern(fun1, patt_dur, N)
plot_rastl(p1)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/gen_data.R', echo=TRUE)
gen_ou()
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/gen_data.R', echo=TRUE)
gen_ou()
path + "/ou_test/d1.csv"
source('~/prog/alexeyche-junk/cns/R/srm/gen_data.R', echo=TRUE)
gen_ou()
source('~/prog/alexeyche-junk/cns/R/srm/gen_data.R', echo=TRUE)
gen_ou()
d1
d1 <- ornstein_uhlenbeck(10,999, 0.2, 1, 0.007, 0.15)
d1
length(d1)
d1 <- ornstein_uhlenbeck(10,5000, 0.2, 1, 0.007, 0.15)
d1
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
sqrt(0.1/0.5)
0.1/0.5
exp(0.1/0.5)
nlm
?nlm
source('~/prog/alexeyche-junk/cns/R/srm/cprog/gen_ucr_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
plot_rastl(patterns[[1]]$data)
plot_rastl(patterns[[2]]$data)
p = genSpikePattern(M, ds$data, duration/2, dt, lambda=25)
p
plot_rastl(p)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/gen_ucr_data.R', echo=TRUE)
duration/2
dt
p = genSpikePattern(M, ds$data, duration, dt, lambda=25)
p = lapply(p, function(sp) sp*1)
plot_rastl(p)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/gen_ucr_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/gen_ucr_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
ep
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/eval_model.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/eval_model.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/eval_model.R', echo=TRUE)
rates
gr_pl(rates)
min(rates)
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
Nids
source('~/prog/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
>>>>>>> 42993710894bc2e5bea949dfdc32ab2951a8b0a3
