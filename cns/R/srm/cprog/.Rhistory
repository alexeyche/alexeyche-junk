train_resp = decomposePatterns(train_net[Nids], timeline, labels)
test_resp = decomposePatterns(test_net[Nids], test_timeline, test_labels)
plot_rastl(test_resp[[1]]$data)
plot_rastl(test_resp[[21]]$data)
plot_rastl(test_resp[[22]]$data)
plot_rastl(test_resp[[32]]$data)
plot_rastl(test_resp[[42]]$data)
plot_rastl(test_resp[[2]]$data)
plot_rastl(test_resp[[3]]$data)
tr
tr = tresholds[tr_i]
tr
tr_i
tr_i=9
tr = tresholds[tr_i]
tr
tr = tresholds[tr_i]
kernel_sigma = sigmas[sigma_i]
output_file = sprintf("%s/%s_output_spikes", evalepdir, tr_i)
test_output_file = sprintf("%s/%s_test_output_spikes", evalepdir, tr_i)
kernel_options = list(T0=0,Tmax=duration, quad=256, sigma=kernel_sigma, tR=1)
train_net = getSpikesFromMatrix(loadMatrix(output_file,1))
test_net = getSpikesFromMatrix(loadMatrix(test_output_file,1))
train_resp = decomposePatterns(train_net[Nids], timeline, labels)
test_resp = decomposePatterns(test_net[Nids], test_timeline, test_labels)
plot_rastl(test_resp[[3]]$data)
plot_rastl(test_resp[[4]]$data)
plot_rastl(test_resp[[24]]$data)
plot_rastl(test_resp[[25]]$data)
plot_rastl(test_resp[[45]]$data)
plot_rastl(test_resp[[46]]$data)
tresholds = seq(-65, -40, by=2.5)
sigmas = seq(0.1,10, length.out=10)
#tresholds = c(-60)
#sigmas = c(1)
rates = matrix(0, nrow=length(tresholds), ncol=length(sigmas))
for(tr_i in 1:length(tresholds)) {
tr = tresholds[tr_i]
run_const_ini = sprintf("%s/constants.ini.%s", evalepdir, tr_i)
system( sprintf("cp %s %s", const_ini, run_const_ini))
patch_const(run_const_ini, "tr", tr)
patch_const(run_const_ini, "determ", "true")
patch_const(run_const_ini, "learn", "false")
output_file = sprintf("%s/%s_output_spikes", evalepdir, tr_i)
test_output_file = sprintf("%s/%s_test_output_spikes", evalepdir, tr_i)
system(    sprintf("%s -c %s -i %s.bin -o %s.bin -l no -ml %s.bin",
srm_sim_exec,
run_const_ini,
input_file,
output_file,
model_file)
)
system(    sprintf("%s -c %s -i %s.bin -o %s.bin -l no -ml %s.bin",
srm_sim_exec,
run_const_ini,
test_input_file,
test_output_file,
model_file)
)
}
tresholds
length(tresholds)
tr_i=11
tr = tresholds[tr_i]
kernel_sigma = sigmas[sigma_i]
output_file = sprintf("%s/%s_output_spikes", evalepdir, tr_i)
test_output_file = sprintf("%s/%s_test_output_spikes", evalepdir, tr_i)
kernel_options = list(T0=0,Tmax=duration, quad=256, sigma=kernel_sigma, tR=1)
train_net = getSpikesFromMatrix(loadMatrix(output_file,1))
test_net = getSpikesFromMatrix(loadMatrix(test_output_file,1))
train_resp = decomposePatterns(train_net[Nids], timeline, labels)
test_resp = decomposePatterns(test_net[Nids], test_timeline, test_labels)
plos_rastl(test_resp[[1]]$data)
plot_rastl(test_resp[[1]]$data)
plot_rastl(test_resp[[2]]$data)
plot_rastl(test_resp[[3]]$data)
plot_rastl(test_resp[[23]]$data)
plot_rastl(test_resp[[25]]$data)
plot_rastl(test_resp[[45]]$data)
c(r, confm_data) := ucr_test(train_resp, test_resp, cross_corr_alg, FALSE)
r
tr_i=10
tr = tresholds[tr_i]
tr
kernel_simga
sigma_i
sigmas
sigma_i
sigma_i=3
tr_i=11
tr = tresholds[tr_i]
kernel_sigma = sigmas[sigma_i]
output_file = sprintf("%s/%s_output_spikes", evalepdir, tr_i)
test_output_file = sprintf("%s/%s_test_output_spikes", evalepdir, tr_i)
kernel_options = list(T0=0,Tmax=duration, quad=256, sigma=kernel_sigma, tR=1)
train_net = getSpikesFromMatrix(loadMatrix(output_file,1))
test_net = getSpikesFromMatrix(loadMatrix(test_output_file,1))
train_resp = decomposePatterns(train_net[Nids], timeline, labels)
test_resp = decomposePatterns(test_net[Nids], test_timeline, test_labels)
c(r, confm_data) := ucr_test(train_resp, test_resp, cross_corr_alg, FALSE)
r
sigma
kernel_sigma
tr
tr_i=10
tr = tresholds[tr_i]
tr
kernel_sigma = sigmas[sigma_i]
output_file = sprintf("%s/%s_output_spikes", evalepdir, tr_i)
test_output_file = sprintf("%s/%s_test_output_spikes", evalepdir, tr_i)
kernel_options = list(T0=0,Tmax=duration, quad=256, sigma=kernel_sigma, tR=1)
train_net = getSpikesFromMatrix(loadMatrix(output_file,1))
test_net = getSpikesFromMatrix(loadMatrix(test_output_file,1))
train_resp = decomposePatterns(train_net[Nids], timeline, labels)
test_resp = decomposePatterns(test_net[Nids], test_timeline, test_labels)
c(r, confm_data) := ucr_test(train_resp, test_resp, cross_corr_alg, FALSE)
r
for(sigma_i in 1:length(sigmas)) {
tr = tresholds[tr_i]
kernel_sigma = sigmas[sigma_i]
output_file = sprintf("%s/%s_output_spikes", evalepdir, tr_i)
test_output_file = sprintf("%s/%s_test_output_spikes", evalepdir, tr_i)
kernel_options = list(T0=0,Tmax=duration, quad=256, sigma=kernel_sigma, tR=1)
train_net = getSpikesFromMatrix(loadMatrix(output_file,1))
test_net = getSpikesFromMatrix(loadMatrix(test_output_file,1))
train_resp = decomposePatterns(train_net[Nids], timeline, labels)
test_resp = decomposePatterns(test_net[Nids], test_timeline, test_labels)
c(r, confm_data) := ucr_test(train_resp, test_resp, cross_corr_alg, FALSE)
rates[tr_i, sigma_i] = r
cat("tr: ", tr, "sigma: ", kernel_sigma, " rate: ", r, "\n")
}
sigmas = seq(5,30, length.out=10)
for(sigma_i in 1:length(sigmas)) {
tr = tresholds[tr_i]
kernel_sigma = sigmas[sigma_i]
output_file = sprintf("%s/%s_output_spikes", evalepdir, tr_i)
test_output_file = sprintf("%s/%s_test_output_spikes", evalepdir, tr_i)
kernel_options = list(T0=0,Tmax=duration, quad=256, sigma=kernel_sigma, tR=1)
train_net = getSpikesFromMatrix(loadMatrix(output_file,1))
test_net = getSpikesFromMatrix(loadMatrix(test_output_file,1))
train_resp = decomposePatterns(train_net[Nids], timeline, labels)
test_resp = decomposePatterns(test_net[Nids], test_timeline, test_labels)
c(r, confm_data) := ucr_test(train_resp, test_resp, cross_corr_alg, FALSE)
rates[tr_i, sigma_i] = r
cat("tr: ", tr, "sigma: ", kernel_sigma, " rate: ", r, "\n")
}
tr_i
tr_i=9
for(sigma_i in 1:length(sigmas)) {
tr = tresholds[tr_i]
kernel_sigma = sigmas[sigma_i]
output_file = sprintf("%s/%s_output_spikes", evalepdir, tr_i)
test_output_file = sprintf("%s/%s_test_output_spikes", evalepdir, tr_i)
kernel_options = list(T0=0,Tmax=duration, quad=256, sigma=kernel_sigma, tR=1)
train_net = getSpikesFromMatrix(loadMatrix(output_file,1))
test_net = getSpikesFromMatrix(loadMatrix(test_output_file,1))
train_resp = decomposePatterns(train_net[Nids], timeline, labels)
test_resp = decomposePatterns(test_net[Nids], test_timeline, test_labels)
c(r, confm_data) := ucr_test(train_resp, test_resp, cross_corr_alg, FALSE)
rates[tr_i, sigma_i] = r
cat("tr: ", tr, "sigma: ", kernel_sigma, " rate: ", r, "\n")
}
sigmas = seq(0.1,10, length.out=10)
for(sigma_i in 1:length(sigmas)) {
tr = tresholds[tr_i]
kernel_sigma = sigmas[sigma_i]
output_file = sprintf("%s/%s_output_spikes", evalepdir, tr_i)
test_output_file = sprintf("%s/%s_test_output_spikes", evalepdir, tr_i)
kernel_options = list(T0=0,Tmax=duration, quad=256, sigma=kernel_sigma, tR=1)
train_net = getSpikesFromMatrix(loadMatrix(output_file,1))
test_net = getSpikesFromMatrix(loadMatrix(test_output_file,1))
train_resp = decomposePatterns(train_net[Nids], timeline, labels)
test_resp = decomposePatterns(test_net[Nids], test_timeline, test_labels)
c(r, confm_data) := ucr_test(train_resp, test_resp, cross_corr_alg, FALSE)
rates[tr_i, sigma_i] = r
cat("tr: ", tr, "sigma: ", kernel_sigma, " rate: ", r, "\n")
}
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
#setwd("~/prog/alexeyche-junk/cns/R/srm/cprog")
setwd("~/my/git/alexeyche-junk/cns/R/srm/cprog")
library(snn)
source('../eval_funcs.R')
source('../ucr_ts.R')
source('../plot_funcs.R')
#ucr_spikes_dir = "/home/alexeyche/prog/sim/ucr_spikes"
ucr_spikes_dir = "/home/alexeyche/my/sim/ucr_spikes"
#gitdir = "/home/alexeyche/prog/alexeyche-junk"
gitdir = "/home/alexeyche/my/git/alexeyche-junk"
#rundir = "/home/alexeyche/prog/sim/runs"
rundir = "/home/alexeyche/my/sim/runs"
#runname="test_run"
#runname = "n50_no_conn"
#runname = "n50_conn_3"
runname = "n100_exp"
ep = 150
srm_sim_exec = sprintf("%s/cns/c/bin/srm_sim", gitdir)
workdir = sprintf("%s/%s", rundir, runname)
const_ini = sprintf("%s/constants.ini", workdir)
M = as.integer(get_const("M"))
N = as.integer(get_const("N"))
Mids=1:M
Nids=(M+1):(M+N)
input_file = sprintf("%s/train/1_ucr_20elems_3classes_1000dur", ucr_spikes_dir)
timeline = c(loadMatrix(input_file,2))
labels = c(loadMatrix(input_file,3))
test_input_file =  sprintf("%s/test/ucr_20elems_3classes_1000dur", ucr_spikes_dir)
test_timeline = c(loadMatrix(test_input_file,2))
test_labels = c(loadMatrix(test_input_file,3))
duration = timeline[2]-timeline[1]
evaldir = sprintf("%s/eval", workdir)
dir.create(file.path(evaldir), showWarnings = FALSE)
evalepdir = sprintf("%s/%s", evaldir, ep)
dir.create(file.path(evalepdir), showWarnings = FALSE)
model_file = sprintf("%s/%s_model", workdir, ep)
################
tresholds = seq(-65, -40, by=2.5)
sigmas = seq(0.1,10, length.out=10)
#tresholds = c(-60)
#sigmas = c(1)
rates = matrix(0, nrow=length(tresholds), ncol=length(sigmas))
for(tr_i in 1:length(tresholds)) {
tr = tresholds[tr_i]
run_const_ini = sprintf("%s/constants.ini.%s", evalepdir, tr_i)
system( sprintf("cp %s %s", const_ini, run_const_ini))
patch_const(run_const_ini, "tr", tr)
patch_const(run_const_ini, "determ", "true")
patch_const(run_const_ini, "learn", "false")
output_file = sprintf("%s/%s_output_spikes", evalepdir, tr_i)
test_output_file = sprintf("%s/%s_test_output_spikes", evalepdir, tr_i)
system(    sprintf("%s -c %s -i %s.bin -o %s.bin -l no -ml %s.bin",
srm_sim_exec,
run_const_ini,
input_file,
output_file,
model_file)
)
system(    sprintf("%s -c %s -i %s.bin -o %s.bin -l no -ml %s.bin",
srm_sim_exec,
run_const_ini,
test_input_file,
test_output_file,
model_file)
)
}
tr_i=10
tresholds
tr = tresholds[tr_i]
kernel_sigma = sigmas[sigma_i]
output_file = sprintf("%s/%s_output_spikes", evalepdir, tr_i)
test_output_file = sprintf("%s/%s_test_output_spikes", evalepdir, tr_i)
kernel_options = list(T0=0,Tmax=duration, quad=256, sigma=kernel_sigma, tR=1)
train_net = getSpikesFromMatrix(loadMatrix(output_file,1))
test_net = getSpikesFromMatrix(loadMatrix(test_output_file,1))
train_resp = decomposePatterns(train_net[Nids], timeline, labels)
test_resp = decomposePatterns(test_net[Nids], test_timeline, test_labels)
plot_rastl(test_resp[[1]]$data)
plot_rastl(test_resp[[21]]$data)
plot_rastl(test_resp[[41]]$data)
plot_rastl(test_resp[[11]]$data)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
ep
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
W
hist(W)
hist(W[W != 0.0 ])
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
gr_pl(t(Wacc[[1]]))
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
W
View(W)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
#setwd("~/prog/alexeyche-junk/cns/R/srm/cprog")
setwd("~/my/git/alexeyche-junk/cns/R/srm/cprog")
library(snn)
source('../eval_funcs.R')
source('../ucr_ts.R')
source('../plot_funcs.R')
#ucr_spikes_dir = "/home/alexeyche/prog/sim/ucr_spikes"
ucr_spikes_dir = "/home/alexeyche/my/sim/ucr_spikes"
#gitdir = "/home/alexeyche/prog/alexeyche-junk"
gitdir = "/home/alexeyche/my/git/alexeyche-junk"
#rundir = "/home/alexeyche/prog/sim/runs"
rundir = "/home/alexeyche/my/sim/runs"
#runname="test_run"
#runname = "n50_no_conn"
#runname = "n50_conn_3"
runname = "n100_exp"
ep = 150
srm_sim_exec = sprintf("%s/cns/c/bin/srm_sim", gitdir)
workdir = sprintf("%s/%s", rundir, runname)
const_ini = sprintf("%s/constants.ini", workdir)
M = as.integer(get_const("M"))
N = as.integer(get_const("N"))
Mids=1:M
Nids=(M+1):(M+N)
input_file = sprintf("%s/train/1_ucr_20elems_3classes_1000dur", ucr_spikes_dir)
timeline = c(loadMatrix(input_file,2))
labels = c(loadMatrix(input_file,3))
test_input_file =  sprintf("%s/test/ucr_20elems_3classes_1000dur", ucr_spikes_dir)
test_timeline = c(loadMatrix(test_input_file,2))
test_labels = c(loadMatrix(test_input_file,3))
duration = timeline[2]-timeline[1]
evaldir = sprintf("%s/eval", workdir)
dir.create(file.path(evaldir), showWarnings = FALSE)
evalepdir = sprintf("%s/%s", evaldir, ep)
dir.create(file.path(evalepdir), showWarnings = FALSE)
model_file = sprintf("%s/%s_model", workdir, ep)
################
tresholds = seq(-65, -40, by=2.5)
sigmas = seq(0.1,10, length.out=10)
#tresholds = c(-60)
#sigmas = c(1)
rates = matrix(0, nrow=length(tresholds), ncol=length(sigmas))
for(tr_i in 1:length(tresholds)) {
tr = tresholds[tr_i]
run_const_ini = sprintf("%s/constants.ini.%s", evalepdir, tr_i)
system( sprintf("cp %s %s", const_ini, run_const_ini))
patch_const(run_const_ini, "tr", tr)
patch_const(run_const_ini, "determ", "true")
patch_const(run_const_ini, "learn", "false")
output_file = sprintf("%s/%s_output_spikes", evalepdir, tr_i)
test_output_file = sprintf("%s/%s_test_output_spikes", evalepdir, tr_i)
system(    sprintf("%s -c %s -i %s.bin -o %s.bin -l no -ml %s.bin",
srm_sim_exec,
run_const_ini,
input_file,
output_file,
model_file)
)
system(    sprintf("%s -c %s -i %s.bin -o %s.bin -l no -ml %s.bin",
srm_sim_exec,
run_const_ini,
test_input_file,
test_output_file,
model_file)
)
}
tr_i=10
tresholds
length(tresholds)
tr = tresholds[tr_i]
kernel_sigma = sigmas[sigma_i]
output_file = sprintf("%s/%s_output_spikes", evalepdir, tr_i)
test_output_file = sprintf("%s/%s_test_output_spikes", evalepdir, tr_i)
kernel_options = list(T0=0,Tmax=duration, quad=256, sigma=kernel_sigma, tR=1)
train_net = getSpikesFromMatrix(loadMatrix(output_file,1))
test_net = getSpikesFromMatrix(loadMatrix(test_output_file,1))
train_resp = decomposePatterns(train_net[Nids], timeline, labels)
test_resp = decomposePatterns(test_net[Nids], test_timeline, test_labels)
plot_rastl(test_resp[[1]]$data)
plot_rastl(test_resp[[2]]$data)
plot_rastl(test_resp[[21]]$data)
plot_rastl(test_resp[[21]]$data)
plot_rastl(test_resp[[31]]$data)
plot_rastl(test_resp[[41]]$data)
plot_rastl(test_resp[[42]]$data)
plot_rastl(test_resp[[43]]$data)
c(r, confm_data) := ucr_test(train_resp, test_resp, cross_corr_alg, FALSE)
r
kernel_sigma
sigmas
for(sigma_i in 1:length(sigmas)) {
tr = tresholds[tr_i]
kernel_sigma = sigmas[sigma_i]
output_file = sprintf("%s/%s_output_spikes", evalepdir, tr_i)
test_output_file = sprintf("%s/%s_test_output_spikes", evalepdir, tr_i)
kernel_options = list(T0=0,Tmax=duration, quad=256, sigma=kernel_sigma, tR=1)
train_net = getSpikesFromMatrix(loadMatrix(output_file,1))
test_net = getSpikesFromMatrix(loadMatrix(test_output_file,1))
train_resp = decomposePatterns(train_net[Nids], timeline, labels)
test_resp = decomposePatterns(test_net[Nids], test_timeline, test_labels)
c(r, confm_data) := ucr_test(train_resp, test_resp, cross_corr_alg, FALSE)
rates[tr_i, sigma_i] = r
cat("tr: ", tr, "sigma: ", kernel_sigma, " rate: ", r, "\n")
}
for(tr_i in 1:length(tresholds)) {
for(sigma_i in 1:length(sigmas)) {
tr = tresholds[tr_i]
kernel_sigma = sigmas[sigma_i]
output_file = sprintf("%s/%s_output_spikes", evalepdir, tr_i)
test_output_file = sprintf("%s/%s_test_output_spikes", evalepdir, tr_i)
kernel_options = list(T0=0,Tmax=duration, quad=256, sigma=kernel_sigma, tR=1)
train_net = getSpikesFromMatrix(loadMatrix(output_file,1))
test_net = getSpikesFromMatrix(loadMatrix(test_output_file,1))
train_resp = decomposePatterns(train_net[Nids], timeline, labels)
test_resp = decomposePatterns(test_net[Nids], test_timeline, test_labels)
c(r, confm_data) := ucr_test(train_resp, test_resp, cross_corr_alg, FALSE)
rates[tr_i, sigma_i] = r
cat("tr: ", tr, "sigma: ", kernel_sigma, " rate: ", r, "\n")
}
}
saveMatrixList(sprintf("%s/eval_output", evalepdir) ,
list(rates, matrix(tresholds), matrix(sigmas)) )
gr_pl(t(rates))
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/gen_ucr_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/gen_ucr_data.R', echo=TRUE)
source('~/my/git/alexeyche-junk/cns/R/srm/cprog/get_data.R', echo=TRUE)
