?rbinom
melt
??melt
ggplot2
require(ggplot2)
install.packages('ggplot2')
install.packages('reshape')
melt
require(reshape)
melt(c(c(1,1,1),c(1,1,1),c(1,1,1)))
melt(matrix(rep(c(1,1,1),3), nrow=3))
require(tsne)
??tsne
require(tsne)
tsne
?tsne
?rainbow
rmultinom(10, size = 12, prob = c(0.1,0.2,0.8))
rmultinom(10, size = 100, prob = c(0.1,0.2,0.8))
rmultinom(10, size = 100, prob = c(0.333,0.333,0.333))
rmultinom(11, size = 100, prob = c(0.333,0.333,0.333))
?rmultimnom
?rmultinom
rmultinom(10, size = 100, prob = c(0.333,0.333,0.333))
rmultinom(10, size = 100, prob = c(0.1,0.1,0.8))
rmultinom(10, size = 100, prob = c(0.1,0.1,0.1))
rmultinom(10, size = 100, prob = c(0.1,0.1,0.8))
rmultinom(10, size = 100, prob = c(0.1,0.1,0.1))
rmultinom(1, size = 100, prob = c(0.1,0.1,0.1))
rmultinom(1, size = 100, prob = c(0.1,0.1,0.1))
#!/usr/bin/RScript
source('sys.R')
source('makebatches.R')
source('dbn_util.R')
sigmoid <- function(x) {
1/(1+exp(-x))
}
sample_bernoulli <- function(probs) {
dims <- dim(probs)
matrix(rbinom(prod(dims),size=1,prob=c(probs)),dims[1],dims[2])
}
free_energy <- function(data,model) {
v <- data[,,1]
m <- nrow(v)
bistar <- array(0, dim=c(m,model$num_vis))
bjstar <- array(0, dim=c(m,model$num_hid))
for (t in 1:model$n_delay) {
bistar = bistar + data[,,t+1] %*% model$W_uv[,,t]
bjstar = bjstar + data[,,t+1] %*% model$W_uh[,,t]
}
- (v+bistar) %*% t(model$vis_bias) - sum.col(log(1+exp(v %*% model$W + rep.row(model$hid_bias,m) + bjstar )) )
}
prop_up <- function(v,u, model) {
sigmoid( v %*% model$W + u %*% model$W_uh + rep.row(model$hid_bias, nrow(v)) )
}
prop_down <- function(h,u,model) {
sigmoid( h %*% t(model$W) + u %*% model$W_uv + rep.row(model$vis_bias, nrow(h)) )
}
gibbs_hvh <- function(hid_probs,u,model) {
hid_states <- sample_bernoulli(hid_probs)
vis_probs <- prop_down(hid_states,u, model)
vis_states <- sample_bernoulli(vis_probs)
hid_probs <- prop_up(vis_states,u, model)
list(vis_states = vis_states, vis_probs = vis_probs, hid_probs = hid_probs)
}
contrastive_divergence <- function(hid_probs, u, model, iter = 1) {
for(it in 1:iter) {
# col for each hidden unit, row for each case
c(vis_states, vis_probs, hid_probs) := gibbs_hvh(hid_probs,u, model)
}
return(list(vis_states.end = vis_states, vis_probs.end = vis_probs, hid_probs.end = hid_probs))
}
cross_entropy_cost <- function(input,fantasy) {
mean(sum.row(input*log(fantasy)+(1-input)*log(1-fantasy)))
}
bias_cond <- function(u,model) {
b_v <- model$vis_bias + u %*% model$W_uv
b_h <- model$hid_bias + u %*% model$W_uh
return(list(b_v, b_h))
}
prediction <- function(data, model) {
m <- 30
v <- matrix(data[4,], nrow=1)
for(i in (model$n_delay+1):m) {
d <- array(0, dim=c(1, model$num_vis,model$n_delay+1))
for(t in 1:model$n_delay) {
d[,,t+1] <- data[i-t,]
}
bistar <- array(0, dim=c(1,model$num_vis))
bjstar <- array(0, dim=c(1,model$num_hid))
for (t in 1:n_delay) {
bistar = bistar + d[,,t+1] %*% model$W_uv[,,t]
bjstar = bjstar + d[,,t+1] %*% model$W_uh[,,t]
}
# prop up
#v <- data[,,1]  #array(abs(0.001*rnorm(model$num_vis)), dim=c(1,model$num_vis))
for(it in 1:30) {
hid_probs <- sigmoid( v %*% model$W + rep.row(model$hid_bias, nrow(v))+bjstar)
hid_states <- sample_bernoulli(hid_probs)
vis_probs <- sigmoid( hid_states %*% t(model$W) + rep.row(model$vis_bias, nrow(hid_probs))+bistar)
v <- vis_probs
}
cat(sample_bernoulli(vis_probs), "\n")
}
}
num_vis <- 10
num_hid <- 50
num_cases <- 1200
data_all <- NULL
for(j in 1:(num_cases/6)) {
data <- matrix(0, nrow = 6, ncol=num_vis)
for(i in 1:(num_vis-4)) {
data[i,i] <- 1
data[i,i+2] <- 1
data[i,i+4] <- 1
}
data_all <- rbind(data_all, data)
}
n_delay <- 3
data <- matrix(0, nrow = n_delay, ncol=num_vis)
for(i in 1:n_delay) {
data[i,i] <- 1
data[i,i+2] <- 1
data[i,i+4] <- 1
}
data_all <- rbind(data_all, data)
# init model
# Energy:
# E(v,h) = -b_v*v' -b_h*h' - v*W*h'
model <- list(W = array(0.01*rnorm(num_vis*num_hid),dim=c(num_hid,num_vis)), # visible units for row, hidden units for col
A = array(0.01*rnorm(num_vis*num_vis*n_delay),dim=c(num_vis,num_vis,n_delay)),
B = array(0.01*rnorm(num_vis*n_delay*num_hid),dim=c(num_hid,num_vis,n_delay)),
vis_bias = array(0,dim = c(1,num_vis)),
hid_bias = array(0,dim = c(1,num_hid)),
num_cases = num_cases,
n_delay = n_delay,
num_vis = num_vis,
num_hid = num_hid)
train.params = list(e.w =  0.001, e.v =  0.001, e.h =  0.001, w_decay = 0.0002, e.w_uv =  0.001, e.w_uh =  0.001,
init.moment = 0.5, fin.moment = 0.9,
epochs = 3000, cd.iter = 1)
for (v in 1:length(train.params)) assign(names(train.params)[v], train.params[[v]])
batch_start <- sample((n_delay+1):(num_cases+n_delay))
batch_size <- 100
num_batches <- (nrow(data_all)-n_delay)/batch_size
W_inc <- hid_bias_inc <- vis_bias_inc <- 0
A_inc <- array(0,dim=c(num_vis,num_vis,n_delay))
B_inc <- array(0,dim=c(num_hid,num_vis,n_delay))
num_cases <- batch_size
#!/usr/bin/RScript
source('sys.R')
source('rbm.R')
prediction <- function(data, model, m = 50) {
start <- (model$n_delay+1)
v <- matrix(data[start,], nrow=1)
d <- array(0, dim=c(1, model$num_vis,model$n_delay+1))
d[,,1] <- v
for(t in 1:model$n_delay) {
d[,,t+1] <- data[start-t,]
}
bistar <- array(0, dim=c(1,model$num_vis))
bjstar <- array(0, dim=c(1,model$num_hid))
for(i in start:m) {
bistar[,] <- bjstar[,] <- 0
for (t in 1:n_delay) {
bistar = bistar + d[,,t+1] %*% model$W_uv[,,t]
bjstar = bjstar + d[,,t+1] %*% model$W_uh[,,t]
}
# prop up
v <- array(abs(0.001*rnorm(model$num_vis)), dim=c(1,model$num_vis))
for(it in 1:100) {
hid_probs <- sigmoid( v %*% model$W + rep.row(model$hid_bias, nrow(v))+bjstar)
hid_states <- sample_bernoulli(hid_probs)
vis_probs <- sigmoid( hid_states %*% t(model$W) + rep.row(model$vis_bias, nrow(hid_probs))+bistar)
v <- vis_probs
}
for(del in model$n_delay:2) {
d[,,del+1] <- d[,,del]
}
d[,,2] <- sample_bernoulli(v)
printf("%d ",d[,,2])
cat("\n")
}
}
gen_data <- function(n, model) {
data_all <- NULL
for(j in 1:(n/6)) {
data <- matrix(0, nrow = 6, ncol=model$num_vis)
for(i in 1:(model$num_vis-4)) {
data[i,i] <- 1
data[i,(i+2)] <- 1
data[i,(i+4)] <- 1
}
data_all <- rbind(data_all, data)
}
x <- 6
tt <- (model$n_delay - model$n_delay %% 6)/6
for(t in 1:(tt+1)) {
if(t == (tt+1)) {
x <- model$n_delay %% 6
}
data <- matrix(0, nrow = x, ncol=model$num_vis)
for(i in 1:x) {
data[i,i] <- 1
data[i,(i+2)] <- 1
data[i,(i+4)] <- 1
}
data_all <- rbind(data_all, data)
}
return(data_all)
}
sigmoid <- function(x) {
1/(1+exp(-x))
}
prop_up <- function(v, bjstar, model) {
sigmoid( v %*% model$W + rep.row(model$hid_bias, nrow(v)) + bjstar )
}
prop_down <- function(h, bistar, model) {
sigmoid( h %*% t(model$W) + rep.row(model$vis_bias, nrow(h)) + bistar )
}
n_delay <- 3
num_vis <- 10
num_hid <- 15
num_cases <- 1200
batch_size <- 100
model <- list(W = array(0.01*rnorm(num_vis*num_hid),dim=c(num_vis,num_hid)), # visible units for row, hidden units for col
W_uv = array(0.01*rnorm(num_vis*num_vis*n_delay),dim=c(num_vis,num_vis,n_delay)),
W_uh = array(0.01*rnorm(num_vis*n_delay*num_hid),dim=c(num_vis,num_hid,n_delay)),
vis_bias = array(0,dim = c(1,num_vis)),
hid_bias = array(0,dim = c(1,num_hid)),
num_cases = num_cases,
n_delay = n_delay,
num_vis = num_vis,
num_hid = num_hid)
train.params = list(e.w =  0.01, e.v =  0.01, e.h =  0.01, w_decay = 0.0002, e.w_uv =  0.01, e.w_uh =  0.01,
init.moment = 0.5, fin.moment = 0.9,
epochs = 1000, cd.iter = 1)
for (v in 1:length(train.params)) assign(names(train.params)[v], train.params[[v]])
data_all <- gen_data(num_cases, model)
batch_start <- sample((n_delay+1):(num_cases+n_delay))
num_batches <- num_cases/batch_size
# vars
W_inc <-  vis_bias_inc <- hid_bias_inc <- 0
W_uv_inc <- array(0, dim=c(num_vis,num_vis,n_delay))
W_uh_inc <- array(0, dim=c(num_vis,num_hid,n_delay))
pos_W_uv_grad <- array(0, dim=c(model$num_vis, model$num_vis, model$n_delay))
pos_W_uh_grad <- array(0, dim=c(model$num_vis, model$num_hid, model$n_delay))
neg_W_uv_grad <- array(0, dim=c(model$num_vis, model$num_vis, model$n_delay))
neg_W_uh_grad <- array(0, dim=c(model$num_vis, model$num_hid, model$n_delay))
# loop
b <- 1
b_s <- batch_start[((b-1)*batch_size+1):((b-1)*batch_size+batch_size)]
data <- array(dim=c(batch_size, num_vis,n_delay+1))
data[,,1] <- data_all[b_s,]
for(t in 1:model$n_delay) {
data[,,t+1] <- data_all[b_s-t,]
}
bistar <- array(0, dim=c(batch_size, model$num_vis))
bjstar <- array(0, dim=c(batch_size, model$num_hid))
for (t in 1:model$n_delay) {
bistar = bistar + data[,,t+1] %*% model$W_uv[,,t]
bjstar = bjstar + data[,,t+1] %*% model$W_uh[,,t]
}
bistar
dim(bistar)
data[1,]
data[1,,]
data[,,1]
gen_data <- function(n, model) {
data_all <- NULL
for(j in 1:(n/6)) {
data <- matrix(0, nrow = 6, ncol=model$num_vis)
for(i in 1:(model$num_vis-4)) {
data[i,i] <- 1
data[i,(i+2)] <- 1
data[i,(i+4)] <- 1
}
data_all <- rbind(data_all, data)
}
#     x <- 6
#     tt <- (model$n_delay - model$n_delay %% 6)/6
#     for(t in 1:(tt+1)) {
#         if(t == (tt+1)) {
#             x <- model$n_delay %% 6
#         }
#         data <- matrix(0, nrow = x, ncol=model$num_vis)
#         for(i in 1:x) {
#             data[i,i] <- 1
#             data[i,(i+2)] <- 1
#             data[i,(i+4)] <- 1
#         }
#         data_all <- rbind(data_all, data)
#     }
return(data_all)
}
gen_data(1200, model)
write.table(gen_data(1200, model), '/home/alexeyche/prog/alexeyche-junk/ml/dbn/th/ts_toy.csv', row.names=FALSE, col.names=FALSE)
write.table(gen_data(1200, model), '/home/alexeyche/prog/alexeyche-junk/ml/dbn/th/ts_toy.csv', row.names=FALSE, col.names=FALSE, sep=",")
data
data[,,1]
data[,,1].shape
dim(data[,,1])
data[,,1]
data[,,1] %*% model$W_uv[,,1]
a <- 0.02; b <- 0.2; c <- -65; d <-6
tau <- 0.25
tspan <- seq(0,100,by=tau)
tspan
tspan[-1]
tspan[1]
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
T1
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
VV
uu
plot(VV)
plot(VV, type="l")
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
plot(VV, type="l")
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
VV <- c(); uu <- c()
a <- 0.02; b <- 0.25; c <- -65; d <-6
V <- -64; u=b*V
tau <- 0.25
tspan <- seq(0,200,by=tau)
T1 <- 200/10
tau
I <- 0
(0.04*(V^2)+5*V+140-u+I)
u
I
V <- V + tau*(0.04*(V^2)+5*V+140-u+I)
V
(0.04*(V^2)+5*V+140-u+I)
V
V
V <- V + tau*(0.04*(V^2)+5*V+140-u+I)
V <- V + tau*(0.04*(V^2)+5*V+140-u+I)
V
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
VV
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
plot(uu, type="l")
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/ml/comp_neur/izhikevich.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/serve.R', echo=TRUE)
?Rserve
source('~/prog/alexeyche-junk/cns/R/serve.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/serve.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/serve.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/serve.R', echo=TRUE)
a
source('~/prog/alexeyche-junk/cns/R/serve.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/serve.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/serve.R', echo=TRUE)
r
source('~/prog/alexeyche-junk/cns/R/serve.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
RSconnect()
c <- RSconnect()
c
?RSeval
RSeval(c, a)
RSeval(c, "a")
RSlogin(c, "alexeyche","BORODAPENIS")
RSserverEval(c, "a")
c <- RSconnect()
c
RSeval(c, "rnorm(100)")
RSeval(c, "a <- rnorm(100)")
RSeval(c, "a")
RSeval(c, "b")
RSeval(c, "a")
source('~/prog/alexeyche-junk/cns/R/serve.R', echo=TRUE)
c
c
a
RSdetach()
RSdetach(c)
?assgin
?assign
source('~/prog/alexeyche-junk/cns/R/serve.R', echo=TRUE)
setwd("~/prog/alexeyche-junk/cns/R")
source('~/prog/alexeyche-junk/cns/R/serve.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/serve.R', echo=TRUE)
read_message(mc_p)
read_message <- function(mc_p) {
x <- .Call("r_get_message", mc_p)
if(! is.null(x)) {
assign(x$name, x$x)
} else {
return NULL
}
}
read_message <- function(mc_p) {
x <- .Call("r_get_message", mc_p)
if(! is.null(x)) {
assign(x$name, x$x)
} else {
return(NULL)
}
}
read_message(mc_p)
read_message(mc_p)
read_message(mc_p)
mc_p
read_message(mc_p)
.Call("r_get_message", mc_p)
