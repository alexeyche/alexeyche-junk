r = compute_response(xv, encoder, gain, bias, 0.5)
resp = cbind(resp, r)
}
cols = rainbow(nrow(resp))
for(ni in 1:nrow(resp)) {
if(ni==1) {
plot(x, resp[ni,], type="l", col=cols[ni], ylim=c(min(resp), max(resp)))
} else {
lines(x, resp[ni,], col=cols[ni])
}
}
L = 100
big_id = which(rowSums(spikes) >= max(rowSums(spikes)))
sp = as.matrix(spikes[big_id[1], ])
sp_t = which(sp == 1)
w = as.matrix(exp(-(1:L)/10)) # default filter
filt = Vectorize(function(s, w) {
if(s<0) return(0)
if(s>=L) return(0)
w[s+1]
},"s")
xv = NULL
for(t in L:(length(x_ts))) {
w_i = (i-L+1):i
xv = c(xv, w %*% x_ts[w_i])
}
xv = NULL
for(t in L:(length(x_ts))) {
w_i = (i-L+1):i
xv = c(xv, w %*% sp[w_i])
}
plotl(xv)
w
xv = NULL
for(t in L:(length(x_ts))) {
w_i = (i-L+1):i
xv = c(xv, t(w) %*% sp[w_i])
}
plotl(xv)
w_i
xv = NULL
for(i in L:(length(x_ts))) {
w_i = (i-L+1):i
xv = c(xv, t(w) %*% sp[w_i])
}
plotl(xv)
xv = NULL
for(i in L:(length(x_ts))) {
w_i = (i-L+1):i
xv = c(xv, w*sp[w_i])
}
plotl(xv)
xv = NULL
for(i in L:(length(x_ts))) {
w_i = (i-L+1):i
xv = c(xv, sum(w*sp[w_i]))
}
plotl(xv)
w
plotl(w)
sp[1:100]
i=1
w_i = (i-L+1):i
sp[w_i]
w_i
i=L
w_i = (i-L+1):i
w_i
sp[w_i]
w
sp[w_i] * w
?re
?rev
xv = NULL
for(i in L:(length(x_ts))) {
w_i = (i-L+1):i
xv = c(xv, sum(rew(w)*sp[w_i]))
}
plotl(xv)
rev(w)
plotl(rev(w))
xv = NULL
for(i in L:(length(x_ts))) {
w_i = (i-L+1):i
xv = c(xv, sum(rew(w)*sp[w_i]))
}
plotl(xv)
xv
xv = NULL
for(i in L:(length(x_ts))) {
w_i = (i-L+1):i
xv = c(xv, t(rev(w)) %*% sp[w_i])
}
plotl(xv)
i=1
w_i = (i-L+1):i
w_i
xv = NULL
for(i in 1:(length(x_ts))) {
w_i = (i-L+1):i
w_i = w_i[w_i>0]
xv = c(xv, t(rev(w)) %*% sp[w_i])
}
plotl(xv)
i=1
w_i = (i-L+1):i
w_i
w_i = w_i[w_i>0]
w_i
xv = NULL
for(i in 1:(length(x_ts))) {
w_i = (i-L+1):i
w_i = w_i[w_i>0]
xv = c(xv, t(rev(w[1:length(w_i)])) %*% sp[w_i])
}
plotl(xv)
sp_t
plot_rastl(sp_t)
plot_rastl(list(sp_t))
E = sum((x_ts - xv)^2)
E
Rxx = matrix(0, nrow=L, ncol=L)
rxd = rep(0, L)
for(i in L:length(x_ts) {
w_i = (i-L+1):i
Rxx = Rxx + x_ts[w_i] %*% t(x_ts[w_i])
rxd = rxd + x_ts[w_i] * sp[w_i]
}
Rxx = Rxx/(length(x_ts)-L)
rxd = rxd/(length(x_ts)-L)
L
Rxx = matrix(0, nrow=L, ncol=L)
rxd = rep(0, L)
for(i in L:length(x_ts)) {
w_i = (i-L+1):i
Rxx = Rxx + x_ts[w_i] %*% t(x_ts[w_i])
rxd = rxd + x_ts[w_i] * sp[w_i]
}
Rxx
gr_pl(Rxx)
Rxx = matrix(0, nrow=L, ncol=L)
rxd = rep(0, L)
for(i in L:length(x_ts)) {
w_i = (i-L+1):i
Rxx = Rxx + rev(x_ts[w_i]) %*% t(rev(x_ts[w_i]))
rxd = rxd + rev(x_ts[w_i]) * rev(sp[w_i])
}
gr_pl(Rxx)
Rxx = matrix(0, nrow=L, ncol=L)
rxd = rep(0, L)
for(i in L:length(x_ts)) {
w_i = (i-L+1):i
Rxx = Rxx + x_ts[w_i] %*% t(x_ts[w_i])
rxd = rxd + x_ts[w_i] * sp[w_i]
}
gr_pl
gr_pl(Rxx)
Rxx = matrix(0, nrow=L, ncol=L)
rxd = rep(0, L)
for(i in L:length(x_ts)) {
w_i = (i-L+1):i
Rxx = Rxx + rev(x_ts[w_i] %*% t(x_ts[w_i]))
rxd = rxd + x_ts[w_i] * sp[w_i]
}
gr_pl(Rxx)
Rxx2 = sapply(1:nrow(Rxx), function(i) rev(R[i,]))
Rxx2 = sapply(1:nrow(Rxx), function(i) rev(Rxx[i,]))
gr_pl(Rxx2)
Rxx = matrix(0, nrow=L, ncol=L)
rxd = rep(0, L)
for(i in L:length(x_ts)) {
w_i = (i-L+1):i
Rxx = Rxx + x_ts[w_i] %*% t(x_ts[w_i])
rxd = rxd + x_ts[w_i] * sp[w_i]
}
Rxx = sapply(1:nrow(Rxx), function(i) rev(Rxx[i,]))
Rxx = Rxx/(length(x_ts)-L)
rxd = rxd/(length(x_ts)-L)
gr_pl(Rxx)
gr_pl(t(Rxx))
w = t(ginv(t(Rxx))) %*% rxd
plotl(w)
xv = NULL
for(i in 1:(length(x_ts))) {
w_i = (i-L+1):i
w_i = w_i[w_i>0]
xv = c(xv, t(rev(w[1:length(w_i)])) %*% sp[w_i])
}
plotl(xv)
E = sum((x_ts - xv)^2)
E
Rxx = matrix(0, nrow=L, ncol=L)
rxd = rep(0, L)
for(i in L:length(x_ts)) {
w_i = (i-L+1):i
Rxx = Rxx + x_ts[w_i] %*% t(x_ts[w_i])
rxd = rxd + x_ts[w_i] * sp[w_i]
}
Rxx = sapply(1:nrow(Rxx), function(i) rev(Rxx[i,]))
rxd = rev(rxd)
Rxx = Rxx/(length(x_ts)-L)
rxd = rxd/(length(x_ts)-L)
plotl(rxd)
w = ginv(Rxx) %*% rxd
xv = NULL
for(i in 1:(length(x_ts))) {
w_i = (i-L+1):i
w_i = w_i[w_i>0]
xv = c(xv, t(rev(w[1:length(w_i)])) %*% sp[w_i])
}
plotl(xv)
xv = NULL
for(i in 1:(length(x_ts))) {
w_i = (i-L+1):i
w_i = w_i[w_i>0]
xv = c(xv, t(rev(w[1:length(w_i)])) %*% sp[w_i])
}
plotl(xv)
big_id = which(rowSums(spikes) >= max(rowSums(spikes)))
sp = as.matrix(spikes[big_id[1], ])
sp_t = which(sp == 1)
w = as.matrix(exp(-(1:L)/10)) # default filter
filt = Vectorize(function(s, w) {
if(s<0) return(0)
if(s>=L) return(0)
w[s+1]
},"s")
xv = NULL
for(i in 1:(length(x_ts))) {
w_i = (i-L+1):i
w_i = w_i[w_i>0]
xv = c(xv, t(rev(w[1:length(w_i)])) %*% sp[w_i])
}
plotl(xv)
i=1
1:length(w_i)
w_i = (i-L+1):i
w_i = w_i[w_i>0]
w_i
1:length(w_i)
w[1:length(w_i)])
w[1:length(w_i)]
w[1]
plotl(w)
rev(w[1:length(w_i)])
t(rev(w[1:length(w_i)])) %*% sp[w_i]
xv = NULL
for(i in 1:(length(x_ts))) {
w_i = (i-L+1):i
w_i = w_i[w_i>0]
xv = c(xv, t(w[1:length(w_i)]) %*% sp[w_i])
}
plotl(xv)
w[1:length(w_i)]
i=1
w_i = (i-L+1):i
w_i = w_i[w_i>0]
w[1:length(w_i)]
t(w[1:length(w_i)]) %*% sp[w_i]
i=2
xv = NULL
for(i in 1:(length(x_ts))) {
w_i = (i-L+1):i
w_i = w_i[w_i>0]
xv = c(xv, t(rev(w[1:length(w_i)])) %*% sp[w_i])
}
plotl(xv)
E = sum((x_ts - xv)^2)
E
Rxx = matrix(0, nrow=L, ncol=L)
rxd = rep(0, L)
for(i in L:length(x_ts)) {
w_i = (i-L+1):i
Rxx = Rxx + x_ts[w_i] %*% t(x_ts[w_i])
rxd = rxd + x_ts[w_i] * sp[w_i]
}
Rxx = sapply(1:nrow(Rxx), function(i) rev(Rxx[i,]))
rxd = rev(rxd)
gr_pl(Rxx)
Rxx = Rxx/(length(x_ts)-L)
rxd = rxd/(length(x_ts)-L)
w = ginv(Rxx) %*% rxd
plotl(w)
xv = NULL
for(i in 1:(length(x_ts))) {
w_i = (i-L+1):i
w_i = w_i[w_i>0]
xv = c(xv, t(rev(w[1:length(w_i)])) %*% sp[w_i])
}
plotl(xv)
E = sum((x_ts - xv)^2)
E
conv = function(x, w) {
xv = NULL
L = length(w)
for(i in 1:length(x)) {
w_i = (i-L+1):i
w_i = w_i[w_i>0]
xv = c(xv, t(rev(w[1:length(w_i)])) %*% x[w_i])
}
return(xv)
}
sp_c = conv(sp, w)
plotl(sp_c)
L:length(x_ts)
length(L:length(x_ts))
length(x_ts)-L+1
E = sum((x_ts - xv)^2)
Rxx = matrix(0, nrow=L, ncol=L)
rxd = rep(0, L)
for(i in L:length(x_ts)) {
w_i = (i-L+1):i
Rxx = Rxx + x_ts[w_i] %*% t(x_ts[w_i])
rxd = rxd + x_ts[w_i] * sp[w_i]
}
#Rxx = sapply(1:nrow(Rxx), function(i) rev(Rxx[i,]))
#rxd = rev(rxd)
Rxx = Rxx/(length(x_ts)-L+1)
rxd = rxd/(length(x_ts)-L+1)
w2 = ginv(Rxx) %*% rxd
sp_c2 = conv(sp, w2)
E2 = sum((x_ts - xv)^2)
plotl(sp_c2)
L = 100
big_id = which(rowSums(spikes) >= max(rowSums(spikes)))
sp = as.matrix(spikes[big_id[1], ])
sp_t = which(sp == 1)
x_ts = x_ts[1:100]
sp = sp[1:100]
w = as.matrix(exp(-(1:L)/10)) # default filter
filt = Vectorize(function(s, w) {
if(s<0) return(0)
if(s>=L) return(0)
w[s+1]
},"s")
conv = function(x, w) {
xv = NULL
L = length(w)
for(i in 1:length(x)) {
w_i = (i-L+1):i
w_i = w_i[w_i>0]
xv = c(xv, t(rev(w[1:length(w_i)])) %*% x[w_i])
}
return(xv)
}
sp_c = conv(sp, w)
plotl(sp_c)
E = sum((x_ts - xv)^2)
x_ts
E = sum((x_ts - sp_c)^2)
E
Rxx = matrix(0, nrow=L, ncol=L)
rxd = rep(0, L)
for(i in L:length(x_ts)) {
w_i = (i-L+1):i
Rxx = Rxx + x_ts[w_i] %*% t(x_ts[w_i])
rxd = rxd + x_ts[w_i] * sp[w_i]
}
#Rxx = sapply(1:nrow(Rxx), function(i) rev(Rxx[i,]))
#rxd = rev(rxd)
Rxx = Rxx/(length(x_ts)-L+1)
rxd = rxd/(length(x_ts)-L+1)
w2 = ginv(Rxx) %*% rxd
w2
plotl(w2)
sp_c2 = conv(sp, w2)
E2 = sum((x_ts - sp_c2)^2)
E2
plotl(sp_c2)
length(x_ts)-L+1
gr_pl(Rxx)
plotl(sp_c2)
x_ts = x_ts[1:200]
sp = sp[1:200]
w = as.matrix(exp(-(1:L)/10)) # default filter
filt = Vectorize(function(s, w) {
if(s<0) return(0)
if(s>=L) return(0)
w[s+1]
},"s")
conv = function(x, w) {
xv = NULL
L = length(w)
for(i in 1:length(x)) {
w_i = (i-L+1):i
w_i = w_i[w_i>0]
xv = c(xv, t(rev(w[1:length(w_i)])) %*% x[w_i])
}
return(xv)
}
sp_c = conv(sp, w)
plotl(sp_c)
x_ts = loadMatrix("~/prog/sim/ts/synthetic_control/synthetic_control_TRAIN_512",1)[1,]
x_ts =  2*(x_ts-min(x_ts))/(max(x_ts)-min(x_ts))-1
c(gain, bias) := generate_gain_and_bias(M, min(x_ts), max(x_ts), rate_low, rate_high)
gain = gain
bias = bias
big_id = which(rowSums(spikes) >= max(rowSums(spikes)))
sp = as.matrix(spikes[big_id[1], ])
sp_t = which(sp == 1)
x_ts = x_ts[1:200]
sp = sp[1:200]
w = as.matrix(exp(-(1:L)/10)) # default filter
filt = Vectorize(function(s, w) {
if(s<0) return(0)
if(s>=L) return(0)
w[s+1]
},"s")
conv = function(x, w) {
xv = NULL
L = length(w)
for(i in 1:length(x)) {
w_i = (i-L+1):i
w_i = w_i[w_i>0]
xv = c(xv, t(rev(w[1:length(w_i)])) %*% x[w_i])
}
return(xv)
}
sp_c = conv(sp, w)
plotl(sp_c)
E = sum((x_ts - sp_c)^2)
E
Rxx = matrix(0, nrow=L, ncol=L)
rxd = rep(0, L)
for(i in L:length(x_ts)) {
w_i = (i-L+1):i
Rxx = Rxx + x_ts[w_i] %*% t(x_ts[w_i])
rxd = rxd + x_ts[w_i] * sp[w_i]
}
#Rxx = sapply(1:nrow(Rxx), function(i) rev(Rxx[i,]))
#rxd = rev(rxd)
Rxx = Rxx/(length(x_ts)-L+1)
rxd = rxd/(length(x_ts)-L+1)
w2 = ginv(Rxx) %*% rxd
sp_c2 = conv(sp, w2)
E2 = sum((x_ts - sp_c2)^2)
E2
plotl(sp_c2)
w2
gr_pl(w2)
gr_pl(Rxx)
Rxx = matrix(0, nrow=L, ncol=L)
rxd = rep(0, L)
for(i in L:length(x_ts)) {
w_i = (i-L+1):i
Rxx = Rxx + x_ts[w_i] %*% t(x_ts[w_i])
rxd = rxd + x_ts[w_i] * sp[w_i]
}
Rxx = sapply(1:nrow(Rxx), function(i) rev(Rxx[i,]))
rxd = rev(rxd)
Rxx = Rxx/(length(x_ts)-L+1)
rxd = rxd/(length(x_ts)-L+1)
w2 = ginv(Rxx) %*% rxd
w2
sp_c2 = conv(sp, w2)
E2 = sum((x_ts - sp_c2)^2)
E2
gr_pl(Rxx)
rxd
w2 = w2/100
sp_c2 = conv(sp, w2)
E2 = sum((x_ts - sp_c2)^2)
plotl(sp_c2)
gr_pl(w2)
plotl(w2)
require(Rsnn)
M = 100
const_ini = "/home/alexeyche/prog/alexeyche-junk/cns/c/snn_sim/constants.ini"
N = 100
jobs = 4
statLevel = 0
const = RConstants$new(const_ini)
const$setValue("sim","M", M)
const$setValue("layer","N", N)
const$setValue("layer","neuron_type", "WtaLayer")
const$setValue("layer","learning_rule", "SimpleSTDP")
const$setValue("layer","prob_fun", "Exp")
const$setValue("layer","lrate", 0.04)
const$setValue("layer","weight_decay_factor", 0.015)
s = RSim$new(const, statLevel, jobs)
spikes = getSpikesFromMatrix(loadMatrix("/home/alexeyche/prog/sim/spikes/ucr/1_train_spikes",1))
spikes
loadMatrix("/home/alexeyche/prog/sim/spikes/ucr/1_train_spikes",2)
source('~/prog/alexeyche-junk/cns/R/srm/Rsnn_scripts/test.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/Rsnn_scripts/test.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/Rsnn_scripts/test.R', echo=TRUE)
max_ep = 5
for(i in 1:max_ep) {
s$setInputSpikes(spikes)
out_sp = s$run()
cat(i,"\n")
}
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
gr_pl(t(s$W()[[1]]))
const$setValue("layer","net_edge_prob", 1.0)
const
source('~/prog/alexeyche-junk/cns/R/srm/Rsnn_scripts/test.R', echo=TRUE)
gr_pl(s$W()[[1]])
setwd("~/prog/alexeyche-junk/cns/R/filt")
source('~/prog/alexeyche-junk/cns/R/filt/gen_ucr_data.R', echo=TRUE)
loadMatrix("~/prog/sim/ts/synthetic_control/synthetic_control_TRAIN_60_labels.bin",1)
loadMatrix("~/prog/sim/ts/synthetic_control/synthetic_control_TRAIN_60.bin",1)
loadMatrix("~/prog/sim/ts/synthetic_control/synthetic_control_TRAIN_60.bin",2)
source('~/prog/alexeyche-junk/cns/R/filt/gen_ucr_data.R', echo=TRUE)
setwd("~/prog/alexeyche-junk/cns/R/filt")
source('~/prog/alexeyche-junk/cns/R/filt/gen_ucr_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/gen_ucr_data.R', echo=TRUE)
loadMatrix("~/prog/sim/ts/synthetic_control/synthetic_control_TRAIN_60.bin",2)
loadMatrix("~/prog/sim/ts/synthetic_control/synthetic_control_TRAIN_60.bin",1)
source('~/prog/alexeyche-junk/cns/R/filt/gen_ucr_data.R', echo=TRUE)
loadMatrix("~/prog/sim/ts/synthetic_control/synthetic_control_TRAIN_60.bin",1)
