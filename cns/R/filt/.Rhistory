<<<<<<< HEAD
s = RSim$new(const, statLevel, jobs)
#spikes = getSpikesFromMatrix(loadMatrix("/home/alexeyche/prog/sim/spikes/ucr/1_train_spikes",1))
spikes=blank_net(M)
spikes[[1]] = c(10,20)
spikes[[2]] = c(20,30)
s$setInputSpikes(spikes)
out_sp = s$run()
out_sp
out_sp = s$run()
out_sp
s$printInputSpikes()
source('~/prog/alexeyche-junk/cns/R/srm/Rsnn_scripts/test.R', echo=TRUE)
s$setInputSpikes(spikes)
out_sp = s$run()
prast(out_sp,T0=0,Tmax=1000)
s$setInputSpikes(spikes)
out_sp = s$run()
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
s$setInputSpikes(spikes)
out_sp = s$run()
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
source('~/prog/alexeyche-junk/cns/R/srm/Rsnn_scripts/test.R', echo=TRUE)
s$setInputSpikes(spikes)
out_sp = s$run()
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
s$setInputSpikes(spikes)
out_sp = s$run()
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
s$setInputSpikes(spikes)
out_sp = s$run()
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
s$setInputSpikes(spikes)
out_sp = s$run()
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
s$setInputSpikes(spikes)
out_sp = s$run()
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
s$setInputSpikes(spikes)
out_sp = s$run()
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
s$setInputSpikes(spikes)
out_sp = s$run()
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
s$setInputSpikes(spikes)
out_sp = s$run()
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
s$setInputSpikes(spikes)
out_sp = s$run()
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
s$setInputSpikes(spikes)
out_sp = s$run()
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
s$setInputSpikes(spikes)
out_sp = s$run()
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
s$setInputSpikes(spikes)
out_sp = s$run()
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
s$setInputSpikes(spikes)
out_sp = s$run()
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
s$setInputSpikes(spikes)
out_sp = s$run()
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
s$setInputSpikes(spikes)
out_sp = s$run()
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
s$setInputSpikes(spikes)
out_sp = s$run()
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
s$setInputSpikes(spikes)
out_sp = s$run()
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
s$setInputSpikes(spikes)
out_sp = s$run()
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
#!/usr/bin/env RScript
require(Rsnn)
M = 10
const_ini = "/home/alexeyche/prog/alexeyche-junk/cns/c/snn_sim/constants.ini"
N = 10
jobs = 4
statLevel = 0
const = RConstants$new(const_ini)
const$setValue("sim","M", M)
const$setValue("layer","N", N)
const$setValue("layer","learning_rule", "SimpleSTDP")
s = RSim$new(const, statLevel, jobs)
#spikes = getSpikesFromMatrix(loadMatrix("/home/alexeyche/prog/sim/spikes/ucr/1_train_spikes",1))
spikes=blank_net(M-1)
spikes[[1]] = c(10,20)
spikes[[2]] = c(20,30)
s$setInputSpikes(spikes)
spikes=blank_net(M)
spikes[[1]] = c(10,20)
spikes[[2]] = c(20,30)
s$setInputSpikes(spikes)
require(Rsnn)
M = 10
const_ini = "/home/alexeyche/prog/alexeyche-junk/cns/c/snn_sim/constants.ini"
N = 10
jobs = 4
statLevel = 0
const = RConstants$new(const_ini)
const$setValue("sim","M", M)
const$setValue("layer","N", N)
const$setValue("layer","learning_rule", "SimpleSTDP")
s = RSim$new(const, statLevel, jobs)
require(Rsnn)
M = 10
const_ini = "/home/alexeyche/prog/alexeyche-junk/cns/c/snn_sim/constants.ini"
N = 10
jobs = 4
statLevel = 0
const = RConstants$new(const_ini)
const$setValue("sim","M", M)
const$setValue("layer","N", N)
const$setValue("layer","learning_rule", "SimpleSTDP")
s = RSim$new(const, statLevel, jobs)
require(Rsnn)
M = 10
const_ini = "/home/alexeyche/prog/alexeyche-junk/cns/c/snn_sim/constants.ini"
N = 10
jobs = 4
statLevel = 0
const = RConstants$new(const_ini)
const$setValue("sim","M", M)
const$setValue("layer","N", N)
const$setValue("layer","learning_rule", "SimpleSTDP")
s = RSim$new(const, statLevel, jobs)
require(Rsnn)
M = 10
const_ini = "/home/alexeyche/prog/alexeyche-junk/cns/c/snn_sim/constants.ini"
N = 10
jobs = 4
statLevel = 0
const = RConstants$new(const_ini)
const$setValue("sim","M", M)
const$setValue("layer","N", N)
const$setValue("layer","learning_rule", "SimpleSTDP")
s = RSim$new(const, statLevel, jobs)
source('~/prog/alexeyche-junk/cns/R/srm/Rsnn_scripts/test.R', echo=TRUE)
s$setInputSpikes(spikes)
out_sp = s$run()
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
s$setInputSpikes(spikes)
out_sp = s$run()
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
s$setInputSpikes(spikes)
out_sp = s$run()
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
s$setInputSpikes(spikes)
out_sp = s$run()
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
s$setInputSpikes(spikes)
out_sp = s$run()
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
s$setInputSpikes(spikes)
out_sp = s$run()
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
s$setInputSpikes(spikes)
out_sp = s$run()
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
s$setInputSpikes(spikes)
out_sp = s$run()
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
s$setInputSpikes(spikes)
out_sp = s$run()
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
source('~/prog/alexeyche-junk/cns/R/srm/Rsnn_scripts/test.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/Rsnn_scripts/test.R', echo=TRUE)
gr_pl(t(s$W()[[1]]))
s$setInputSpikes(spikes)
out_sp = s$run()
prast(out_sp,T0=0,Tmax=1000)
gr_pl(t(s$W()[[1]]))
spikes
sapply(max(spikes))
sapply(spikes,max)
max(sapply(spikes,max))
for(i in 1:10) {
s$setInputSpikes(spikes)
out_sp = s$run()
}
gr_pl(t(s$W()[[1]]))
const
60000/15000
60000/15000.
source('~/prog/alexeyche-junk/cns/R/srm/Rsnn_scripts/test.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/Rsnn_scripts/test.R', echo=TRUE)
gr_pl(t(s$W()[[1]]))
source('~/prog/alexeyche-junk/cns/R/srm/Rsnn_scripts/test.R', echo=TRUE)
const = RConstants$new(const_ini)
const$setValue("sim","M", M)
const$setValue("layer","N", N)
const$setValue("layer","learning_rule", "OptimalSTDP")
const$setValue("layer","lrate", 0.04)
const
source('~/prog/alexeyche-junk/cns/R/srm/Rsnn_scripts/test.R', echo=TRUE)
for(i in 1:20) {
s$setInputSpikes(spikes)
out_sp = s$run()
cat(i,"\n")
}
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
gr_pl(t(s$W()[[1]]))
source('~/prog/alexeyche-junk/cns/R/srm/Rsnn_scripts/test.R', echo=TRUE)
prast(spikes,T0=0,Tmax=1000)
#!/usr/bin/env RScript
require(Rsnn)
M = 100
const_ini = "/home/alexeyche/prog/alexeyche-junk/cns/c/snn_sim/constants.ini"
N = 100
jobs = 4
statLevel = 0
const = RConstants$new(const_ini)
const$setValue("sim","M", M)
const$setValue("layer","N", N)
const$setValue("layer","neuron_type", "WtaLayer")
const$setValue("layer","learning_rule", "SimpleSTDP")
const$setValue("layer","lrate", 0.04)
const$setValue("layer","weight_decay_factor", 0.015)
const
source('~/prog/alexeyche-junk/cns/R/srm/Rsnn_scripts/test.R', echo=TRUE)
max_ep = 100
for(i in 1:max_ep) {
s$setInputSpikes(spikes)
out_sp = s$run()
cat(i,"\n")
}
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
gr_pl(t(s$W()[[1]]))
setwd("~/prog/alexeyche-junk/cns/R/filt")
source('nengo.R')
source('util.R')
source('serialize_to_bin.R')
dt = 1
t_rc = 0.02 * 1000
t_ref = 0.002 * 1000
M = 50
rate_low = 0
rate_high = 50
v_tresh = 1
Xi = sample(1:10)
X = NULL
for(i in Xi) {
X = c(X, loadMatrix("~/prog/sim/ts/synthetic_control/synthetic_control_TRAIN_120",i)[1,])
}
X =  2*(X-min(X))/(max(X)-min(X))-1
X
plotl(X)
M = 25
c(gain, bias) := generate_gain_and_bias(M, rate_low, rate_high)
encoder = sample(c(1,-1),M, replace=TRUE)
n = list(v=rep(0, M), ref=rep(0,M))
spikes = NULL
for(i in 1:length(X)) {
x = X[i]
input = x * encoder * gain + bias
c(n, current_spikes) := run_neurons(input, n)
spikes = cbind(spikes, as.integer(current_spikes))
}
gr_pl(spikes)
require(Rsnn)
#!/usr/bin/env RScript
require(Rsnn)
source('nengo.R')
source('util.R')
source('serialize_to_bin.R')
dt = 1
t_rc = 0.02 * 1000
t_ref = 0.002 * 1000
M = 50
rate_low = 0
rate_high = 50
v_tresh = 1
Xi = sample(1:10)
X = NULL
for(i in Xi) {
X = c(X, loadMatrix("~/prog/sim/ts/synthetic_control/synthetic_control_TRAIN_120",i)[1,])
}
X =  2*(X-min(X))/(max(X)-min(X))-1
M = 25
c(gain, bias) := generate_gain_and_bias(M, rate_low, rate_high)
encoder = sample(c(1,-1),M, replace=TRUE)
n = list(v=rep(0, M), ref=rep(0,M))
spikes = NULL
for(i in 1:length(X)) {
x = X[i]
input = x * encoder * gain + bias
c(n, current_spikes) := run_neurons(input, n)
spikes = cbind(spikes, as.integer(current_spikes))
}
gr_pl(spikes)
net = blank_net(M)
current_spikes
require(Rsnn)
source('nengo.R')
dt = 1
t_rc = 0.02 * 1000
t_ref = 0.002 * 1000
M = 50
rate_low = 0
rate_high = 50
v_tresh = 1
Xi = sample(1:10)
X = NULL
for(i in Xi) {
X = c(X, loadMatrix("~/prog/sim/ts/synthetic_control/synthetic_control_TRAIN_120",i)[1,])
}
X =  2*(X-min(X))/(max(X)-min(X))-1
M = 25
c(gain, bias) := generate_gain_and_bias(M, rate_low, rate_high)
encoder = sample(c(1,-1),M, replace=TRUE)
n = list(v=rep(0, M), ref=rep(0,M))
net = blank_net(M)
spikes = NULL
for(i in 1:length(X)) {
x = X[i]
input = x * encoder * gain + bias
c(n, current_spikes) := run_neurons(input, n)
spikes = cbind(spikes, as.integer(current_spikes))
}
current_spikes
which(current_spikes)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
net
prast(net)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
prast(net)
X
plot_tuning_curves(encoder, gain, bias)
X
require(Rsnn)
source('nengo.R')
dt = 1
t_rc = 0.02 * 1000
t_ref = 0.002 * 1000
M = 50
rate_low = 25
rate_high = 50
v_tresh = 1
Xi = sample(1:1)
X = NULL
for(i in Xi) {
X = c(X, loadMatrix("~/prog/sim/ts/synthetic_control/synthetic_control_TRAIN_120",i)[1,])
}
X =  2*(X-min(X))/(max(X)-min(X))-1
M = 25
c(gain, bias) := generate_gain_and_bias(M, rate_low, rate_high)
encoder = sample(c(1,-1),M, replace=TRUE)
plot_tuning_curves(encoder, gain, bias)
require(Rsnn)
source('nengo.R')
dt = 1
t_rc = 0.02 * 1000
t_ref = 0.002 * 1000
M = 100
rate_low = 25
rate_high = 50
v_tresh = 1
Xi = sample(1:1)
X = NULL
for(i in Xi) {
X = c(X, loadMatrix("~/prog/sim/ts/synthetic_control/synthetic_control_TRAIN_120",i)[1,])
}
X =  2*(X-min(X))/(max(X)-min(X))-1
c(gain, bias) := generate_gain_and_bias(M, rate_low, rate_high)
encoder = sample(c(1,-1),M, replace=TRUE)
plot_tuning_curves(encoder, gain, bias)
n = list(v=rep(0, M), ref=rep(0,M))
net = blank_net(M)
spikes = NULL
for(i in 1:length(X)) {
x = X[i]
input = x * encoder * gain + bias
c(n, current_spikes) := run_neurons(input, n)
spikes = cbind(spikes, as.integer(current_spikes))
for(ni in  which(current_spikes)) {
net[[ni]] <- c(net[[ni]], i)
}
}
prast(net)
Xi = sample(1:100)
X = NULL
for(i in Xi) {
X = c(X, loadMatrix("~/prog/sim/ts/synthetic_control/synthetic_control_TRAIN_120",i)[1,])
}
X =  2*(X-min(X))/(max(X)-min(X))-1
c(gain, bias) := generate_gain_and_bias(M, rate_low, rate_high)
encoder = sample(c(1,-1),M, replace=TRUE)
n = list(v=rep(0, M), ref=rep(0,M))
net = blank_net(M)
spikes = NULL
for(i in 1:length(X)) {
x = X[i]
input = x * encoder * gain + bias
c(n, current_spikes) := run_neurons(input, n)
spikes = cbind(spikes, as.integer(current_spikes))
for(ni in  which(current_spikes)) {
net[[ni]] <- c(net[[ni]], i)
}
}
prast(net,T0=0,Tmax=1000)
length(X)
prast(net,T0=0,Tmax=120)
prast(net,T0=0,Tmax=240)
Xi = sample(1:100)
timeline = NULL
X = NULL
for(i in Xi) {
X = c(X, loadMatrix("~/prog/sim/ts/synthetic_control/synthetic_control_TRAIN_120",i)[1,])
timeline = c(timeline, length(X))
}
X
timeline
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
prast(net,T0=0,T=240)
spikes=net
source('~/.active-rstudio-document', echo=TRUE)
const$setValue("layer","net_edge_prob", 1.0)
const
source('~/prog/alexeyche-junk/cns/R/srm/Rsnn_scripts/test.R', echo=TRUE)
max_ep = 100
for(i in 1:max_ep) {
s$setInputSpikes(spikes)
out_sp = s$run()
cat(i,"\n")
}
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
gr_pl(t(s$W()[[1]]))
max_ep = 100
for(i in 1:max_ep) {
s$setInputSpikes(spikes)
out_sp = s$run()
cat(i,"\n")
}
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
gr_pl(t(s$W()[[1]]))
max_ep = 100
=======
gr_pl(Rxx)
Rxx = matrix(0, nrow=L, ncol=L)
rxd = rep(0, L)
for(i in L:length(x_ts)) {
w_i = (i-L+1):i
Rxx = Rxx + rev(x_ts[w_i] %*% t(x_ts[w_i]))
rxd = rxd + x_ts[w_i] * sp[w_i]
}
gr_pl(Rxx)
Rxx2 = sapply(1:nrow(Rxx), function(i) rev(R[i,]))
Rxx2 = sapply(1:nrow(Rxx), function(i) rev(Rxx[i,]))
gr_pl(Rxx2)
Rxx = matrix(0, nrow=L, ncol=L)
rxd = rep(0, L)
for(i in L:length(x_ts)) {
w_i = (i-L+1):i
Rxx = Rxx + x_ts[w_i] %*% t(x_ts[w_i])
rxd = rxd + x_ts[w_i] * sp[w_i]
}
Rxx = sapply(1:nrow(Rxx), function(i) rev(Rxx[i,]))
Rxx = Rxx/(length(x_ts)-L)
rxd = rxd/(length(x_ts)-L)
gr_pl(Rxx)
gr_pl(t(Rxx))
w = t(ginv(t(Rxx))) %*% rxd
plotl(w)
xv = NULL
for(i in 1:(length(x_ts))) {
w_i = (i-L+1):i
w_i = w_i[w_i>0]
xv = c(xv, t(rev(w[1:length(w_i)])) %*% sp[w_i])
}
plotl(xv)
E = sum((x_ts - xv)^2)
E
Rxx = matrix(0, nrow=L, ncol=L)
rxd = rep(0, L)
for(i in L:length(x_ts)) {
w_i = (i-L+1):i
Rxx = Rxx + x_ts[w_i] %*% t(x_ts[w_i])
rxd = rxd + x_ts[w_i] * sp[w_i]
}
Rxx = sapply(1:nrow(Rxx), function(i) rev(Rxx[i,]))
rxd = rev(rxd)
Rxx = Rxx/(length(x_ts)-L)
rxd = rxd/(length(x_ts)-L)
plotl(rxd)
w = ginv(Rxx) %*% rxd
xv = NULL
for(i in 1:(length(x_ts))) {
w_i = (i-L+1):i
w_i = w_i[w_i>0]
xv = c(xv, t(rev(w[1:length(w_i)])) %*% sp[w_i])
}
plotl(xv)
xv = NULL
for(i in 1:(length(x_ts))) {
w_i = (i-L+1):i
w_i = w_i[w_i>0]
xv = c(xv, t(rev(w[1:length(w_i)])) %*% sp[w_i])
}
plotl(xv)
big_id = which(rowSums(spikes) >= max(rowSums(spikes)))
sp = as.matrix(spikes[big_id[1], ])
sp_t = which(sp == 1)
w = as.matrix(exp(-(1:L)/10)) # default filter
filt = Vectorize(function(s, w) {
if(s<0) return(0)
if(s>=L) return(0)
w[s+1]
},"s")
xv = NULL
for(i in 1:(length(x_ts))) {
w_i = (i-L+1):i
w_i = w_i[w_i>0]
xv = c(xv, t(rev(w[1:length(w_i)])) %*% sp[w_i])
}
plotl(xv)
i=1
1:length(w_i)
w_i = (i-L+1):i
w_i = w_i[w_i>0]
w_i
1:length(w_i)
w[1:length(w_i)])
w[1:length(w_i)]
w[1]
plotl(w)
rev(w[1:length(w_i)])
t(rev(w[1:length(w_i)])) %*% sp[w_i]
xv = NULL
for(i in 1:(length(x_ts))) {
w_i = (i-L+1):i
w_i = w_i[w_i>0]
xv = c(xv, t(w[1:length(w_i)]) %*% sp[w_i])
}
plotl(xv)
w[1:length(w_i)]
i=1
w_i = (i-L+1):i
w_i = w_i[w_i>0]
w[1:length(w_i)]
t(w[1:length(w_i)]) %*% sp[w_i]
i=2
xv = NULL
for(i in 1:(length(x_ts))) {
w_i = (i-L+1):i
w_i = w_i[w_i>0]
xv = c(xv, t(rev(w[1:length(w_i)])) %*% sp[w_i])
}
plotl(xv)
E = sum((x_ts - xv)^2)
E
Rxx = matrix(0, nrow=L, ncol=L)
rxd = rep(0, L)
for(i in L:length(x_ts)) {
w_i = (i-L+1):i
Rxx = Rxx + x_ts[w_i] %*% t(x_ts[w_i])
rxd = rxd + x_ts[w_i] * sp[w_i]
}
Rxx = sapply(1:nrow(Rxx), function(i) rev(Rxx[i,]))
rxd = rev(rxd)
gr_pl(Rxx)
Rxx = Rxx/(length(x_ts)-L)
rxd = rxd/(length(x_ts)-L)
w = ginv(Rxx) %*% rxd
plotl(w)
xv = NULL
for(i in 1:(length(x_ts))) {
w_i = (i-L+1):i
w_i = w_i[w_i>0]
xv = c(xv, t(rev(w[1:length(w_i)])) %*% sp[w_i])
}
plotl(xv)
E = sum((x_ts - xv)^2)
E
conv = function(x, w) {
xv = NULL
L = length(w)
for(i in 1:length(x)) {
w_i = (i-L+1):i
w_i = w_i[w_i>0]
xv = c(xv, t(rev(w[1:length(w_i)])) %*% x[w_i])
}
return(xv)
}
sp_c = conv(sp, w)
plotl(sp_c)
L:length(x_ts)
length(L:length(x_ts))
length(x_ts)-L+1
E = sum((x_ts - xv)^2)
Rxx = matrix(0, nrow=L, ncol=L)
rxd = rep(0, L)
for(i in L:length(x_ts)) {
w_i = (i-L+1):i
Rxx = Rxx + x_ts[w_i] %*% t(x_ts[w_i])
rxd = rxd + x_ts[w_i] * sp[w_i]
}
#Rxx = sapply(1:nrow(Rxx), function(i) rev(Rxx[i,]))
#rxd = rev(rxd)
Rxx = Rxx/(length(x_ts)-L+1)
rxd = rxd/(length(x_ts)-L+1)
w2 = ginv(Rxx) %*% rxd
sp_c2 = conv(sp, w2)
E2 = sum((x_ts - xv)^2)
plotl(sp_c2)
L = 100
big_id = which(rowSums(spikes) >= max(rowSums(spikes)))
sp = as.matrix(spikes[big_id[1], ])
sp_t = which(sp == 1)
x_ts = x_ts[1:100]
sp = sp[1:100]
w = as.matrix(exp(-(1:L)/10)) # default filter
filt = Vectorize(function(s, w) {
if(s<0) return(0)
if(s>=L) return(0)
w[s+1]
},"s")
conv = function(x, w) {
xv = NULL
L = length(w)
for(i in 1:length(x)) {
w_i = (i-L+1):i
w_i = w_i[w_i>0]
xv = c(xv, t(rev(w[1:length(w_i)])) %*% x[w_i])
}
return(xv)
}
sp_c = conv(sp, w)
plotl(sp_c)
E = sum((x_ts - xv)^2)
x_ts
E = sum((x_ts - sp_c)^2)
E
Rxx = matrix(0, nrow=L, ncol=L)
rxd = rep(0, L)
for(i in L:length(x_ts)) {
w_i = (i-L+1):i
Rxx = Rxx + x_ts[w_i] %*% t(x_ts[w_i])
rxd = rxd + x_ts[w_i] * sp[w_i]
}
#Rxx = sapply(1:nrow(Rxx), function(i) rev(Rxx[i,]))
#rxd = rev(rxd)
Rxx = Rxx/(length(x_ts)-L+1)
rxd = rxd/(length(x_ts)-L+1)
w2 = ginv(Rxx) %*% rxd
w2
plotl(w2)
sp_c2 = conv(sp, w2)
E2 = sum((x_ts - sp_c2)^2)
E2
plotl(sp_c2)
length(x_ts)-L+1
gr_pl(Rxx)
plotl(sp_c2)
x_ts = x_ts[1:200]
sp = sp[1:200]
w = as.matrix(exp(-(1:L)/10)) # default filter
filt = Vectorize(function(s, w) {
if(s<0) return(0)
if(s>=L) return(0)
w[s+1]
},"s")
conv = function(x, w) {
xv = NULL
L = length(w)
for(i in 1:length(x)) {
w_i = (i-L+1):i
w_i = w_i[w_i>0]
xv = c(xv, t(rev(w[1:length(w_i)])) %*% x[w_i])
}
return(xv)
}
sp_c = conv(sp, w)
plotl(sp_c)
x_ts = loadMatrix("~/prog/sim/ts/synthetic_control/synthetic_control_TRAIN_512",1)[1,]
x_ts =  2*(x_ts-min(x_ts))/(max(x_ts)-min(x_ts))-1
c(gain, bias) := generate_gain_and_bias(M, min(x_ts), max(x_ts), rate_low, rate_high)
gain = gain
bias = bias
big_id = which(rowSums(spikes) >= max(rowSums(spikes)))
sp = as.matrix(spikes[big_id[1], ])
sp_t = which(sp == 1)
x_ts = x_ts[1:200]
sp = sp[1:200]
w = as.matrix(exp(-(1:L)/10)) # default filter
filt = Vectorize(function(s, w) {
if(s<0) return(0)
if(s>=L) return(0)
w[s+1]
},"s")
conv = function(x, w) {
xv = NULL
L = length(w)
for(i in 1:length(x)) {
w_i = (i-L+1):i
w_i = w_i[w_i>0]
xv = c(xv, t(rev(w[1:length(w_i)])) %*% x[w_i])
}
return(xv)
}
sp_c = conv(sp, w)
plotl(sp_c)
E = sum((x_ts - sp_c)^2)
E
Rxx = matrix(0, nrow=L, ncol=L)
rxd = rep(0, L)
for(i in L:length(x_ts)) {
w_i = (i-L+1):i
Rxx = Rxx + x_ts[w_i] %*% t(x_ts[w_i])
rxd = rxd + x_ts[w_i] * sp[w_i]
}
#Rxx = sapply(1:nrow(Rxx), function(i) rev(Rxx[i,]))
#rxd = rev(rxd)
Rxx = Rxx/(length(x_ts)-L+1)
rxd = rxd/(length(x_ts)-L+1)
w2 = ginv(Rxx) %*% rxd
sp_c2 = conv(sp, w2)
E2 = sum((x_ts - sp_c2)^2)
E2
plotl(sp_c2)
w2
gr_pl(w2)
gr_pl(Rxx)
Rxx = matrix(0, nrow=L, ncol=L)
rxd = rep(0, L)
for(i in L:length(x_ts)) {
w_i = (i-L+1):i
Rxx = Rxx + x_ts[w_i] %*% t(x_ts[w_i])
rxd = rxd + x_ts[w_i] * sp[w_i]
}
Rxx = sapply(1:nrow(Rxx), function(i) rev(Rxx[i,]))
rxd = rev(rxd)
Rxx = Rxx/(length(x_ts)-L+1)
rxd = rxd/(length(x_ts)-L+1)
w2 = ginv(Rxx) %*% rxd
w2
sp_c2 = conv(sp, w2)
E2 = sum((x_ts - sp_c2)^2)
E2
gr_pl(Rxx)
rxd
w2 = w2/100
sp_c2 = conv(sp, w2)
E2 = sum((x_ts - sp_c2)^2)
plotl(sp_c2)
gr_pl(w2)
plotl(w2)
require(Rsnn)
M = 100
const_ini = "/home/alexeyche/prog/alexeyche-junk/cns/c/snn_sim/constants.ini"
N = 100
jobs = 4
statLevel = 0
const = RConstants$new(const_ini)
const$setValue("sim","M", M)
const$setValue("layer","N", N)
const$setValue("layer","neuron_type", "WtaLayer")
const$setValue("layer","learning_rule", "SimpleSTDP")
const$setValue("layer","prob_fun", "Exp")
const$setValue("layer","lrate", 0.04)
const$setValue("layer","weight_decay_factor", 0.015)
s = RSim$new(const, statLevel, jobs)
spikes = getSpikesFromMatrix(loadMatrix("/home/alexeyche/prog/sim/spikes/ucr/1_train_spikes",1))
spikes
loadMatrix("/home/alexeyche/prog/sim/spikes/ucr/1_train_spikes",2)
source('~/prog/alexeyche-junk/cns/R/srm/Rsnn_scripts/test.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/Rsnn_scripts/test.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/Rsnn_scripts/test.R', echo=TRUE)
max_ep = 5
>>>>>>> 121760ec00dbfd28ae5cc67124d16478b8a2832a
for(i in 1:max_ep) {
s$setInputSpikes(spikes)
out_sp = s$run()
cat(i,"\n")
}
stat = s$getLayerStat(0)
prast(out_sp,T0=0,Tmax=1000)
gr_pl(t(s$W()[[1]]))
<<<<<<< HEAD
max_ep = 100
for(i in 1:max_ep) {
s$setInputSpikes(spikes)
out_sp = s$run()
cat(i,"\n")
}
stat = s$getLayerStat(0)
#prast(out_sp,T0=0,Tmax=1000)
gr_pl(t(s$W()[[1]]))
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
prast(spikes,T0=0,Tmax=512)
spikes
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
prast(spikes,T0=0,Tmax=512)
spikes
source('~/prog/alexeyche-junk/cns/R/srm/Rsnn_scripts/test.R', echo=TRUE)
stat = s$getLayerStat(0)
#prast(out_sp,T0=0,Tmax=1000)
gr_pl(t(s$W()[[1]]))
source('~/prog/alexeyche-junk/cns/R/srm/Rsnn_scripts/test.R', echo=TRUE)
max_ep = 40
for(i in 1:max_ep) {
s$setInputSpikes(spikes)
out_sp = s$run()
cat(i,"\n")
}
stat = s$getLayerStat(0)
#prast(out_sp,T0=0,Tmax=1000)
gr_pl(t(s$W()[[1]]))
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/srm/Rsnn_scripts/test.R', echo=TRUE)
=======
const$setValue("layer","net_edge_prob", 1.0)
const
source('~/prog/alexeyche-junk/cns/R/srm/Rsnn_scripts/test.R', echo=TRUE)
gr_pl(s$W()[[1]])
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
setwd("~/prog/alexeyche-junk/cns/R/filt")
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
gr_pl(spikes)
require(Rsnn)
gr_pl(spikes)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
prast(spikes)
plot_tuning_curves(encoder, gain, bias)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
prast(spikes)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
prast(spikes)
x=seq(-1,1)
x
x=seq(-1,1, length.out=100)
x
delta = 10
mu = 0
exp(-(x-mu)^2/delta)
y=exp(-(x-mu)^2/delta)
plolt(y)
plotl(y)
plotl(x,y)
plot(x,y, type="l")
delta = 1
mu = 0
y=exp(-(x-mu)^2/delta)
plot(x,y, type="l")
delta = 1
mu = 0
y=exp(-(x-mu)^2/(2*delta^2))
plot(x,y, type="l")
pi
y=exp(-(x-mu)^2/(2*delta^2))/(delta*sqrt(2*pi))
plot(x,y, type="l")
y=exp(-(x-mu)^2/(2*delta^2))
plot(x,y, type="l")
x=seq(-5,5,length.out=1000)
y=exp(-(x-mu)^2/(2*delta^2))
plot(x,y, type="l")
X
gaussFun = function(x, mu, delta) {
exp(-(x-mu)^2/(2*delta^2))
}
gaussFun = Vectorize(function(x, mu, delta) {
exp(-(x-mu)^2/(2*delta^2))
},"x")
gaussFun(X, 0, 1)
plotl(gaussFun(X, 0, 1))
plotl(gaussFun(X, 2, 1))
plotl(gaussFun(X, 3, 1))
plotl(gaussFun(X, 3, 4))
plotl(gaussFun(X, 3, 10))
plotl(X)
plotl(gaussFun(X, 3, 1))
plotl(gaussFun(X, 4, 1))
plotl(gaussFun(X, 7, 1))
plotl(gaussFun(X, 7, 2))
plotl(gaussFun(X, 7, 1))
gaussFun = Vectorize(function(x, mu, delta) {
exp(-(x-mu)^2/(2*delta^2))
},"mu")
plotl(gaussFun(X[1], seq(-5,5,length.out=M), 1))
X[1]
act = gaussFun(X[1], seq(-5,5,length.out=M), 1)
act
centers = seq(-5,5,length.out=M)
centers
act = gaussFun(X[1], centers, 1)
plot(centers,act,type="l")
plot(centers,gaussFun(X[2], centers, 1),type="l")
plot(centers,gaussFun(X[3], centers, 1),type="l")
plot(centers,gaussFun(centers[1], centers, 1),type="l")
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
prast(spikes)
plotl(gaussFun(x, centers, delta))
x
plotl(gaussFun(x, centers, 3))
plotl(gaussFun(x, centers, 0.1))
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
prast(spikes)
source('~/prog/alexeyche-junk/cns/R/filt/nengo.R', echo=TRUE)
plot_tuning_curves(encoder,gain,bias)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
plot_tuning_curves(encoder,gain,bias)
source('~/prog/alexeyche-junk/cns/R/filt/nengo.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/nengo.R', echo=TRUE)
plot_tuning_curves(encoder,gain,bias)
source('~/prog/alexeyche-junk/cns/R/filt/nengo.R', echo=TRUE)
plot_tuning_curves(encoder,gain,bias)
gaussFun(x, centers, delta)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
plot_tuning_curves(encoder,gain,bias)
x=X[i]
n = list(v=rep(0, M), ref=rep(0,M))
n$v = runif(M)
count = rep(0, M)
#input = x * encoder * gain + bias
input = gaussFun(x, centers, delta) #* encoder * gain + bias
input
source('~/prog/alexeyche-junk/cns/R/filt/nengo.R', echo=TRUE)
plot_tuning_curves(encoder,gain,bias)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
plot_tuning_curves(encoder,gain,bias)
source('~/prog/alexeyche-junk/cns/R/filt/nengo.R', echo=TRUE)
plot_tuning_curves(encoder,gain,bias)
source('~/prog/alexeyche-junk/cns/R/filt/nengo.R', echo=TRUE)
plot_tuning_curves(encoder,gain,bias)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
prast(spikes)
spikes
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
spikes
prast(spikes)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
prast(spikes,T0=0,Tmax=120)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
plolt(X[1:120])
plotl(X[1:120])
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
prast(spikes,T0=120,Tmax=240)
plotl(X[120:240])
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
plotl(X[1:120])
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
plotl(gaussFun(x, centers, delta))
gaussFun = Vectorize(function(x, mu, delta) {
exp(-(x-mu)^2/(2*delta^2))
},c("mu","delta"))
plotl(gaussFun(x, centers, delta))
plotl(gaussFun(x, centers, seq(0.1,0.2,length.out=M))
plotl(gaussFun(x, centers, seq(0.1,0.2,length.out=M)))
plotl(gaussFun(x, centers, seq(0.1,0.5,length.out=M)))
x
plotl(gaussFun(0.0, centers, seq(0.1,0.5,length.out=M)))
source('~/prog/alexeyche-junk/cns/R/filt/nengo.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
plot(X[1:120])
points(X[1:120])
prast(spikes,T0=0,Tmax=120)
points(X[1:120])
plot(X[1:120])
>>>>>>> 121760ec00dbfd28ae5cc67124d16478b8a2832a
