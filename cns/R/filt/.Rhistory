per_url_stat[[1]]$numeratortrigger
per_url_stat[[2]]$numeratortrigger
per_url_stat[[3]]$numeratortrigger
source('~/prog/json_stat_read.R', echo=TRUE)
rss[n][[1]]$t
rss[n][[1]]$t
source('~/prog/json_stat_read.R', echo=TRUE)
rss[n][[1]]$t
per_url_stat[[3]]$numeratortrigger
per_url_stat[[1]]$numeratortrigger
per_url_stat[[2]]$numeratortrigger
per_url_stat[[3]]$numeratortrigger
per_url_stat[[1]]$numeratortrigger
test_name <- "numeratortrigger"
per_url_stat[[1]][test_name]
for(i in 2:length(per_url_stat)) {
per_url_stat[[i]][test_name]
}
per_url_stat[[1]][test_name]
per_url_stat[[1]][[test_name]]
source('~/prog/json_stat_read.R', echo=TRUE)
source('~/prog/json_stat_read.R', echo=TRUE)
source('~/prog/json_stat_read.R', echo=TRUE)
?rainbow
rainbow(3)
source('~/prog/json_stat_read.R', echo=TRUE)
source('~/prog/json_stat_read.R', echo=TRUE)
source('~/prog/json_stat_read.R', echo=TRUE)
sort
sort(c(1,2,3)
sort(c(1,2,3)()
sort(c(1,2,3))
tail(c(1,2,3))
tail(c(1,2,3),1)
for(n in names(per_url_stat[[1]])){
per_url_stat[[1]][[n]][,2]
}
for(n in names(per_url_stat[[1]])){
print(sum(per_url_stat[[1]][[n]][,2]))
}
per_url_stat[[1]][[n]][,2]
per_url_stat[[1]][[2]][,2]
per_url_stat[[1]][[3]][,2]
df = data.frame()
for(n in names(per_url_stat[[1]])){
df$name = cbind(df$name, n)
df$sum_rss  = cbind(df$sum_rss, sum(per_url_stat[[1]][[n]][,2]))
}
source('~/prog/json_stat_read.R', echo=TRUE)
df
n
sum(per_url_stat[[1]][[n]][,2]))
sum(per_url_stat[[1]][[n]][,2])
c("123", sum(per_url_stat[[1]][[n]][,2]))
source('~/prog/json_stat_read.R', echo=TRUE)
df
?order
with(df, order(-sum_rss))
df[with(df, order(-sum_rss))]
df[with(df, order(-sum_rss)), ]
source('~/prog/json_stat_read.R', echo=TRUE)
df
source('~/prog/json_stat_read.R', echo=TRUE)
df[1,]
df[1,]$name
source('~/prog/json_stat_read.R', echo=TRUE)
source('~/prog/json_stat_read.R', echo=TRUE)
?plot
source('~/prog/json_stat_read.R', echo=TRUE)
sapply(1:length(per_url_stat)), function(i) per_url_stat[[i]][[test_name]][1,])
sapply(1:length(per_url_stat), function(i) per_url_stat[[i]][[test_name]][1,])
max_t <- max(sapply(1:length(per_url_stat), function(i) per_url_stat[[i]][[test_name]][,1]))
sapply(1:length(per_url_stat), function(i) per_url_stat[[i]][[test_name]][,1])
per_url_stat[[i]][[test_name]]
per_url_stat[[i]][[test_name]][,1]
per_url_stat[[i]][[test_name]][1,]
max_t <- max(sapply(1:length(per_url_stat), function(i) max(per_url_stat[[i]][[test_name]][,1])))
max_t
source('~/prog/json_stat_read.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
per_url_stat[[1]][["directtexttrigger"]]
per_url_stat[[2]][["directtexttrigger"]]
per_url_stat[[3]][["directtexttrigger"]]
source('~/prog/json_stat_read.R', echo=TRUE)
source('~/prog/json_stat_read.R', echo=TRUE)
ti
test_name <- df[ti,]$name
test_name
max_t <- max(sapply(1:length(per_url_stat), function(i) max(per_url_stat[[i]][[test_name]][,1])))
max_rss <- max(sapply(1:length(per_url_stat), function(i) max(per_url_stat[[i]][[test_name]][,2])))
min_rss <- min(sapply(1:length(per_url_stat), function(i) min(per_url_stat[[i]][[test_name]][,2])))
max_t
cols = rainbow(length(per_url_stat))
url_i<-1
plot(per_url_stat[[url_i]][[test_name]], type="l", col=cols[url_i], main=test_name, xlim=c(0, max_t),ylim=c(min_rss,max_rss) )
url_i
url_i=2
per_url_stat[[url_i]][[test_name]]
lines(per_url_stat[[url_i]][[test_name]],  col=cols[url_i])
per_url_stat[[1]][test_name]
per_url_stat[[2]][test_name]
per_url_stat[[3]][test_name]
test_name
per_url_stat[[3]][[test_name]]
per_url_stat[[2]][[test_name]]
per_url_stat[[1]][[test_name]]
per_url_stat[[1]]
per_url_stat[[1]]$nameextractortrigger
per_url_stat[[2]]$nameextractortrigger
per_url_stat[[3]]$nameextractortrigger
per_url_stat[[3]][[test_name]]
test_name
str(test_name)
df[1,]
df[1,]$name
as.string(df[1,]$name)
?df[1,]$name
str(df[1,]$name)
attributes(test_name)
names(df)
df[["name"]]
df[["name"]][1,]
df[["name"]][1]
str(df[["name"]][1])
df[["name"]][1]
df[["name"]][1][1]
as.character(df[1,]$name)
source('~/prog/json_stat_read.R', echo=TRUE)
cols
per_url_stat[[1]][["mergedatacontainers"]]
plot(per_url_stat[[1]][["mergedatacontainers"]])
source('~/prog/json_stat_read.R', echo=TRUE)
per_url_stat[[1]][["mergedatacontainers"]]
source('~/prog/json_stat_read.R', echo=TRUE)
source('~/prog/json_stat_read.R', echo=TRUE)
source('~/prog/json_stat_read.R', echo=TRUE)
source('~/prog/json_stat_read.R', echo=TRUE)
source('~/prog/json_stat_read.R', echo=TRUE)
source('~/prog/json_stat_read.R', echo=TRUE)
per_url_stat[[1]][["urlsegtrigger"]]
source('~/prog/json_stat_read.R', echo=TRUE)
source('~/prog/json_stat_read.R', echo=TRUE)
n
n %in% tests_to_ignore
! n %in% tests_to_ignore
source('~/prog/json_stat_read.R', echo=TRUE)
n
rss[[n]]
rss
source('~/prog/json_stat_read.R', echo=TRUE)
source('~/prog/json_stat_read.R', echo=TRUE)
source('~/prog/json_stat_read.R', echo=TRUE)
source('~/prog/json_stat_read.R', echo=TRUE)
source('~/prog/json_stat_read.R', echo=TRUE)
source('~/prog/json_stat_read.R', echo=TRUE)
source('~/prog/json_stat_read.R', echo=TRUE)
min(rss[[n]]$rss)
rss[[n]]$rss
rss[[n]]$rss
per_url_stat[[1]][["phonenumbertrigger"]]
per_url_stat[[2]][["phonenumbertrigger"]]
per_url_stat[[3]][["phonenumbertrigger"]]
per_url_stat[[4]][["phonenumbertrigger"]]
source('~/prog/json_stat_read.R', echo=TRUE)
r0
r0
r0[r0 > 0]
r0
r0-min(r0)
source('~/prog/json_stat_read.R', echo=TRUE)
cbind(rss[[n]]$t-min(rss[[n]]$t), r0-min(r0), rss[[n]]$pid)
as.matrix( cbind(rss[[n]]$t-min(rss[[n]]$t), r0-min(r0), rss[[n]]$pid) )
source('~/prog/json_stat_read.R', echo=TRUE)
warnings()
source('~/prog/json_stat_read.R', echo=TRUE)
r0 <- r0[r0 > 0]
r0
matrix( c(rss[[n]]$t-min(rss[[n]]$t), r0-min(r0), rss[[n]]$pid), ncol=3 )
source('~/prog/json_stat_read.R', echo=TRUE)
source('~/prog/json_stat_read.R', echo=TRUE)
source('~/prog/json_stat_read.R', echo=TRUE)
source('~/prog/json_stat_read.R', echo=TRUE)
source('~/prog/json_stat_read.R', echo=TRUE)
source('~/prog/json_stat_read.R', echo=TRUE)
source('~/prog/json_stat_read.R', echo=TRUE)
per_url_stat[["prewalrusinternal"]]
per_url_stat[[1]][["prewalrusinternal"]]
per_url_stat[[1]][["prewalrusinternal"]][,2]
mean(per_url_stat[[1]][["prewalrusinternal"]][,2])
sd(per_url_stat[[1]][["prewalrusinternal"]][,2])
min(per_url_stat[[1]][["prewalrusinternal"]][,2])
max(per_url_stat[[1]][["prewalrusinternal"]][,2])
max(per_url_stat[[1]][["prewalrusinternal"]][,2])
max(per_url_stat[[1]][["prewalrusinternal"]][,2])
min(per_url_stat[[1]][["prewalrusinternal"]][,2])
diff(per_url_stat[[1]][["prewalrusinternal"]][,2])
plot(diff(per_url_stat[[1]][["prewalrusinternal"]][,2]), type="l")
plot(diff(per_url_stat[[1]][["portiontrigger"]][,2]), type="l")
?diff
plot(diff(per_url_stat[[1]][["portiontrigger"]][,2], lag=10), type="l")
plot(diff(per_url_stat[[1]][["portiontrigger"]][,2], lag=10), type="l")
plot(diff(per_url_stat[[1]][["portiontrigger"]][,2], lag=10), type="l")
plot(diff(per_url_stat[[1]][["portiontrigger"]][,2], lag=5), type="l")
source('~/prog/json_stat_read.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/weiner_test.R', echo=TRUE)
list(c(1,2,3,4), c(2,4,6,8))
ll = list(c(1,2,3,4), c(2,4,6,8))
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
setwd("~/prog/alexeyche-junk/cns/R/filt")
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
spikes
gr_pl(spikes)
dim(spikes)
source('~/prog/alexeyche-junk/cns/R/filt/optimize_filt_vec.R', echo=TRUE)
install.packages('lbfgs'])
install.packages('lbfgs')
source('~/prog/alexeyche-junk/cns/R/filt/optimize_filt_vec.R', echo=TRUE)
1e-02
source('~/.active-rstudio-document', echo=TRUE)
d = conv_mat(mean_area,y,w_opt)
plot(d, type="l")
lines(x, col="red")
mean_area
area_cut = mean_area
if(length(area_cut) > 200) {
area_cut = area_cut[1:200]
}
d = conv_mat(area_cut,y,w_opt)
plot(d, type="l")
lines(x[area_cut], col="red")
d = conv_mat(area_cut,y,w_opt)
plot(x[area_cut], type="l", col="red")
lines(d)
plot(x[area_cut], type="l", col="red")
lines(d)
source('~/prog/alexeyche-junk/cns/R/filt/optimize_filt_vec.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/optimize_filt_vec.R', echo=TRUE)
d = conv_mat(area_cut,y,w_opt)
plot(x[area_cut], type="l", col="black")
lines(d, col="red")
plot(x[area_cut], type="l", col="black", lwd=10)
plot(x[area_cut], type="l", col="black", lwd=2)
lines(d, col="red")
source('~/prog/alexeyche-junk/cns/R/filt/optimize_filt_vec.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/optimize_filt_vec.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/optimize_filt_vec.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/optimize_filt_vec.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/R/filt/optimize_filt_vec.R', echo=TRUE)
gr_pl(w_opt)
dim(w_opt)
w_opt
m_E(w_opt)
as.matrix(w_opt, nrow=100)
ww = as.matrix(w_opt, nrow=100)
dim(ww)
ww = matrix(w_opt, nrow=100)
dim(ww)
ww = matrix(w_opt, nrow=25)
dim(ww)
gr_pl(ww)
plotl(ww[1,])
plotl(ww[2,])
plotl(ww[3,])
plotl(ww[4,])
plotl(ww[5,])
plotl(ww[6,])
plotl(ww[7,])
plotl(ww[6,])
plotl(ww[7,])
source('~/prog/alexeyche-junk/cns/R/filt/optimize_filt_vec.R', echo=TRUE)
w_opt
plotl(w_opt)
source('~/prog/alexeyche-junk/cns/R/filt/main.R', echo=TRUE)
spieks
spikes
source('~/prog/alexeyche-junk/cns/R/filt/optimize_filt_vec.R', echo=TRUE)
p_signal = sum(abs(X)^2)/length(X)
p_signal
p_noise = sd(d-x)^2
p_noise
snr_time = 10*log10(p_signal/p_noise)
snr_time
source('util.R')
L = 20
y = spikes
x = X
M = nrow(spikes)
#w = matrix(rep(exp(-(1:L)/2),M), nrow=M, ncol=L, byrow=TRUE) # default filter
w = matrix(0, nrow=M, ncol=L) # default filter
cut_window_mat = function(i,x) {
w_i = rev((i-L+1):i)
w_i = w_i[w_i>0]
return(matrix(x[,w_i], nrow=M, ncol=length(w_i)))
}
conv_mat = Vectorize(function(i, y, w) {
yc = cut_window_mat(i,y)
wc = matrix(w[1:length(yc)], nrow=M, ncol=ncol(yc))
sum(sapply(1:M, function(i) t(wc[i, ]) %*% yc[i,]))
}, "i")
E_vec = Vectorize(function(i, x, y, w) {
(x[i]- conv_mat(i,y,w))^2
},"i")
dEdw_vec = Vectorize(function(i, x, y, w) { # x = d
yc = cut_window_mat(i,y)
gr = -2 * ( x[i] - conv_mat(i, y, w) ) * yc
cbind(gr, matrix(0, M, L-ncol(gr)) )
},"i", SIMPLIFY=FALSE)
mean_area = 1:length(x)
m_E = function(w) {
mean(  E_vec(mean_area,x,y,w) )
}
m_dEdw = function(w) {
dEdw_whole = dEdw_vec(mean_area, x, y, w)
Reduce("+", dEdw_whole)/length(dEdw_whole)
}
require(lbfgs)
out = lbfgs(m_E, m_dEdw, w, ftol=1e-02)
w_opt = out$par
#opt_res = optim(w, m_E, m_dEdw, method="BFGS",control=list(trace=1), hessian=FALSE)
#w_opt = opt_res$par
area_cut = mean_area
if(length(area_cut) > 200) {
area_cut = area_cut[1:200]
}
d = conv_mat(area_cut,y,w_opt)
plot(x[area_cut], type="l", col="black", lwd=2)
lines(d, col="red")
p_signal = sum(abs(x)^2)/length(X)
p_noise = sd(d-x)^2
snr_time = 10*log10(p_signal/p_noise)
p_signal
p_noise
snr_time = 10*log10(p_signal/p_noise)
snr_time
source('filt_funcs.R')
nextpow2(length(x))
2^nextpow2(length(x))
length(x)
G0 = fft(g0, NFFT)
g0 = x
g1 = d
p_signal = sum(abs(g0)^2)/length(X)
p_noise = sd(g1-g0)^2
snr_time = 10*log10(p_signal/p_noise)
NFFT = 2^nextpow2(length(x))
G0 = fft(g0, NFFT)
G0
length(G0)
?fft
G0 = fft(g0)
G0
fftshift
install.packages('SynchWave')
require(SynchWave)
?fftshift
plot(abs(G0))
plot(abs(fftshift(G0)))
G0_dB = 20*log10(abs(G0))
plotl(G0_dB)
5/2*3
f = Fs/2*seq(-1,1,length.out=L)
Fs = 1000 # Hz, sampling rate
f = Fs/2*seq(-1,1,length.out=L)
f
length(G0)
Fs = 1000 # Hz, sampling rate
f = Fs/2*seq(-1,1,length.out=L)
p_signal_f = sum(abs(G0)^2)/length(G0)
p_noise_f = sd( abs((G1-G0))^2 )
snr_freq = 10*log10(p_signal_f/p_noise_f)
G0 = fft(g0)/L
G0 = fftshift(G0)
G0_dB = 20*log10(abs(G0))
G1 = fft(g1)/L
G1 = fftshift(G1)
G1_dB = 20*log10(abs(G1))
Fs = 1000 # Hz, sampling rate
f = Fs/2*seq(-1,1,length.out=L)
p_signal_f = sum(abs(G0)^2)/length(G0)
p_noise_f = sd( abs((G1-G0))^2 )
snr_freq = 10*log10(p_signal_f/p_noise_f)
snr_freq
snr_tim
snr_time
plot(f, G0_dB, type="l")
length(f)
L
L = length(x)
g0 = x
g1 = d
L = length(x)
p_signal = sum(abs(g0)^2)/L
p_noise = sd(g1-g0)^2
snr_time = 10*log10(p_signal/p_noise)
G0 = fft(g0)/L
G0 = fftshift(G0)
G0_dB = 20*log10(abs(G0))
G1 = fft(g1)/L
G1 = fftshift(G1)
G1_dB = 20*log10(abs(G1))
Fs = 1000 # Hz, sampling rate
f = Fs/2*seq(-1,1,length.out=L)
p_signal_f = sum(abs(G0)^2)/length(G0)
p_noise_f = sd( abs((G1-G0))^2 )
snr_freq = 10*log10(p_signal_f/p_noise_f)
snr_time
snr_freq
plot(f, G0, type="l")
plot(f, G0_dB, type="l")
plot(f, G1_dB, type="l")
G1_dB
length(G1_dB)
g1
area_cut = mean_area
if(length(area_cut) > 200) {
area_cut = area_cut[1:200]
}
d = conv_mat(mean_area,y,w_opt)
plot(x[area_cut], type="l", col="black", lwd=2)
lines(d[area_cut], col="red")
source('filt_funcs.R')
require(SynchWave)
g0 = x
g1 = d
L = length(x)
p_signal = sum(abs(g0)^2)/L
p_noise = sd(g1-g0)^2
snr_time = 10*log10(p_signal/p_noise)
snr_time
d
w_opt
L
L = 20
y = spikes
x = X
M = nrow(spikes)
#w = matrix(rep(exp(-(1:L)/2),M), nrow=M, ncol=L, byrow=TRUE) # default filter
w = matrix(0, nrow=M, ncol=L) # default filter
area_cut = mean_area
if(length(area_cut) > 200) {
area_cut = area_cut[1:200]
}
d = conv_mat(mean_area,y,w_opt)
plot(x[area_cut], type="l", col="black", lwd=2)
lines(d[area_cut], col="red")
source('filt_funcs.R')
require(SynchWave)
g0 = x
g1 = d
x
d
g0 = x
g1 = d
p_signal = sum(abs(g0)^2)/length(x)
p_noise = sd(g1-g0)^2
snr_time = 10*log10(p_signal/p_noise)
snr_time
p_signal
p_noise
G0 = fft(g0)/length(x)
G0 = fftshift(G0)
G0_dB = 20*log10(abs(G0))
G1 = fft(g1)/length(x)
G1 = fftshift(G1)
G1_dB = 20*log10(abs(G1))
Fs = 1000 # Hz, sampling rate
f = Fs/2*seq(-1,1,length.out=length(x))
plot(f, G0_dB, type="l")
plot(f, G1_dB, type="l")
plot(f, G0_dB, type="l")
lines(f, G1_dB, col="red")
p_signal_f = sum(abs(G0)^2)/length(G0)
p_noise_f = sd( abs((G1-G0))^2 )
snr_freq = 10*log10(p_signal_f/p_noise_f)
snr_freq
length(G0)
f
plot(f, G0_dB, type="l")
lines(f, G1_dB, col="red")
plot(f, G0_dB, type="l")
plot(f, G1_dB, type="l")
snr_freq1 = max(G1_dB) - 10*log10(p_noise_f) - 10*log10(length(x)/2)
snr_freq1
max(G1_dB)
10*log10(p_noise_f)
10*log10(length(x)/2)
p_noise_f1 = sum( abs(G1-G0)^2 )
snr_freq2 = max(G1_dB) - 10*log10(p_noise_f1) - 10*log10(length(x)/2)
snr_freq
snr_freq2
max(G1_dB)
G1_dB
G1
plotl(G1)
plotl(abs(G1))
plotl(abs(G0))
plotl(f,abs(G0))
plot(f,abs(G0), type="l")
plot(f,abs(G1), type="l")
snr_freq
sum(abs(G0)^2)/length(G0)
abs(G0)^2
sum(abs(G0)^2)/length(G0)
sd( G1-G0^2 )
p_noise_f = sd( abs(G1-G0)^2 )
p_noise_f
