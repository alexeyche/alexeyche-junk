{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ltp",
				"ltp_mod"
			],
			[
				"de",
				"defaultLtMod"
			],
			[
				"weight",
				"weight_normalization"
			],
			[
				"lt",
				"ltp_mod"
			],
			[
				"We",
				"WeightDerivative"
			],
			[
				"ta",
				"tau_minus"
			],
			[
				"addSyn",
				"addSynapseAtPos"
			],
			[
				"addS",
				"addSynapse"
			],
			[
				"Opt",
				"OptimalStdp"
			],
			[
				"add",
				"added_synapses"
			],
			[
				"conn",
				"connections_established"
			],
			[
				"propa",
				"propagateSynSpike"
			],
			[
				"seriali",
				"serialization"
			],
			[
				"Optim",
				"OptimalStdpStat"
			],
			[
				"wei",
				"weight_normalizations"
			],
			[
				"E",
				"EOptimalStdp"
			],
			[
				"Ser",
				"Serializable"
			],
			[
				"glob",
				"glob_c"
			],
			[
				"mean",
				"mean_p_dur"
			],
			[
				"mea",
				"mean_p_dur"
			],
			[
				"sim",
				"sim_time"
			],
			[
				"pre",
				"preModifyMeasure"
			],
			[
				"mod",
				"modifyWeightDerivative"
			],
			[
				"tar",
				"target_rate"
			],
			[
				"Op",
				"OptimalStdpStat"
			],
			[
				"EM",
				"EMeanActivityHomeostasis"
			],
			[
				"Min",
				"MinMaxC"
			],
			[
				"Me",
				"MeanActivityHomeostasis"
			],
			[
				"w_m",
				"w_max"
			],
			[
				"aff",
				"aff_post"
			],
			[
				"Re",
				"RewardModConf"
			],
			[
				"layer",
				"layers"
			],
			[
				"cons",
				"constants"
			],
			[
				"MaxLi",
				"MaxLikelihoodStat"
			],
			[
				"col",
				"collectStatistics"
			],
			[
				"el",
				"eligibility_trace"
			],
			[
				"dLL",
				"dLLH_dw_formula"
			],
			[
				"LLH",
				"LLH_formula"
			],
			[
				"glo",
				"globalInstance"
			],
			[
				"learni",
				"learning_rate"
			],
			[
				"lea",
				"learning_rate"
			],
			[
				"learn",
				"learning_rate"
			],
			[
				"ac",
				"active_synapses"
			],
			[
				"Neur",
				"Neuron"
			],
			[
				"neur",
				"neuron_prepared_reward"
			],
			[
				"save",
				"saveStat"
			],
			[
				"Rewa",
				"RewardControl"
			],
			[
				"Sera",
				"SerialPack"
			],
			[
				"coll",
				"collectStat"
			],
			[
				"Rew",
				"RewardStat"
			],
			[
				"rewa",
				"reward_layers_to_listen"
			],
			[
				"rew",
				"reward_layers_to_listen"
			],
			[
				"Prot",
				"ProtoPack"
			],
			[
				"Pro",
				"ProtoRw"
			],
			[
				"read",
				"readAllocated"
			],
			[
				"me",
				"mean_r"
			],
			[
				"act",
				"active_layers"
			],
			[
				"neu",
				"neuron"
			],
			[
				"post",
				"post_id_it"
			],
			[
				"pos",
				"post_id_it"
			],
			[
				"rewar",
				"reward_control"
			],
			[
				"Lay",
				"LayerModulatedReward"
			],
			[
				"Jso",
				"JsonBox::Object"
			],
			[
				"size",
				"size_t"
			],
			[
				"rein",
				"reinforce_map"
			],
			[
				"print",
				"print_vector"
			],
			[
				"del",
				"delimiter"
			],
			[
				"stru",
				"struct_name"
			],
			[
				"null",
				"nullptr"
			],
			[
				"Run",
				"RuntimeGlobals"
			],
			[
				"tau",
				"tau_mean_rew"
			],
			[
				"inp",
				"input_target"
			],
			[
				"input_t",
				"input_target"
			],
			[
				"epi",
				"episode_length"
			],
			[
				"num",
				"num_of_episodes"
			],
			[
				"globa",
				"global_id"
			],
			[
				"thread",
				"thread_id"
			],
			[
				"Syn",
				"SynSpike"
			],
			[
				"ser",
				"serialized_messages"
			],
			[
				"ope",
				"operator"
			],
			[
				"input",
				"input_ts_list"
			],
			[
				"Spik",
				"SpikesQueue"
			],
			[
				"reset",
				"resetNeuron"
			],
			[
				"start",
				"start_ni"
			],
			[
				"input_ts",
				"input_ts_list"
			],
			[
				"inc",
				"incWeightFactors"
			],
			[
				"readM",
				"readMessage"
			],
			[
				"wri",
				"writeMessage"
			],
			[
				"runt",
				"runtime_globals"
			],
			[
				"Seri",
				"SerialFamily"
			],
			[
				"Sy",
				"Synapse"
			],
			[
				"Proto",
				"ProtoRw"
			],
			[
				"Conf",
				"ConfObj"
			],
			[
				"stat",
				"statLimit"
			],
			[
				"get",
				"getStat"
			],
			[
				"names",
				"names_size"
			],
			[
				"en",
				"enableCollectStatistics"
			],
			[
				"la",
				"layer_size"
			],
			[
				"__",
				"__global_id"
			],
			[
				"net",
				"net_queues"
			],
			[
				"thr",
				"thread_id"
			],
			[
				"to",
				"total_size"
			],
			[
				"qu",
				"queue_spinlocks"
			],
			[
				"inpu",
				"input_neurons_count"
			],
			[
				"run",
				"runSimOnSubset"
			],
			[
				"out",
				"out_spikes"
			],
			[
				"sp",
				"sp_list"
			],
			[
				"Labe",
				"LabeledTimeSeriesList"
			],
			[
				"Label",
				"LabeledTimeSeriesList"
			],
			[
				"te",
				"terminate"
			],
			[
				"file",
				"filename"
			],
			[
				"seri",
				"serialize"
			],
			[
				"Neuron",
				"NeuronStat"
			],
			[
				"Neuro",
				"NeuronStat"
			],
			[
				"fro",
				"from_where"
			],
			[
				"zer",
				"zeroOut"
			],
			[
				"cod",
				"codedOut"
			],
			[
				"Read",
				"ReadVarint32"
			],
			[
				"code",
				"codedIn"
			],
			[
				"coded",
				"codedOut"
			],
			[
				"Syna",
				"SynapseC"
			],
			[
				"calc",
				"calculateDynamics"
			],
			[
				"neuo",
				"neurons"
			],
			[
				"syn",
				"syn_id"
			],
			[
				"Bal",
				"BlankTuningCurve"
			],
			[
				"Blank",
				"BlankTuningCurve"
			],
			[
				"tuning",
				"tuning_curve"
			],
			[
				"SRMLa",
				"SRMLayer"
			]
		]
	},
	"buffers":
	[
		{
			"file": "sources/snnlib/learning/learning_rule.h",
			"settings":
			{
				"buffer_size": 1481,
				"line_ending": "Unix"
			}
		},
		{
			"file": "sources/snnlib/learning/stdp.h",
			"settings":
			{
				"buffer_size": 4536,
				"line_ending": "Unix"
			}
		},
		{
			"file": "sources/snnlib/learning/optimal_stdp.h",
			"settings":
			{
				"buffer_size": 6349,
				"line_ending": "Unix"
			}
		},
		{
			"file": "sources/snnlib/config/constants.h",
			"settings":
			{
				"buffer_size": 22625,
				"line_ending": "Unix"
			}
		},
		{
			"file": "sources/tools/sim/snn_sim.cpp",
			"settings":
			{
				"buffer_size": 5359,
				"line_ending": "Unix"
			}
		},
		{
			"file": "sources/snnlib/sim/sim.h",
			"settings":
			{
				"buffer_size": 5836,
				"line_ending": "Unix"
			}
		},
		{
			"file": "sources/snnlib/serialize/serialize.h",
			"settings":
			{
				"buffer_size": 7563,
				"line_ending": "Unix"
			}
		},
		{
			"file": "sources/snnlib/protos/spikes_list.proto",
			"settings":
			{
				"buffer_size": 290,
				"line_ending": "Unix"
			}
		},
		{
			"file": "sources/snnlib/protos/time_series.proto",
			"settings":
			{
				"buffer_size": 424,
				"line_ending": "Unix"
			}
		},
		{
			"file": "sources/snnlib/util/time_series.h",
			"settings":
			{
				"buffer_size": 6886,
				"line_ending": "Unix"
			}
		},
		{
			"file": "sources/snnlib/util/spikes_list.h",
			"settings":
			{
				"buffer_size": 3492,
				"line_ending": "Unix"
			}
		},
		{
			"file": "sources/snnlib/neurons/synapse.h",
			"settings":
			{
				"buffer_size": 1143,
				"line_ending": "Unix"
			}
		},
		{
			"file": "sources/snnlib/neurons/synapse.cpp",
			"settings":
			{
				"buffer_size": 460,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/User/make.sublime-build",
	"command_palette":
	{
		"height": 75.0,
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"Ctag",
				"CTags: Show Symbols (all)"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"pac",
				"Preferences: Browse Packages"
			],
			[
				"Package Control: ",
				"Package Control: Remove Package"
			],
			[
				"CTa",
				"CTags: Show Symbols (all)"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"",
				"Package Control: Install Package"
			],
			[
				"Pack",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/act_funcs",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/config",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/layers",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/learning",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/neurons",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/protos",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/reinforcement",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/serialize",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/sim",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/tuning_curves"
	],
	"file_history":
	[
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/tuning_curves/tuning_curve.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/layers/layer.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/util/fast_delegate_bind.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/base.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/util/time_series.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/util/spikes_queue.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/sim/sim.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/config/factory.cpp",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/weight_normalizations/weight_normalization.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/core.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/learning/stdp.cpp",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/learning/optimal_stdp.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/config/factory.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/learning/max_likelihood.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/neurons/neuron.cpp",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/weight_normalizations/min_max.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/neurons/neuron.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/learning/stdp.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/serialize/serialize.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/config/constants.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/learning/max_likelihood.cpp",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/learning/learning_rule.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/learning/CMakeLists.txt",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/protos/stat.proto",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/reinforcement/likelihood.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/config/constants.cpp",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/learning/optimal_stdp.cpp",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/learning/stdp_all_to_all.cpp",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/protos/model.proto",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/sim/sim.cpp",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/neurons/srm_neuron.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/act_funcs/exp_hennequin.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/tools/testproto/out.pb",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/tools/testproto/main.cpp",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/learning/srm_methods.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/tuning_curves/sigma_tuning_curve.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/util/util.cpp",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/neurons/adex_neuron.cpp",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/learning/min_max.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/learning/mean_activity_homeostasis.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/reinforcement/reward_modulation.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/neurons/synapse.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/neurons/adex_neuron.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/tools/sim/snn_sim.cpp",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/neurons/neuron_stat.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/sim/runtime_globals.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/build/snnlib/protos/stat.pb.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/util/util.h",
		"/home/alexeyche/prog/snn_sim/sources/snnlib/learn/optim.c",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/serialize/serialize.cpp",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/const.json",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/reinforcement/input_classification.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/learning/weight_normalization.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/sim/reward_control.cpp",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/sim/reward_control.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/neurons/neuron_stat.cpp",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/sim/runtime_globals.cpp",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/util/fast_delegate.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/serialize/proto_rw.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/CMakeLists.txt",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/sim/network.cpp",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/neurons/synapse.cpp",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/util/fastapprox/cast.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/util/fastapprox/fastpow.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/sim/sim_neuron.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/protos/matrix.proto",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/sim/network.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/neurons/neuron_model.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/neurons/neuron_model.cpp",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/sim/CMakeLists.txt",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/util/json/value.cpp",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/util/json/value.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/util/spikes_list.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/layers/layer_info.cpp",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/util/spikes_list.cpp",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/protos/spikes_list.proto",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/tools/dumptool/dumptool.cpp",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/act_funcs/determ.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/act_funcs/act_func.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/util/spikes_queue.cpp",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/.tags_sorted_by_file",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/layers/layer.cpp",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/layers/layer_info.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/.tags",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/neurons/CMakeLists.txt",
		"/home/alexeyche/.config/sublime-text-3/Packages/User/CTags.sublime-settings",
		"/home/alexeyche/.config/sublime-text-3/Packages/CTags/CTags.sublime-settings",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/CMakeLists.txt",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/layers/neuron_stat.cpp",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/layers/neuron_stat.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/layers/synapse.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/neurons/stat_collector.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/layers/adex_neuron.cpp",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/layers/adex_neuron.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/layers/neuron.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/build/snnlib/protos/common.pb.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/protos/common.proto",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/layers/srm_neuron.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/serialize/stat.h",
		"/home/alexeyche/prog/snn_sim/sources/snnlib/sim/sim.c",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/util/CMakeLists.txt",
		"/home/alexeyche/prog/snn_sim/sources/snnlib/sim/netsim.c",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/util/spinlock.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/util/spinning_barrier.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/sim/sim_layer.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/util/json/indenter.cpp",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/tools/dumptool/ucr_ts.h",
		"/home/alexeyche/distr/FastDelegate/Demo.cpp",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/util/optionparser/opt.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/util/optionparser/optionparser.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/layers/neuron_test.h",
		"/home/alexeyche/prog/snn_sim/sources/snnlib/layers/neuron_funcs.c",
		"/home/alexeyche/prog/snn_sim/scripts/common.sh",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/build/snnlib/protos/spikes_list.pb.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/config/type_maps.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/build/snnlib/protos/time_series.pb.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/protos/time_series.proto",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/protos/spike_list.proto",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/layers/common.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/serialize/CMakeLists.txt",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/util/json/solidus_escaper.cpp",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/layers/srm_layer.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/tuning_curves/CMakeLists.txt",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/layers/sim_layer_test.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/sim/network_stat.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/layers/act_funcs/act_func.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/layers/sigma_tc_layer.h",
		"/home/alexeyche/prog/alexeyche-junk/cns/cpp/sources/snnlib/sim/sim_input_layer.h"
	],
	"find":
	{
		"height": 25.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"<open folders>"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"StdpC",
			"Stdp",
			"stdp",
			"Learnin",
			"OptimalStdp",
			"addSy",
			"Syna",
			"Synap",
			"synaps",
			"createCons",
			"cout",
			"seed",
			"p_acc",
			"add_p_a",
			"add_c",
			"add_C",
			"mean_p",
			"MaxLikelihood",
			"MeanActivityHomeostasis",
			"cout",
			"glob_inst",
			"NeuronStat",
			"saveS",
			"active_synapses",
			"active",
			"saveMode",
			"rRewa",
			"Layer",
			"saveS",
			"Factory::inst().registerObj<NeuronStat>(new NeuronStat(this));",
			"ena",
			"neurons_t",
			"neuron_t",
			"Neuron",
			"print",
			"reinfor",
			"aff_p",
			"max_likelihood",
			"Bool",
			"isBool",
			"get",
			"bool",
			"false",
			"true",
			"lst",
			"l",
			"operator",
			"net_queues",
			"Measu",
			"CAST_TYPE",
			"SerializableFactory",
			"fill_structure",
			"vector<Serializable*>",
			"prw.read",
			"getStat",
			"collect",
			"l.size() == 1) pos = l.begin();",
			"operator\\[\\]",
			"opera",
			"Spin",
			"compareSynSpike",
			"t",
			"queue_spinlocks",
			"spinlocks",
			"Unknown constants field",
			"axon",
			"33",
			"default",
			"cout",
			"FastDelegate1",
			"init",
			"seq",
			"SpikesList",
			"getFullSampleLength",
			"LabeledTimeSeries",
			"TimeSeri",
			"make_shared<.*>\\(o\\)",
			"make_shared<Neuron>(o)",
			"make_shared<.*>\\(.*\\)",
			"get",
			"Factory::",
			"const ConstObj *c",
			".get()",
			"set_al",
			"tuning",
			"NeuronConf",
			"InputLa",
			"gc",
			"layers",
			"InputLa",
			"SRMLayer",
			"LayerObj",
			"SRMNeuronC",
			"SRMLayerC",
			"Layer",
			"Sigma",
			"input_layer",
			"SigmaTuningCurveC",
			"sds",
			"NEURON",
			"getDouble",
			"SigmaL",
			"comple",
			"l_Id",
			"> ",
			"DetermC"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"Stdp",
			"OptimalStdp",
			"MinMax",
			"MaxLikelihoodStat",
			"Reward",
			"Factory",
			"SerialPack",
			"o",
			"\\1o",
			"\\1",
			"",
			"shared_ptr<const ConstObj>",
			"",
			"glob_c",
			"SRMNeuron",
			"Layer",
			"SRMLayerC",
			"SRMNeuronC",
			"Neuron",
			"sigma",
			"gains",
			"SRMNeuron",
			"ExpHennequinC"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 8,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "sources/snnlib/learning/learning_rule.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1481,
						"regions":
						{
						},
						"selection":
						[
							[
								1481,
								1481
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 97.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "sources/snnlib/learning/stdp.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4536,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 590.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "sources/snnlib/learning/optimal_stdp.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6349,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2119.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "sources/snnlib/config/constants.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22625,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3321.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "sources/tools/sim/snn_sim.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5359,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2069.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "sources/snnlib/sim/sim.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5836,
						"regions":
						{
						},
						"selection":
						[
							[
								2105,
								2105
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 488.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "sources/snnlib/serialize/serialize.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7563,
						"regions":
						{
						},
						"selection":
						[
							[
								1662,
								1662
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 765.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "sources/snnlib/protos/spikes_list.proto",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 290,
						"regions":
						{
						},
						"selection":
						[
							[
								188,
								188
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "sources/snnlib/protos/time_series.proto",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 424,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "sources/snnlib/util/time_series.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6886,
						"regions":
						{
						},
						"selection":
						[
							[
								6146,
								6146
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2873.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "sources/snnlib/util/spikes_list.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3492,
						"regions":
						{
						},
						"selection":
						[
							[
								3492,
								3492
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1236.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "sources/snnlib/neurons/synapse.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1143,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "sources/snnlib/neurons/synapse.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 460,
						"regions":
						{
						},
						"selection":
						[
							[
								220,
								220
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 419.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "snn_sim.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"time",
				"snnlib/util/time_series.h"
			],
			[
				"spike",
				"snnlib/protos/spikes_list.proto"
			],
			[
				"ser",
				"snnlib/serialize/serialize.h"
			],
			[
				"spikes",
				"snnlib/util/spikes_list.h"
			],
			[
				"sim.h",
				"snnlib/sim/sim.h"
			],
			[
				"snn_s",
				"tools/sim/snn_sim.cpp"
			],
			[
				"optm",
				"snnlib/learning/optimal_stdp.h"
			],
			[
				"cons",
				"snnlib/config/constants.h"
			],
			[
				"fa",
				"snnlib/config/factory.cpp"
			],
			[
				"stdp",
				"snnlib/learning/stdp.h"
			],
			[
				"le",
				"snnlib/learning/learning_rule.h"
			],
			[
				"we",
				"snnlib/weight_normalizations/weight_normalization.h"
			],
			[
				"min_",
				"snnlib/weight_normalizations/min_max.h"
			],
			[
				"neu",
				"snnlib/neurons/neuron.cpp"
			],
			[
				"std",
				"snnlib/learning/stdp.h"
			],
			[
				"max",
				"snnlib/learning/max_likelihood.h"
			],
			[
				"lea",
				"snnlib/learning/learning_rule.h"
			],
			[
				"la",
				"snnlib/layers/layer.h"
			],
			[
				"min",
				"snnlib/weight_normalizations/min_max.h"
			],
			[
				"wei",
				"snnlib/weight_normalizations/weight_normalization.h"
			],
			[
				"like",
				"snnlib/reinforcement/likelihood.h"
			],
			[
				"stat",
				"snnlib/protos/stat.proto"
			],
			[
				"opt",
				"snnlib/learning/optimal_stdp.h"
			],
			[
				"exp",
				"snnlib/act_funcs/exp_hennequin.h"
			],
			[
				"syna",
				"snnlib/neurons/synapse.h"
			],
			[
				"srm",
				"snnlib/neurons/srm_neuron.h"
			],
			[
				"optim",
				"snnlib/learning/optimal_stdp.h"
			],
			[
				"sun.h",
				"snnlib/neurons/srm_neuron.h"
			],
			[
				"optima",
				"snnlib/learning/optimal_stdp.h"
			],
			[
				"sim.cp",
				"snnlib/sim/sim.cpp"
			],
			[
				"mode",
				"snnlib/protos/model.proto"
			],
			[
				"op",
				"snnlib/learning/optimal_stdp.h"
			],
			[
				"syn",
				"snnlib/neurons/synapse.h"
			],
			[
				"ne",
				"snnlib/neurons/neuron.cpp"
			],
			[
				"fact",
				"snnlib/config/factory.h"
			],
			[
				"neur",
				"snnlib/neurons/neuron.cpp"
			],
			[
				"base",
				"snnlib/base.h"
			],
			[
				"sim.c",
				"snnlib/sim/sim.cpp"
			],
			[
				"ad",
				"snnlib/neurons/adex_neuron.h"
			],
			[
				"srm_ne",
				"snnlib/neurons/srm_neuron.h"
			],
			[
				"min_m",
				"snnlib/learning/min_max.h"
			],
			[
				"max_",
				"snnlib/learning/max_likelihood.h"
			],
			[
				"uti",
				"snnlib/util/util.cpp"
			],
			[
				"run",
				"snnlib/sim/runtime_globals.h"
			],
			[
				"model",
				"snnlib/protos/model.proto"
			],
			[
				"sere",
				"snnlib/serialize/serialize.h"
			],
			[
				"sim.cpp",
				"snnlib/sim/sim.cpp"
			],
			[
				"sim.",
				"snnlib/sim/sim.h"
			],
			[
				"runti",
				"snnlib/sim/runtime_globals.h"
			],
			[
				"inp",
				"snnlib/reinforcement/input_classification.h"
			],
			[
				"re",
				"snnlib/reinforcement/reward_modulation.h"
			],
			[
				"seri",
				"snnlib/serialize/serialize.h"
			],
			[
				"fac",
				"snnlib/config/factory.cpp"
			],
			[
				"time_",
				"snnlib/util/time_series.h"
			],
			[
				"ma",
				"snnlib/learning/max_likelihood.h"
			],
			[
				"rew",
				"snnlib/sim/reward_control.cpp"
			],
			[
				"pro",
				"snnlib/serialize/proto_rw.h"
			],
			[
				"rewa",
				"snnlib/sim/reward_control.cpp"
			],
			[
				"max_l",
				"snnlib/learning/max_likelihood.h"
			],
			[
				"syna.",
				"snnlib/neurons/synapse.cpp"
			],
			[
				"snn",
				"tools/sim/snn_sim.cpp"
			],
			[
				"sim",
				"snnlib/sim/sim.h"
			],
			[
				"const",
				"snnlib/config/constants.h"
			],
			[
				"lik",
				"snnlib/reinforcement/likelihood.h"
			],
			[
				"",
				"snnlib/sim/reward_control.h"
			],
			[
				"runt",
				"snnlib/sim/runtime_globals.h"
			],
			[
				"mod",
				"snnlib/protos/model.proto"
			],
			[
				"net",
				"snnlib/sim/network.h"
			],
			[
				"co",
				"snnlib/core.h"
			],
			[
				"ba",
				"snnlib/base.h"
			],
			[
				"snn_si",
				"tools/sim/snn_sim.cpp"
			],
			[
				"rei",
				"snnlib/reinforcement/reward_modulation.h"
			],
			[
				"spik",
				"snnlib/util/spikes_queue.h"
			],
			[
				"netw",
				"snnlib/sim/network.cpp"
			],
			[
				"mo",
				"snnlib/protos/model.proto"
			],
			[
				"spikes_l",
				"snnlib/util/spikes_list.h"
			],
			[
				"dete",
				"snnlib/act_funcs/determ.h"
			],
			[
				"act_",
				"snnlib/act_funcs/act_func.h"
			],
			[
				"dump",
				"tools/dumptool/dumptool.cpp"
			],
			[
				"prot",
				"snnlib/serialize/proto_rw.h"
			],
			[
				"proto",
				"snnlib/serialize/proto_rw.h"
			],
			[
				"dum",
				"tools/dumptool/dumptool.cpp"
			],
			[
				"sigm",
				"snnlib/tuning_curves/sigma_tuning_curve.h"
			],
			[
				"stat.",
				"snnlib/protos/stat.proto"
			],
			[
				"bas",
				"snnlib/base.h"
			],
			[
				"value",
				"snnlib/util/json/value.cpp"
			],
			[
				"core",
				"snnlib/core.h"
			],
			[
				"con",
				"snnlib/config/constants.h"
			],
			[
				"sim_ne",
				"snnlib/sim/sim_neuron.h"
			],
			[
				"serl",
				"snnlib/serialize/serialize.h"
			],
			[
				"sik",
				"snnlib/util/spikes_list.h"
			],
			[
				"valu",
				"snnlib/util/json/value.cpp"
			],
			[
				"uit",
				"snnlib/util/util.h"
			],
			[
				"opt.",
				"snnlib/util/optionparser/opt.h"
			],
			[
				"ade",
				"snnlib/layers/adex_neuron.cpp"
			],
			[
				"fast",
				"snnlib/util/fast_delegate.h"
			],
			[
				"si",
				"snnlib/sim/sim.h"
			],
			[
				"d",
				"tools/dumptool/dumptool.cpp"
			],
			[
				"seria",
				"snnlib/serialize/serialize.h"
			],
			[
				"prot_rw",
				"snnlib/serialize/proto_rw.h"
			],
			[
				"comm",
				"snnlib/layers/common.h"
			],
			[
				"sig",
				"snnlib/tuning_curves/sigma_tuning_curve.h"
			],
			[
				"tunin",
				"snnlib/tuning_curves/tuning_curve.h"
			],
			[
				"act",
				"snnlib/act_funcs/act_func.h"
			],
			[
				"f",
				"snnlib/config/factory.cpp"
			],
			[
				"srm_la",
				"snnlib/layers/srm_layer.h"
			],
			[
				"layer",
				"snnlib/layers/layer.h"
			],
			[
				"neuro",
				"snnlib/layers/neuron_test.h"
			],
			[
				"sigma",
				"snnlib/tuning_curves/sigma_tuning_curve.h"
			],
			[
				"sim_la",
				"snnlib/sim/sim_layer.h"
			],
			[
				"simn",
				"snnlib/sim/sim_neuron.h"
			],
			[
				"srm_",
				"snnlib/layers/srm_layer.h"
			],
			[
				"tun",
				"snnlib/tuning_curves/tuning_curve.h"
			],
			[
				"tc_",
				"snnlib/tuning_curves/sigma_tuning_curve.h"
			],
			[
				"ucr",
				"tools/dumptool/ucr_ts.h"
			],
			[
				"sn",
				"tools/sim/snn_sim.cpp"
			],
			[
				"simc",
				"snnlib/sim/sim.cpp"
			],
			[
				"tuni",
				"snnlib/tuning_curves/tuning_curve.h"
			],
			[
				"du",
				"tools/dumptool/dumptool.cpp"
			],
			[
				"cor",
				"snnlib/core.h"
			],
			[
				"deter",
				"snnlib/layers/act_funcs/determ.h"
			],
			[
				"core.",
				"snnlib/core.h"
			],
			[
				"sr",
				"snnlib/layers/srm_layer.h"
			],
			[
				"s",
				"snnlib/layers/synapse.h"
			],
			[
				"base.",
				"snnlib/base.h"
			],
			[
				"facto",
				"snnlib/config/factory.cpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 227.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
