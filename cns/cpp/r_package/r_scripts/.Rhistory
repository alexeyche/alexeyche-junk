const
c
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
cjson
write(cjson, file=temp_const)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
const
cjson
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
const
cjson
temp_const
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/gen_test_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/gen_test_data.R', echo=TRUE)
rates
rpoiss
rpois
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/gen_test_data.R', echo=TRUE)
w = exp( -(seq(-10,10,length.out=100)/10) )
w
plotl(w)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/gen_test_data.R', echo=TRUE)
plotl(w)
w = exp( -(seq(-10,10,length.out=1000)^2/10) )
plotl(w)
w = exp( -(seq(-1,1,length.out=100)^2/1) )
sp = rpois(10000, 10/1000)
filter(sp, w, circular=TRUE)
plotl(filter(sp, w, circular=TRUE))
plot(filter(sp, w, circular=TRUE), xlim=c(0,100))
plot(filter(sp, w, circular=TRUE), xlim=c(0,1000))
sp = c(rep(0,100), 1, rep(0,100))
plot(filter(sp, w, circular=TRUE), xlim=c(0,1000))
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/gen_test_data.R', echo=TRUE)
plot(filter(sp, w, circular=TRUE), xlim=c(0,1000))
w = exp( -(seq(-5,5,length.out=100)^2/1) )
plot(filter(sp, w, circular=TRUE), xlim=c(0,1000))
plot(filter(sp, w, circular=TRUE), xlim=c(0,100))
plot(filter(sp, w, circular=TRUE), xlim=c(0,200))
w = exp( -(seq(-2.5,2.5,length.out=100)^2/1) )
plot(filter(sp, w, circular=TRUE), xlim=c(0,200))
write()
?write
write.table
?write.table
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
const
c
cjson
c$sim_configuration$net_layers[[1]]$size = 1
c
cjson = toJSON(c)
cf = file(temp_const)
writeLines(cjson, cf)
close(cf)
const = RConstants$new(temp_const)
temp_const
c
c$sim_configuration
require(Rsnn)
require(rjson)
temp_const = tempfile()
const = "/home/alexeyche/prog//alexeyche-junk/cns/cpp/const.json"
system(sprintf("sed -e 's|//.*$||g' %s > %s", const, temp_const), intern=TRUE)
c = fromJSON(file=temp_const, unexpected.escape ="skip")
c
c$sim_configuration$net_layers_conf[[1]]$size = 1
c
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
const
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
s
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
s
list(spikes_list=rpois(1000, 10/1000), labels=c("1"), timeline=c(1000))
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
s
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
s
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
s
c$sim_configuration$input_layers_conf[[1]]
require(Rsnn)
require(rjson)
temp_const = tempfile()
const = "/home/alexeyche/prog//alexeyche-junk/cns/cpp/const.json"
system(sprintf("sed -e 's|//.*$||g' %s > %s", const, temp_const), intern=TRUE)
c = fromJSON(file=temp_const, unexpected.escape ="skip")
c$sim_configuration$net_layers_conf[[1]]$size = 1
c$sim_configuration$input_layers_conf[[1]]
c$sim_configuration$input_layers_conf[[1]]$size
rate = 10
len = 1000
N = cr$sim_configuration$input_layers_conf[[1]]$size
sapply(1:N, function(x) rpois(len, rate/1000))
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
require(Rsnn)
require(rjson)
temp_const = tempfile()
const = "/home/alexeyche/prog//alexeyche-junk/cns/cpp/const.json"
system(sprintf("sed -e 's|//.*$||g' %s > %s", const, temp_const), intern=TRUE)
cr = fromJSON(file=temp_const, unexpected.escape ="skip")
cr$sim_configuration$net_layers_conf[[1]]$size = 1
cjson = toJSON(cr)
cf = file(temp_const)
writeLines(cjson, cf)
close(cf)
const = RConstants$new(temp_const)
s = RSim$new(const)
rate = 10
len = 1000
N = cr$sim_configuration$input_layers_conf[[1]]$size
sapply(1:N, function(x) which(rpois(len, rate/1000) == 1))
net = sapply(1:N, function(x) which(rpois(len, rate/1000) == 1))
net
prast(net)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
s
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
const
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
prast(net_ans)
cr$sim_configuration$conn_map
cr$sim_configuration$conn_map[["0->1"]]
cr$sim_configuration$conn_map[["0->1"]]$weight_dist
cr$sim_configuration$conn_map[["0->1"]]$weight_distr
cr$sim_configuration$conn_map[["0->1"]][[1]]
cr$sim_configuration$conn_map[["0->1"]][[1]]$weight_distr
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
prast(net_ans)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
dist = do.call(rbind, data$distance_matrix)
dist
gr_pl(dst)
gr_pl(dist)
require(Rsnn)
gr_pl(dist)
dist[1,]
dist[1,1:300]
min(dist[1,1:300])
dist
dist = do.call(rbind, data$distance_matrix)
diag(dist) <- Inf
which(min(dist[1,300]))
min(dist[1,300])
which(dist[1,300] == m)
m = min(dist[1,300])
which(dist[1,300] == min(dist[1,300]))
dist = do.call(rbind, data$distance_matrix)
diag(dist) <- Inf
labs = data$labels
test_labs = data$test_labels
tr_ids = 1:length(labs)
ulabs = unique(c(labs, test_labs))
conf_m = matrix(0, nrow=length(ulabs), ncol=length(ulabs))
for(i in 1:length(test_labs)) {
tr_i = which(dist[i,tr_ids] == min(dist[i,tr_ids]))
act_class = which(ulabs == labs(i))
pred_class = which(ulabs == labs(tr_i))
if(act_class == pred_class) {
conf_m[act_class,pred_class] = conf_m[act_class,pred_class] + 1
}
}
dist = do.call(rbind, data$distance_matrix)
diag(dist) <- Inf
labs = data$labels
test_labs = data$test_labels
tr_ids = 1:length(labs)
ulabs = unique(c(labs, test_labs))
conf_m = matrix(0, nrow=length(ulabs), ncol=length(ulabs))
for(i in 1:length(test_labs)) {
tr_i = which(dist[i,tr_ids] == min(dist[i,tr_ids]))
act_class = which(ulabs == labs[i])
pred_class = which(ulabs == labs[tr_i])
if(act_class == pred_class) {
conf_m[act_class,pred_class] = conf_m[act_class,pred_class] + 1
}
}
conf_m
1:length(test_labs)
dist = do.call(rbind, data$distance_matrix)
diag(dist) <- Inf
labs = data$labels
test_labs = data$test_labels
tr_ids = 1:length(labs)
ulabs = unique(c(labs, test_labs))
conf_m = matrix(0, nrow=length(ulabs), ncol=length(ulabs))
for(i in 1:length(test_labs)) {
tr_i = which(dist[i+length(labs),tr_ids] == min(dist[i+length(labs),tr_ids]))
act_class = which(ulabs == labs[i])
pred_class = which(ulabs == labs[tr_i])
if(act_class == pred_class) {
conf_m[act_class,pred_class] = conf_m[act_class,pred_class] + 1
}
}
conf_m
act_class
pred_class
dist = do.call(rbind, data$distance_matrix)
diag(dist) <- Inf
labs = data$labels
test_labs = data$test_labels
tr_ids = 1:length(labs)
ulabs = unique(c(labs, test_labs))
conf_m = matrix(0, nrow=length(ulabs), ncol=length(ulabs))
for(i in 1:length(test_labs)) {
tr_i = which(dist[i+length(labs),tr_ids] == min(dist[i+length(labs),tr_ids]))
act_class = which(ulabs == labs[i])
pred_class = which(ulabs == labs[tr_i])
conf_m[act_class,pred_class] = conf_m[act_class,pred_class] + 1
}
conf_m
tr_i
labs
labs[tr_i]
i=1
i+length(labs)
dist[i+length(labs),tr_ids]
min(dist[i+length(labs),tr_ids])
m = min(dist[i+length(labs),tr_ids])
which(dist[i+length(labs),tr_ids]  == m)
ulabs
plotl(dist[i+length(labs),tr_ids]
plotl(dist[i+length(labs),tr_ids])
plotl(dist[2+length(labs),tr_ids])
plotl(dist[3+length(labs),tr_ids])
plotl(dist[4+length(labs),tr_ids])
plotl(dist[5+length(labs),tr_ids])
plotl(dist[5+length(labs),tr_ids])
plotl(dist[6+length(labs),tr_ids])
plotl(dist[7+length(labs),tr_ids])
tr_ids
dist[,100]
plotl(dist[100+length(labs),tr_ids])
dist[100,]
dist[,101]
dist[,100]
plotl(dist[,100])
plotl(dist[,101])
plotl(dist[,102])
dist[100,102]
dist[101,102]
dist[99,102]
min(dist)
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
dist = do.call(rbind, data$distance_matrix)
diag(dist) <- Inf
labs = data$labels
test_labs = data$test_labels
tr_ids = 1:length(labs)
ulabs = unique(c(labs, test_labs))
conf_m = matrix(0, nrow=length(ulabs), ncol=length(ulabs))
for(i in 1:length(test_labs)) {
tr_i = which(dist[i+length(labs),tr_ids] == min(dist[i+length(labs),tr_ids]))
act_class = which(ulabs == labs[i])
pred_class = which(ulabs == labs[tr_i])
conf_m[act_class,pred_class] = conf_m[act_class,pred_class] + 1
}
conf_m
install.packages("caret")
install.packages(pRoc)
install.packages("pRoc")
install.packages("pROC")
require(pROC)
?roc
resp = NULL
pred = NULL
for(i in 1:length(test_labs)) {
tr_i = which(dist[i+length(labs),tr_ids] == min(dist[i+length(labs),tr_ids]))
act_class = which(ulabs == labs[i])
pred_class = which(ulabs == labs[tr_i])
resp = c(resp, act_class)
pred = c(pred, pred_class)
}
resp
pres
pred
roc(pred, resp)
plot(roc(pred, resp))
?plot(roc(pred, resp))
?roc
?plot(roc(pred, resp, smooth=TRUE))
plot(roc(pred, resp, smooth=TRUE))
?roc
roc(pred, resp, smooth=TRUE)
roc(pred, resp)
smooth.roc(pred, resp)
roc(pred, resp, polygon=TRUE)
roc(resp, pred, polygon=TRUE)
roc(resp, pred, polygon=TRUE)
plotl(roc(resp, pred, polygon=TRUE))
plotl(roc(resp, pred, polygon=TRUE))
plotl(roc(resp, pred))
?p.roc
?roc
?caret
require(caret)
?confusionMatrix
tr_ids = 1:length(labs)
conf_m = matrix(0, nrow=length(ulabs), ncol=length(ulabs))
for(i in 1:length(test_labs)) {
tr_i = which(dist[i+length(labs),tr_ids] == min(dist[i+length(labs),tr_ids]))
act_class = which(ulabs == labs[i])
pred_class = which(ulabs == labs[tr_i])
conf_m[act_class, pred_class] = conf_m[act_class, pred_class]+1
}
conf_m
confusionMatrix(conf_m)
confusionMatrix(pred,resp)
install.packages("e1071")
confusionMatrix(pred,resp)
conf_m
?confusionMatrix
confusionMatrix(pred, resp)
confusionMatrix(pred, resp)$positive
names(confusionMatrix(pred, resp))
confusionMatrix(pred, resp)$overall
confusionMatrix(pred, resp)$overall$accuracy
confusionMatrix(pred, resp)$overall[1]
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
invisible(require(caret, quietly=TRUE))
library(caret, quietly=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
cat(nn_nmi(data),"\n")
library(caret, quietly=TRUE)
dist = do.call(rbind, data$distance_matrix)
diag(dist) <- Inf
dist
labs = data$labels
test_labs = data$test_labels
ulabs = unique(c(labs, test_labs))
labs
ulabs
test_labs
tr_ids = 1:length(labs)
conf_m = matrix(0, nrow=length(ulabs), ncol=length(ulabs))
tr_ids
resp = NULL
pred = NULL
for(i in 1:length(test_labs)) {
tr_i = which(dist[i+length(labs),tr_ids] == min(dist[i+length(labs),tr_ids]))
act_class = which(ulabs == labs[i])
pred_class = which(ulabs == labs[tr_i])
resp = c(resp, act_class)
pred = c(pred, pred_class)
}
resp
pred
cf = confusionMatrix(pred, resp)
length(resp)
length(pred)
levels(pred)
levels(resp)
as.table(pred)
cf = confusionMatrix(as.table(pred), as.table(resp))
cbind(pred,resp)
as.table(cbind(pred,resp))
cf = confusionMatrix(as.table(cbind(pred,resp)))
as.factor(resp)
cf = confusionMatrix(as.factor(pred), as.factor(resp)
cf = confusionMatrix(as.factor(pred), as.factor(resp))
as.factor(pred)
as.factor(resp)
cf = confusionMatrix(as.factor(pred), as.factor(resp))
table(pred,resp)
cf = confusionMatrix(table(pred,resp))
t = table(pred,resp)
nrow(t)
col(t)
t
pred
resp
unique(resp)
unique(pred)
rates = data$rates
target_rate_sum = sqrt(sum(rep(target_rate, length(data$rates))^2))
rate_sum = sqrt(sum((rates^2)))
if(mean(rates)>target_rate) {
val*exp( - (rate_sum - target_rate_sum)^2/2000.0)
} else {
val*exp( - (rate_sum - target_rate_sum)^2/500.0)
}
}
nn_nmi = function(data) {
library(caret, quietly=TRUE)
dist = do.call(rbind, data$distance_matrix)
diag(dist) <- Inf
labs = data$labels
test_labs = data$test_labels
ulabs = unique(c(labs, test_labs))
tr_ids = 1:length(labs)
conf_m = matrix(0, nrow=length(ulabs), ncol=length(ulabs))
resp = ulabs
pred = ulabs
for(i in 1:length(test_labs)) {
tr_i = which(dist[i+length(labs),tr_ids] == min(dist[i+length(labs),tr_ids]))
act_class = which(ulabs == labs[i])
pred_class = which(ulabs == labs[tr_i])
resp = c(resp, act_class)
pred = c(pred, pred_class)
}
t = table(pred,resp)
cf = confusionMatrix()
print(cf)
library(caret, quietly=TRUE)
dist = do.call(rbind, data$distance_matrix)
diag(dist) <- Inf
labs = data$labels
test_labs = data$test_labels
ulabs = unique(c(labs, test_labs))
tr_ids = 1:length(labs)
conf_m = matrix(0, nrow=length(ulabs), ncol=length(ulabs))
resp = ulabs
pred = ulabs
for(i in 1:length(test_labs)) {
tr_i = which(dist[i+length(labs),tr_ids] == min(dist[i+length(labs),tr_ids]))
act_class = which(ulabs == labs[i])
pred_class = which(ulabs == labs[tr_i])
resp = c(resp, act_class)
pred = c(pred, pred_class)
}
t = table(pred,resp)
cf = confusionMatrix()
print(cf)
t = table(pred,resp)
t
cf = confusionMatrix()
print(cf)
cf = confusionMatrix(t)
print(cf)
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
library(caret, quietly=TRUE)
dist = do.call(rbind, data$distance_matrix)
diag(dist) <- Inf
labs = data$labels
test_labs = data$test_labels
ulabs = unique(c(labs, test_labs))
tr_ids = 1:length(labs)
conf_m = matrix(0, nrow=length(ulabs), ncol=length(ulabs))
resp = ulabs
pred = ulabs
for(i in 1:length(test_labs)) {
tr_i = which(dist[i+length(labs),tr_ids] == min(dist[i+length(labs),tr_ids]))
act_class = which(ulabs == labs[i])
pred_class = which(ulabs == labs[tr_i])
resp = c(resp, act_class)
pred = c(pred, pred_class)
}
t = table(pred,resp)
cf = confusionMatrix(t)
print(cf)
warnings()
tr_ids = 1:length(labs)
tr_ids
which(dist[i+length(labs),tr_ids] == min(dist[i+length(labs),tr_ids]))
dist[i+length(labs),tr_ids] == min(dist[i+length(labs),tr_ids])
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
cat(nn_nmi(data),"\n")
source('~/prog/snn_sim/scripts/eval_dist_matrix.R', echo=TRUE)
cat(calculate_criterion(data),"\n")
source('~/prog/snn_sim/scripts/eval_dist_matrix.R', echo=TRUE)
source('~/prog/snn_sim/scripts/eval_dist_matrix.R', echo=TRUE)
cat(calculate_criterion(data),"\n")
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
plot_st(stat[[1]],"Stdp_w")
x = get_st(stat[[1]],"Stdp_x")
x = get_st(stat[[1]],"Stdp_x")
plot_st(stat[[1]],"Stdp_x")
plotl_st(stat[[1]]["Stdp_x"][1:1000])
plotl(stat[[1]]["Stdp_x"][1:1000])
plotl(stat[[1]]["Stdp_x"]][1:1000])
plotl(stat[[1]][["Stdp_x"]][1:1000])
plotl(stat[[1]][["Stdp_x1"]][1:1000]
plotl(stat[[1]][["Stdp_x1"]][1:1000])
plotl(stat[[1]][["Stdp_y"]][1:1000])
par(mfrow=c(3,1))
plotl(stat[[1]][["Stdp_y"]][1:1000])
plotl(stat[[1]][["Stdp_x1"]][1:1000])
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
par(mfrow=c(3,1))
plotl(stat[[1]][["Stdp_y"]][1:1000])
plotl(stat[[1]][["Stdp_x1"]][1:1000])
plotl(stat[[1]][["Stdp_w1"]][1:1000])
plot_st(stat[[1]]["Stdp_w"])
plot_st(stat[[1]], "Stdp_w")
prast(net,T0=0, Tmax=1000)
prast(net,T0=0, Tmax=10000)
prast(net,T0=1000, Tmax=2000)
net[[10]]
net[[11]]
net[[12]]
net[[9]]
diff(net[[9]])
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
prast(net,T0=1000, Tmax=2000)
net[[3]]
net[[4]]
net[[5]]
plotl(stat[[5]][["u"]][1:2000])
plotl(stat[[5]][["u"]][1:2000])
plotl(stat[[5]][["u"]][2000:3000])
names(stat[[5]])
