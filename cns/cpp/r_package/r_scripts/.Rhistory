require(Rdnn)
require(rjson)
setwd("~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts")
len = 10000
t = seq(1,len)/1000
Iin = 2.8 +0.8*cos(2*pi*3.5*t + 0.8)
RProto$new("/home/alexeyche/cpp/build/input.pb")$write(list(values=Iin), "TimeSeries")
Iin
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
net[[1]]
length(net[[1]])/10000.0
1000*length(net[[1]])/10000.0
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
1000*length(net[[1]])/10000.0
Iin = sapply(1:length(t), function(i) 1.5)
Iin
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
plot_st(stat[[1]],"u")
plot_st(stat[[1]][1:1000],"u")
plotl(stat[[1]][["u"]][1:1000])
Iin
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
const
cjson
cr
cr$neurons
cr$neurons$LeakyIntegrateAndFire
liaf_c = cr$neurons$LeakyIntegrateAndFire
liaf_c
liaf_c$gL
tau_m = 1/liaf_c$gL
tau_m
log
tau_m/liaf_c$C
cr$sim_configuration
cr$sim_configuration$layers
cr$sim_configuration$layers[[1]]
cr$sim_configuration$layers[[1]]$act_function
cr$act_functions
cr$act_functions[[act_f]]
act_f = cr$sim_configuration$layers[[1]]$act_function
cr$act_functions[[act_f]]
cr$act_functions[[act_f]]$treshold
len = 10000
t = seq(1,len)/1000
#Iin = 1.0 +0.8*cos(2*pi*3.5*t + 0.8)
I0 = 0.7
Iin = sapply(1:length(t), function(i) I0)
act_f = cr$sim_configuration$layers[[1]]$act_function
tr = cr$act_functions[[act_f]]$treshold
liaf_c = cr$neurons$LeakyIntegrateAndFire
tau_m = 1/liaf_c$gL
R = tau_m/liaf_c$C
rate = (liaf_c$tau_ref + tau_m*log(R*I0/(R*I0 - tr)))^(-1)
rate
R*I0/(R*I0 - tr))
R*I0
(R*I0 - tr)
R*I0/(R*I0 - tr)
tau_m*log(R*I0/(R*I0 - tr))
tau_m
log(R*I0/(R*I0 - tr))
R*I0/(R*I0 - tr)
R*I0 - tr
tr
tr=1
R*I0/(R*I0 - tr)
log(R*I0/(R*I0 - tr))
(liaf_c$tau_ref + tau_m*log(R*I0/(R*I0 - tr)))^(-1)
rate
rate = 1000*(liaf_c$tau_ref + tau_m*log(R*I0/(R*I0 - tr)))^(-1)
rate
act_f = cr$sim_configuration$layers[[1]]$act_function
tr = cr$act_functions[[act_f]]$treshold
liaf_c = cr$neurons$LeakyIntegrateAndFire
tau_m = 1/liaf_c$gL
R = tau_m/liaf_c$C
rate = 1000*(liaf_c$tau_ref + tau_m*log(R*I0/(R*I0 - tr)))^(-1)
rate
I0 = 1.5
Iin = sapply(1:length(t), function(i) I0)
act_f = cr$sim_configuration$layers[[1]]$act_function
tr = cr$act_functions[[act_f]]$treshold
liaf_c = cr$neurons$LeakyIntegrateAndFire
tau_m = 1/liaf_c$gL
R = tau_m/liaf_c$C
rate = 1000*(liaf_c$tau_ref + tau_m*log(R*I0/(R*I0 - tr)))^(-1)
rate
I0 = 0.75
Iin = sapply(1:length(t), function(i) I0)
act_f = cr$sim_configuration$layers[[1]]$act_function
tr = cr$act_functions[[act_f]]$treshold
liaf_c = cr$neurons$LeakyIntegrateAndFire
tau_m = 1/liaf_c$gL
R = tau_m/liaf_c$C
rate = 1000*(liaf_c$tau_ref + tau_m*log(R*I0/(R*I0 - tr)))^(-1)
rate
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
rate
length(net[[1]])/10000.0
1000*length(net[[1]])/10000.0
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
sim_rate
rate
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
rate
sim_rate
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
R
R*I0 - tr
R*I0/(R*I0 - tr)
log(R*I0/(R*I0 - tr))
sim_rate
1/sim_rate
sim_rate/1000
1/(sim_rate/1000)
net[[1]]
diff(net[[1]])
1/(sim_rate/1000)
R*I0*(1-exp(-dtsp/tau_m))
dtsp = 1/(sim_rate/1000)
R*I0*(1-exp(-dtsp/tau_m))
liaf_c
liaf_c$rest_pot
liaf_c$rest_pot + R*I0*(1-exp(-dtsp/tau_m))
tr
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
sim_rate
rate
liaf_c$rest_pot + R*I0*(1-exp(-dtsp/tau_m))
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
liaf_c$rest_pot + R*I0*(1-exp(-dtsp/tau_m))
sim_rate
rate
liaf_c$u_rest
liaf_c
liaf_c$rest_pot
rate = 1000*(liaf_c$tau_ref + tau_m*log(R*I0/(R*I0 - (liaf_c$rest_pot+tr)))^(-1)
rate = 1000*(liaf_c$tau_ref + tau_m*log(R*I0/(R*I0 - (liaf_c$rest_pot+tr)) ))^(-1)
rate
liaf_c$rest_pot+tr
rate = 1000*(liaf_c$tau_ref + tau_m*log(R*I0/(R*I0 - (tr-liaf_c$rest_pot)) ))^(-1)
rate
sim_rate
(tr - liaf_c$rest-pot)
tau_m*log(1- (tr - liaf_c$rest_pot)/(R*I0+liaf_c$leak) )
- tau_m*log(1- (tr - liaf_c$rest_pot)/(R*I0+liaf_c$leak) )
diff(net)
diff(net[[1]])
liaf_c$rest_pot + R*I0*(1-exp(-dtsp/tau_m))
liaf_c$rest_pot + (R*I0+liaf_c$leak) *(1-exp(-dtsp/tau_m))
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
rate
sim_rate
require(Rdnn)
require(rjson)
setwd("~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts")
source('plot_stat.R')
source('gen_poisson.R')
const = "/home/alexeyche/cpp/const.json"
cr = fromJSON(parseConst(const))
cjson = toJSON(cr)
const = RConstants$new(cjson)
s = RSim$new(const)
len = 10000
t = seq(1,len)/1000
#Iin = 1.0 +0.8*cos(2*pi*3.5*t + 0.8)
I0 = 1.5
Iin = sapply(1:length(t), function(i) I0)
RProto$new("/home/alexeyche/cpp/build/input.pb")$write(list(values=Iin), "TimeSeries")
