labi = which(lab == lab_spikes$labels)
ci = which(lab_spikes$labels_id_timeline == labi-1)
xc = x[ci]
yc = y[ci]
centroids = rbind(centroids, c(mean(xc), mean(yc)))
}
dist_to_c = NULL
for(lab in lab_spikes$labels) {
labi = which(lab == lab_spikes$labels)
d = sapply(1:nrow(x_y), function(i) dist_xy(x_y[i,], centroids[labi, ]) )
dist_to_c = cbind(dist_to_c, d)
}
points(centroids, lwd=10, pch=3, col=lab_cols)
points(total_centroid, lwd=10, pch=3, col="black")
dist_to_c
dist_to_cd
d
dist_to_c
sse = 0
for(lab in lab_spikes$labels) {
labi = which(lab == lab_spikes$labels)
ci = which(lab_spikes$labels_id_timeline == labi-1)
d = dist_to_c[ci,labi]
sse = sse + d^2
}
sse
sse = 0
for(lab in lab_spikes$labels) {
labi = which(lab == lab_spikes$labels)
ci = which(lab_spikes$labels_id_timeline == labi-1)
d = dist_to_c[ci,labi]
sse = sse + sum(d^2)
}
sse
ci
ci
labi
centroid
centroids
dist_xy(centroids[labi,], total_centroid)
sse = 0
bss = 0
for(lab in lab_spikes$labels) {
labi = which(lab == lab_spikes$labels)
ci = which(lab_spikes$labels_id_timeline == labi-1)
d = dist_to_c[ci,labi]
sse = sse + sum(d^2)
bss = bss + length(d)*dist_xy(centroids[labi,], total_centroid)
}
bss
sse = 0
bss = 0
for(lab in lab_spikes$labels) {
labi = which(lab == lab_spikes$labels)
ci = which(lab_spikes$labels_id_timeline == labi-1)
d = dist_to_c[ci,labi]
sse = sse + sum(d^2)
bss = bss + length(d)*dist_xy(centroids[labi,], total_centroid)^2
}
bss
sse
sse+bss
sse-bss
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/eval_dist_matrix.R', echo=TRUE)
gr_pl(dist)
require(Rsnn)
gr_pl(dist)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
sse
bss
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
sse
bss
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
bss
sse
d
ifrom
ito
pairs
m1
gr_pl(m1)
gr_pl(m2)
dist
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
gr_pl(dist)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
x_y
centroids
total_centroid
labs
labs
?unique
rle(labs)
?rl
?rle
table(labs)
table(labs)[1]
which(lab == labs)
points[which(lab == labs)]
points = x_y
points[which(lab == labs)]
labi
labi=1
cpoints = points[which(lab == labs)]
d = sapply(1:nrow(cpoints), function(i) dist_xy(x_y[i,], centroids[labi, ]) )
points
cpoints = points[which(lab == labs),]
cpoints
d = sapply(1:nrow(cpoints), function(i) dist_xy(x_y[i,], centroids[labi, ]) )
d
sapply(points, function(x) x*2)
d = sapply(1:nrow(cpoints), function(i) dist_xy(cpoints[i,], centroids[labi, ]) )
d
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
cluster_lengths = table(labs)
ss_b = 0
cluster_length
cluster_lengths
labi=1
labi = which(lab == ulabs)
cluster_lengths[labi]
dist_xy(centroids[labi,], global_centroid)^2
centroids[labi,]
global_centroid
centroids[labi,]
(centroids[labi,])^2
sum((centroids[labi,])^2)
sqrt(sum((centroids[labi,])^2))
(centroids[labi,])^2
sum((centroids[labi,])^2)
sqrt(sum((centroids[labi,])^2))
dist_xy(centroids[labi,], global_centroid)
dist_xy(centroids[labi,], global_centroid)^2
ss_b
ss_b = 0
for(lab in ulabs) {
labi = which(lab == ulabs)
ss_b = ss_b + cluster_lengths[labi]*dist_xy(centroids[labi,], global_centroid)^2
}
ss_bn
ss_b
ss_w = 0
for(lab in ulabs) {
labi = which(lab == ulabs)
cpoints = points[which(lab == labs),]
d = sapply(1:nrow(cpoints), function(i) dist_xy(cpoints[i,], centroids[labi, ]) )
ss_w = ss_w + sum(d^2)
}
labs
points
points = cbind(x,y)
ss_w = 0
for(lab in ulabs) {
labi = which(lab == ulabs)
cpoints = points[which(lab == labs),]
d = sapply(1:nrow(cpoints), function(i) dist_xy(cpoints[i,], centroids[labi, ]) )
ss_w = ss_w + sum(d^2)
}
ss_w
nrow(points)-k
k = length(ulabs)
(nrow(points)-k)/(k-1)
ss_w
ss_b
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
(ss_b/ss_w)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
net[101:200]
sapply(net[101:200], length)
sapply(net[101:200], length)/9000
mean(sapply(net[101:200], length)/9000)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
sapply(net[101:200], length)/9000
mean(sapply(net[101:200], length)/9000)
args <- commandArgs(trailingOnly = FALSE)
arg_i = grep("--args", args)
if(length(arg_i) == 0) {
f = "/home/alexeyche/prog/alexeyche-junk/cns/cpp/out.json"
} else {
f = args[arg_i+1]
}
require(rjson)
f
fromJSON(f)
fromJSON(file = f)
data = fromJSON(file = f)
data$distance_matrix
dist = do.call(rbind, data$distance_matrix)
dim(dist)
gr_pl(dist)
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2", main="Metric MDS",    type="n")
lab_cols = rainbow(length(ulabs))
text(x, y, labels = labs, cex=.7, col=lab_cols[sapply(labs, function(l) which(l == ulabs))])
points(centroids, lwd=10, pch=3, col=lab_cols)
points(global_centroid, lwd=10, pch=3, col="black")
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
invisible(require(rjson))
?require
require(rjson, quietly=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
calinski_harabasz_criterion(points, ulabs, labs, centroids, global_centroid)
data$mean_rate
args
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/cross_spectrum_dist_test.R', echo=TRUE)
s1
fft(s1) * Conj(fft(s2))
plotl(fft(s1) * Conj(fft(s2))()
plot(fft(s1) * Conj(fft(s2)), type="l")
plot(abs(fft(s1) * Conj(fft(s2))), type="l")
plot(abs(fft(s1) * Conj(fft(s1))), type="l")
s1 = rnorm(10000)
plot(abs(fft(s1) * Conj(fft(s1))), type="l")
plot(Re(fft(s1) * Conj(fft(s1))), type="l")
?spec.pgram
spec.pgram(s1)
?spec.pgram
spec.pgram(s1, taper=10)
spec.pgram(s1, taper=0.5)
spec.pgram(s1, spans=c(3,5))
spec.pgram(s1, spans=c(3,10))
spec.pgram(s1, spans=c(0,5))
spec.pgram(s1, spans=c(1,5))
spec.pgram(s1, spans=c(1,100))
spec.pgram(s1, spans=c(1,10))
spec.pgram(s1, spans=c(3,10))
spec.pgram(s1, spans=c(3,100))
spec.pgram(s1, spans=c(3,1000))
?spec.pgram
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/cross_spectrum_dist_test.R', echo=TRUE)
spec.taper(s1)
plot(spec.taper(s1),type="l")
plot(spec.taper(s1, p=c(3,5)),type="l")
?spec.taper
plot(spec.taper(s1, p=5,type="l")
plot(spec.taper(s1, p=5),type="l")
plot(spec.taper(s1, p=0.5),type="l")
?spec.pragm
?spec.pgram
sales.spc <- spectrum(ts.union(BJsales, BJsales.lead),
kernel("modified.daniell", c(5,7)))
ts = ts.union(BJsales, BJsales.lead)
ts
kernel("modified.daniell", c(5,7))
plotl(kernel("modified.daniell", c(5,7)))
require(Rsnn)
plotl(kernel("modified.daniell", c(5,7)))
plotl(kernel("modified.daniell", c(5,10)))
plotl(kernel("modified.daniell", c(5,7)))
plotl(kernel("modified.daniell", c(1,7)))
plotl(kernel("modified.daniell", c(5,7)))
sales.spc <- spectrum(ts.union(BJsales, BJsales.lead))
sales.spc <- spectrum(ts.union(BJsales, BJsales.lead),
kernel("modified.daniell", c(5,7)))
?spec.pgram
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/cross_spectrum_dist_test.R', echo=TRUE)
?spec.pgram
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/cross_spectrum_dist_test.R', echo=TRUE)
?spec.pgram
plot(sales.spc, plot.type = "phase")
plot(sales.spc, plot.type = "coherency")
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/cross_spectrum_dist_test.R', echo=TRUE)
plotl(fs1)
plotl(Re(fs1))
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/cross_spectrum_dist_test.R', echo=TRUE)
fs1
source('~/prog/work/solomon/read.R', echo=TRUE)
source('~/prog/work/solomon/read.R', echo=TRUE)
source('~/prog/work/solomon/read.R', echo=TRUE)
source('~/prog/work/solomon/read.R', echo=TRUE)
source('~/prog/work/solomon/read.R', echo=TRUE)
source('~/prog/work/solomon/read.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
data$rates
target_rate = rep(10, 100)
target_rate^2
sqrt(sum(target_rate^2))
rates = data$rates
val = sqrt(sum((rates))^2)
val
exp( - (val-target_val)/200.0)
target_val = sqrt(sum(rep(target_rate, length(data$rates))^2))
target_val
rep(target_rate, length(data$rates))
length(data$rates)
rep(target_rate, length(data$rates))
length(data$rates)
rep(target_rate)
?rep
target_rate
target_rate
target_rate = 10.0
target_rate
rep(target_rate)
target_val = sqrt(sum(rep(target_rate, length(data$rates))^2))
target_val
exp( - (val-target_val)/200.0)
val * exp( - (rate_sum - target_rate_sum)^2/200.0)
rates = data$rates
target_rate_sum = sqrt(sum(rep(target_rate, length(data$rates))^2))
rate_sum = sqrt(sum((rates))^2)
val * exp( - (rate_sum - target_rate_sum)^2/200.0)
exp( - (rate_sum - target_rate_sum)^2/200.0)
rate_sum
target_rate_sum
- (rate_sum - target_rate_sum)^2/200.0
- (rate_sum - target_rate_sum)^2/2000.0
exp(- (rate_sum - target_rate_sum)^2/2000.0)
exp(- (rate_sum - target_rate_sum)^2/(200.0)^2)
exp(- (rate_sum - target_rate_sum)^2/(500.0)^2)
exp(- (rate_sum -rate_sum)^2/(500.0)^2)
rate_sum = rnorm(100, mean=10, sd=1)
exp(- (rate_sum -target_rate_sum)^2/(500.0)^2)
rate_sum
rates = rnorm(100, mean=10, sd=1)
target_rate_sum = sqrt(sum(rep(target_rate, length(data$rates))^2))
rate_sum = sqrt(sum((rates))^2)
exp( - (rate_sum - target_rate_sum)^2/500.0)
rate_sum
target_rate_sum
target_rate_sum
rates
rate_sum = sqrt(sum((rates))^2)
rate_sum
rate_sum = sqrt(sum((rates^2)))
rate_sum
exp( - (rate_sum - target_rate_sum)^2/500.0)
rates = rnorm(100, mean=10, sd=5)
target_rate_sum = sqrt(sum(rep(target_rate, length(data$rates))^2))
rate_sum = sqrt(sum((rates^2)))
exp( - (rate_sum - target_rate_sum)^2/500.0)
rates
rates = rnorm(100, mean=5, sd=5)
target_rate_sum = sqrt(sum(rep(target_rate, length(data$rates))^2))
rate_sum = sqrt(sum((rates^2)))
exp( - (rate_sum - target_rate_sum)^2/500.0)
rates = rnorm(100, mean=50, sd=5)
target_rate_sum = sqrt(sum(rep(target_rate, length(data$rates))^2))
rate_sum = sqrt(sum((rates^2)))
exp( - (rate_sum - target_rate_sum)^2/500.0)
rates = rnorm(100, mean=30, sd=5)
target_rate_sum = sqrt(sum(rep(target_rate, length(data$rates))^2))
rate_sum = sqrt(sum((rates^2)))
exp( - (rate_sum - target_rate_sum)^2/500.0)
rates = rnorm(100, mean=15, sd=5)
target_rate_sum = sqrt(sum(rep(target_rate, length(data$rates))^2))
rate_sum = sqrt(sum((rates^2)))
exp( - (rate_sum - target_rate_sum)^2/500.0)
rates
mean(rates)
rates = rnorm(100, mean=5, sd=5)
target_rate_sum = sqrt(sum(rep(target_rate, length(data$rates))^2))
rate_sum = sqrt(sum((rates^2)))
exp( - (rate_sum - target_rate_sum)^2/500.0)
mean_rates
mean(rates)
rates
rates = rnorm(100, mean=10, sd=5)
target_rate_sum = sqrt(sum(rep(target_rate, length(data$rates))^2))
rate_sum = sqrt(sum((rates^2)))
exp( - (rate_sum - target_rate_sum)^2/500.0)
rates = rnorm(100, mean=15, sd=5)
target_rate_sum = sqrt(sum(rep(target_rate, length(data$rates))^2))
rate_sum = sqrt(sum((rates^2)))
exp( - (rate_sum - target_rate_sum)^2/500.0)
mean(rates)
rates = data$rates
rates = rnorm(100, mean=15, sd=5)
target_rate_sum = sqrt(sum(rep(target_rate, length(data$rates))^2))
rate_sum = sqrt(sum((rates^2)))
if(mean(rates)>target_rate) {
val*exp( - (rate_sum - target_rate_sum)^2/1000.0)
} else {
val*exp( - (rate_sum - target_rate_sum)^2/500.0)
}
val
val=1
rates = data$rates
rates = rnorm(100, mean=15, sd=5)
target_rate_sum = sqrt(sum(rep(target_rate, length(data$rates))^2))
rate_sum = sqrt(sum((rates^2)))
if(mean(rates)>target_rate) {
val*exp( - (rate_sum - target_rate_sum)^2/1000.0)
} else {
val*exp( - (rate_sum - target_rate_sum)^2/500.0)
}
rates = rnorm(100, mean=5, sd=5)
target_rate_sum = sqrt(sum(rep(target_rate, length(data$rates))^2))
rate_sum = sqrt(sum((rates^2)))
if(mean(rates)>target_rate) {
val*exp( - (rate_sum - target_rate_sum)^2/1000.0)
} else {
val*exp( - (rate_sum - target_rate_sum)^2/500.0)
}
rates = data$rates
rates = rnorm(100, mean=20, sd=5)
target_rate_sum = sqrt(sum(rep(target_rate, length(data$rates))^2))
rate_sum = sqrt(sum((rates^2)))
if(mean(rates)>target_rate) {
val*exp( - (rate_sum - target_rate_sum)^2/2000.0)
} else {
val*exp( - (rate_sum - target_rate_sum)^2/500.0)
}
rates
rates = rnorm(100, mean=15, sd=5)
target_rate_sum = sqrt(sum(rep(target_rate, length(data$rates))^2))
rate_sum = sqrt(sum((rates^2)))
if(mean(rates)>target_rate) {
val*exp( - (rate_sum - target_rate_sum)^2/2000.0)
} else {
val*exp( - (rate_sum - target_rate_sum)^2/500.0)
}
rates
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
cat(calculate_criterion(data),"\n")
dist = do.call(rbind, data$distance_matrix)
labs = data$labels
ulabs = unique(labs)
if(all(dist == 0)) {
return(99999)
}
fit = cmdscale(dist, 2, eig=TRUE)
x <- fit$points[,1]
y <- fit$points[,2]
points = cbind(x,y)
global_centroid =  matrix(c(mean(x), mean(y)), nrow=1, ncol=2)
centroids = NULL
for(lab in ulabs) {
ci = which(labs == lab)
xc = x[ci]
yc = y[ci]
centroids = rbind(centroids, c(mean(xc), mean(yc)))
}
if(!we_are_in_r_studio) {
png(sprintf("%s_eval_dist_matrix.png", data$epoch),width=1024, height=768)
}
val = -100*calinski_harabasz_criterion(points, ulabs, labs, centroids, global_centroid)
vakl
val
rates = data$rates
target_rate_sum = sqrt(sum(rep(target_rate, length(data$rates))^2))
rate_sum = sqrt(sum((rates^2)))
if(mean(rates)>target_rate) {
val*exp( - (rate_sum - target_rate_sum)^2/2000.0)
} else {
val*exp( - (rate_sum - target_rate_sum)^2/500.0)
}
exp( - (rate_sum - target_rate_sum)^2/2000.0)
exp( - (rate_sum - target_rate_sum)^2/500.0)
mean(rates)
rates
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/interpolate_ucr_data.R', echo=TRUE)
setwd("~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts")
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/interpolate_ucr_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/ucr_data_to_spikes.R', echo=TRUE)
spikes_complect[[1]]$timeline
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
cat(calculate_criterion(data),"\n")
dist = do.call(rbind, data$distance_matrix)
labs = data$labels
ulabs = unique(labs)
if(all(dist == 0)) {
return(99999)
}
fit = cmdscale(dist, 2, eig=TRUE)
x <- fit$points[,1]
y <- fit$points[,2]
points = cbind(x,y)
global_centroid =  matrix(c(mean(x), mean(y)), nrow=1, ncol=2)
centroids = NULL
for(lab in ulabs) {
ci = which(labs == lab)
xc = x[ci]
yc = y[ci]
centroids = rbind(centroids, c(mean(xc), mean(yc)))
}
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
runname
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
runname
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
runname
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
output_spikes
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
output_spikes
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
