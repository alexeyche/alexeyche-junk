total_centroid
centroids
total_centroid =  matrix(c(mean(x), mean(y)), nrow=1, ncol=2)
fit = cmdscale(dist, 2, eig=TRUE)
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Metric    MDS",	type="n")
lab_cols = rainbow(length(lab_spikes$labels))
text(x, y, labels = lab_spikes$labels[lab_spikes$labels_id_timeline+1], cex=.7, col=lab_cols[lab_spikes$labels_id_timeline+1])
x_y = cbind(x,y)
dist_xy = function(x_y1, x_y2) {
sqrt((x_y1[1] - x_y2[1])^2 + (x_y1[2] - x_y2[2])^2)
}
total_centroid =  matrix(c(mean(x), mean(y)), nrow=1, ncol=2)
centroids = NULL
for(lab in lab_spikes$labels) {
labi = which(lab == lab_spikes$labels)
ci = which(lab_spikes$labels_id_timeline == labi-1)
xc = x[ci]
yc = y[ci]
centroids = rbind(centroids, c(mean(xc), mean(yc)))
}
dist_to_c = NULL
for(lab in lab_spikes$labels) {
labi = which(lab == lab_spikes$labels)
d = sapply(1:nrow(x_y), function(i) dist_xy(x_y[i,], centroids[labi, ]) )
dist_to_c = cbind(dist_to_c, d)
}
points(centroids, lwd=10, pch=3, col=lab_cols)
points(total_centroid, lwd=10, pch=3, col="black")
dist_to_c
dist_to_cd
d
dist_to_c
sse = 0
for(lab in lab_spikes$labels) {
labi = which(lab == lab_spikes$labels)
ci = which(lab_spikes$labels_id_timeline == labi-1)
d = dist_to_c[ci,labi]
sse = sse + d^2
}
sse
sse = 0
for(lab in lab_spikes$labels) {
labi = which(lab == lab_spikes$labels)
ci = which(lab_spikes$labels_id_timeline == labi-1)
d = dist_to_c[ci,labi]
sse = sse + sum(d^2)
}
sse
ci
ci
labi
centroid
centroids
dist_xy(centroids[labi,], total_centroid)
sse = 0
bss = 0
for(lab in lab_spikes$labels) {
labi = which(lab == lab_spikes$labels)
ci = which(lab_spikes$labels_id_timeline == labi-1)
d = dist_to_c[ci,labi]
sse = sse + sum(d^2)
bss = bss + length(d)*dist_xy(centroids[labi,], total_centroid)
}
bss
sse = 0
bss = 0
for(lab in lab_spikes$labels) {
labi = which(lab == lab_spikes$labels)
ci = which(lab_spikes$labels_id_timeline == labi-1)
d = dist_to_c[ci,labi]
sse = sse + sum(d^2)
bss = bss + length(d)*dist_xy(centroids[labi,], total_centroid)^2
}
bss
sse
sse+bss
sse-bss
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/eval_dist_matrix.R', echo=TRUE)
gr_pl(dist)
require(Rsnn)
gr_pl(dist)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
sse
bss
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
sse
bss
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
bss
sse
d
ifrom
ito
pairs
m1
gr_pl(m1)
gr_pl(m2)
dist
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
gr_pl(dist)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
x_y
centroids
total_centroid
labs
labs
?unique
rle(labs)
?rl
?rle
table(labs)
table(labs)[1]
which(lab == labs)
points[which(lab == labs)]
points = x_y
points[which(lab == labs)]
labi
labi=1
cpoints = points[which(lab == labs)]
d = sapply(1:nrow(cpoints), function(i) dist_xy(x_y[i,], centroids[labi, ]) )
points
cpoints = points[which(lab == labs),]
cpoints
d = sapply(1:nrow(cpoints), function(i) dist_xy(x_y[i,], centroids[labi, ]) )
d
sapply(points, function(x) x*2)
d = sapply(1:nrow(cpoints), function(i) dist_xy(cpoints[i,], centroids[labi, ]) )
d
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
cluster_lengths = table(labs)
ss_b = 0
cluster_length
cluster_lengths
labi=1
labi = which(lab == ulabs)
cluster_lengths[labi]
dist_xy(centroids[labi,], global_centroid)^2
centroids[labi,]
global_centroid
centroids[labi,]
(centroids[labi,])^2
sum((centroids[labi,])^2)
sqrt(sum((centroids[labi,])^2))
(centroids[labi,])^2
sum((centroids[labi,])^2)
sqrt(sum((centroids[labi,])^2))
dist_xy(centroids[labi,], global_centroid)
dist_xy(centroids[labi,], global_centroid)^2
ss_b
ss_b = 0
for(lab in ulabs) {
labi = which(lab == ulabs)
ss_b = ss_b + cluster_lengths[labi]*dist_xy(centroids[labi,], global_centroid)^2
}
ss_bn
ss_b
ss_w = 0
for(lab in ulabs) {
labi = which(lab == ulabs)
cpoints = points[which(lab == labs),]
d = sapply(1:nrow(cpoints), function(i) dist_xy(cpoints[i,], centroids[labi, ]) )
ss_w = ss_w + sum(d^2)
}
labs
points
points = cbind(x,y)
ss_w = 0
for(lab in ulabs) {
labi = which(lab == ulabs)
cpoints = points[which(lab == labs),]
d = sapply(1:nrow(cpoints), function(i) dist_xy(cpoints[i,], centroids[labi, ]) )
ss_w = ss_w + sum(d^2)
}
ss_w
nrow(points)-k
k = length(ulabs)
(nrow(points)-k)/(k-1)
ss_w
ss_b
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
(ss_b/ss_w)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
net[101:200]
sapply(net[101:200], length)
sapply(net[101:200], length)/9000
mean(sapply(net[101:200], length)/9000)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
sapply(net[101:200], length)/9000
mean(sapply(net[101:200], length)/9000)
args <- commandArgs(trailingOnly = FALSE)
arg_i = grep("--args", args)
if(length(arg_i) == 0) {
f = "/home/alexeyche/prog/alexeyche-junk/cns/cpp/out.json"
} else {
f = args[arg_i+1]
}
require(rjson)
f
fromJSON(f)
fromJSON(file = f)
data = fromJSON(file = f)
data$distance_matrix
dist = do.call(rbind, data$distance_matrix)
dim(dist)
gr_pl(dist)
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2", main="Metric MDS",    type="n")
lab_cols = rainbow(length(ulabs))
text(x, y, labels = labs, cex=.7, col=lab_cols[sapply(labs, function(l) which(l == ulabs))])
points(centroids, lwd=10, pch=3, col=lab_cols)
points(global_centroid, lwd=10, pch=3, col="black")
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
invisible(require(rjson))
?require
require(rjson, quietly=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
calinski_harabasz_criterion(points, ulabs, labs, centroids, global_centroid)
data$mean_rate
args
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/cross_spectrum_dist_test.R', echo=TRUE)
s1
fft(s1) * Conj(fft(s2))
plotl(fft(s1) * Conj(fft(s2))()
plot(fft(s1) * Conj(fft(s2)), type="l")
plot(abs(fft(s1) * Conj(fft(s2))), type="l")
plot(abs(fft(s1) * Conj(fft(s1))), type="l")
s1 = rnorm(10000)
plot(abs(fft(s1) * Conj(fft(s1))), type="l")
plot(Re(fft(s1) * Conj(fft(s1))), type="l")
?spec.pgram
spec.pgram(s1)
?spec.pgram
spec.pgram(s1, taper=10)
spec.pgram(s1, taper=0.5)
spec.pgram(s1, spans=c(3,5))
spec.pgram(s1, spans=c(3,10))
spec.pgram(s1, spans=c(0,5))
spec.pgram(s1, spans=c(1,5))
spec.pgram(s1, spans=c(1,100))
spec.pgram(s1, spans=c(1,10))
spec.pgram(s1, spans=c(3,10))
spec.pgram(s1, spans=c(3,100))
spec.pgram(s1, spans=c(3,1000))
?spec.pgram
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/cross_spectrum_dist_test.R', echo=TRUE)
spec.taper(s1)
plot(spec.taper(s1),type="l")
plot(spec.taper(s1, p=c(3,5)),type="l")
?spec.taper
plot(spec.taper(s1, p=5,type="l")
plot(spec.taper(s1, p=5),type="l")
plot(spec.taper(s1, p=0.5),type="l")
?spec.pragm
?spec.pgram
sales.spc <- spectrum(ts.union(BJsales, BJsales.lead),
kernel("modified.daniell", c(5,7)))
ts = ts.union(BJsales, BJsales.lead)
ts
kernel("modified.daniell", c(5,7))
plotl(kernel("modified.daniell", c(5,7)))
require(Rsnn)
plotl(kernel("modified.daniell", c(5,7)))
plotl(kernel("modified.daniell", c(5,10)))
plotl(kernel("modified.daniell", c(5,7)))
plotl(kernel("modified.daniell", c(1,7)))
plotl(kernel("modified.daniell", c(5,7)))
sales.spc <- spectrum(ts.union(BJsales, BJsales.lead))
sales.spc <- spectrum(ts.union(BJsales, BJsales.lead),
kernel("modified.daniell", c(5,7)))
?spec.pgram
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/cross_spectrum_dist_test.R', echo=TRUE)
?spec.pgram
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/cross_spectrum_dist_test.R', echo=TRUE)
?spec.pgram
plot(sales.spc, plot.type = "phase")
plot(sales.spc, plot.type = "coherency")
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/cross_spectrum_dist_test.R', echo=TRUE)
plotl(fs1)
plotl(Re(fs1))
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/cross_spectrum_dist_test.R', echo=TRUE)
fs1
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
system(sprintf("( eog -w %s 2>&1 1>/dev/null )&", pic_file))
system(sprintf("( eog -w %s 2>&1 1>/dev/null )&", pic_file))
system(sprintf("( eog -w %s 2>&1 1>/dev/null )&", pic_file))
system(sprintf("( eog -w %s 2>&1 1>/dev/null )&", pic_file))
system(sprintf("( eog -w %s 2>&1 1>/dev/null )&", pic_file))
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/gen_test_data.R', echo=TRUE)
net
cor(net_b[1,], net_b[2,])
cor(net_b[1,], net_b[3,])
correllated_neurons
require(Rsnn)
require(rjson)
setwd("~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts")
source('plot_stat.R')
source('gen_poisson.R')
const = "/home/alexeyche/prog//alexeyche-junk/cns/cpp/const.json"
cr = fromJSON(parseConst(const))
cr$sim_configuration$net_layers_conf[[1]]$size = 100
cr$sim_configuration$net_layers_conf[[1]]$neuron_conf$learning_rule = "OptimalStdp"
cr$sim_configuration$conn_map[["0->1"]][[1]]$weight_distr = "Norm(1.5,0.05)"
cr$sim_configuration$neurons_to_listen = c(100, 151)
#cr$sim_configuration$sim_run_conf$seed = 1
#cr$learning_rules$Stdp$learning_rate = 0.75
#cr$learning_rules$Stdp$a_minus = 5
cr$learning_rules$OptimalStdp$learning_rate = 0.1
cjson = toJSON(cr)
const = RConstants$new(cjson)
s = RSim$new(const, jobs=4)
rate = 5
len = 10000
N = cr$sim_configuration$input_layers_conf[[1]]$size
set.seed(1)
input_net = gen_poisson(N)
sp = list(spikes_list=input_net, labels=c("1"), timeline=c(len))
prast(input_net,T0=0,Tmax=1000)
input_net = gen_correlated_poisson(N)
prast(input_net,T0=0,Tmax=1000)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
cr$learning_rules$OptimalStdp$learning_rate
cr$learning_rules$OptimalStdp$weigh_decay
cr$learning_rules$OptimalStdp$weight_decay
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
model[["sim_time"]]
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
correllated_neurons=50
group_size=2
seq(1, correllated_neurons, by=group_size)
0:(group_size-1)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/gen_poisson.R', echo=TRUE)
input_net = gen_correlated_poisson(N, mean_rate=rate)
prast(input_net,T0=0,Tmax=1000)
input_net = gen_correlated_poisson(N, mean_rate=rate, group_size=10)
prast(input_net,T0=0,Tmax=1000)
input_net = gen_correlated_poisson(N, mean_rate=rate, group_size=50)
prast(input_net,T0=0,Tmax=1000)
mean_rate=10; correllated_neurons=50; group_size=50; correlation=0.5; len=10000
corr_rate = mean_rate*getCorrRate(correlation, 1)/2
decorr_rate = mean_rate*(1-getCorrRate(correlation, 1)/2)
corr_rate
decorr_rate
rates
rates = c(rep(decorr_rate, correllated_neurons), rep(mean_rate, N-correllated_neurons))
rate
rates
corr_spikes = vector("list",N)
seq(1, correllated_neurons, by=group_size)
0:(group_size-1)
corr_spikes = vector("list",N)
for(ni in seq(1, correllated_neurons, by=group_size)) {
pair_corr_spikes = rpois(len, corr_rate/1000.0)
for(i in 0:(group_size-1)) {
corr_spikes[[ni+group_size]] = pair_corr_spikes
}
}
corr_spikes
net = vector("list",N)
net_b = NULL
for(ni in 1:N) {
spikes_bin = rpois(len, rates[ni]/1000.0)  # ms precision
if(!is.null(corr_spikes[[ni]])) spikes_bin = spikes_bin + corr_spikes[[ni]]
net_b = rbind(net_b, spikes_bin)
net[[ni]] = which(spikes_bin == 1)
}
cor(net_b[1,], net_b[2,]
cor(net_b[1,], net_b[2,])
cor(net_b[1,], net_b[3,])
corr_spikes
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/gen_poisson.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/gen_poisson.R', echo=TRUE)
mean_rate=10; correllated_neurons=50; group_size=50; correlation=0.5; len=10000
corr_rate = mean_rate*getCorrRate(correlation, 1)/2
decorr_rate = mean_rate*(1-getCorrRate(correlation, 1)/2)
rates = c(rep(decorr_rate, correllated_neurons), rep(mean_rate, N-correllated_neurons))
corr_spikes = vector("list",N)
for(ni in seq(1, correllated_neurons, by=group_size)) {
pair_corr_spikes = rpois(len, corr_rate/1000.0)
for(gi in 0:(group_size-1)) {
corr_spikes[[ni+gi]] = pair_corr_spikes
}
}
net = vector("list",N)
net_b = NULL
for(ni in 1:N) {
spikes_bin = rpois(len, rates[ni]/1000.0)  # ms precision
if(!is.null(corr_spikes[[ni]])) spikes_bin = spikes_bin + corr_spikes[[ni]]
net_b = rbind(net_b, spikes_bin)
net[[ni]] = which(spikes_bin == 1)
}
prast(net,T0=0,Tmax=1000)
cor(net_b[1,],net_b[2,])
cor(net_b[1,],net_b[3,])
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/gen_poisson.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
input_net = gen_correlated_poisson(N, mean_rate=rate, group_size=5)
prast(input_net,T0=0,Tmax=1000)
prast(input_net,T0=0,Tmax=1000)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
prast(input_net)
prast(input_net,T0=0,Tmax=1000)
prast(input_net,T0=0,Tmax=1000)
require(Rsnn)
require(rjson)
setwd("~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts")
source('plot_stat.R')
source('gen_poisson.R')
const = "/home/alexeyche/prog//alexeyche-junk/cns/cpp/const.json"
cr = fromJSON(parseConst(const))
cr$sim_configuration$net_layers_conf[[1]]$size = 100
cr$sim_configuration$net_layers_conf[[1]]$neuron_conf$learning_rule = "OptimalStdp"
cr$sim_configuration$conn_map[["0->1"]][[1]]$weight_distr = "Norm(1.5,0.05)"
cr$sim_configuration$neurons_to_listen = c(100, 151)
#cr$sim_configuration$sim_run_conf$seed = 1
#cr$learning_rules$Stdp$learning_rate = 0.75
#cr$learning_rules$Stdp$a_minus = 5
cr$learning_rules$OptimalStdp$learning_rate = 0.04
cr$learning_rules$OptimalStdp$weight_decay = 0.04
cjson = toJSON(cr)
const = RConstants$new(cjson)
s = RSim$new(const, jobs=4)
rate = 5
len = 10000
N = cr$sim_configuration$input_layers_conf[[1]]$size
set.seed(1)
input_net = gen_correlated_poisson(N, mean_rate=rate, group_size=5)
prast(input_net,T0=0,Tmax=1000)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
prast(input_net,T0=1000,Tmax=2000)
prast(input_net,T0=1000,Tmax=3000)
prast(input_net,T0=1000,Tmax=3000)
input_net
dev.off()
input_net
prast(input_net,T0=1000,Tmax=3000)
prast(input_net,T0=1000,Tmax=5000)
group_size=5
corr_rate = mean_rate*getCorrRate(correlation, 1)/2
decorr_rate = mean_rate*(1-getCorrRate(correlation, 1)/2)
rates = c(rep(decorr_rate, correllated_neurons), rep(mean_rate, N-correllated_neurons))
corr_spikes = vector("list",N)
for(ni in seq(1, correllated_neurons, by=group_size)) {
pair_corr_spikes = rpois(len, corr_rate/1000.0)
for(gi in 0:(group_size-1)) {
corr_spikes[[ni+gi]] = pair_corr_spikes
}
}
mean_rate=5; correllated_neurons=2; group_size=2; correlation=0.5
corr_rate = mean_rate*getCorrRate(correlation, 1)/2
decorr_rate = mean_rate*(1-getCorrRate(correlation, 1)/2)
rates = c(rep(decorr_rate, correllated_neurons), rep(mean_rate, N-correllated_neurons))
corr_spikes = vector("list",N)
for(ni in seq(1, correllated_neurons, by=group_size)) {
pair_corr_spikes = rpois(len, corr_rate/1000.0)
for(gi in 0:(group_size-1)) {
corr_spikes[[ni+gi]] = pair_corr_spikes
}
}
corr_spikes
group_size
seq(1, correllated_neurons, by=group_size)
seq(1, correllated_neurons, by=group_size)
correllated_neurons
correllated_neurons=50
correllated_neurons
corr_rate = mean_rate*getCorrRate(correlation, 1)/2
decorr_rate = mean_rate*(1-getCorrRate(correlation, 1)/2)
rates = c(rep(decorr_rate, correllated_neurons), rep(mean_rate, N-correllated_neurons))
corr_spikes = vector("list",N)
for(ni in seq(1, correllated_neurons, by=group_size)) {
pair_corr_spikes = rpois(len, corr_rate/1000.0)
for(gi in 0:(group_size-1)) {
corr_spikes[[ni+gi]] = pair_corr_spikes
}
}
corr_spikes
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/gen_poisson.R', echo=TRUE)
input_net = gen_correlated_poisson(N, mean_rate=rate, group_size=5)
prast(input_net,T0=0,Tmax=1000)
input_net = gen_correlated_poisson(N, mean_rate=rate, group_size=2)
prast(input_net,T0=0,Tmax=1000)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
sp
prast(sp$spikes_list, T0=0,Tmax=1000)
prast(sp$spikes_list, T0=0,Tmax=1000)
prast(sp$spikes_list, T0=0,Tmax=1000)
prast(sp$spikes_list, T0=0,Tmax=1000)
pic_dir
pic_dir = tempdir()
pic_dir
?tempdir
pic_dir = tempdir()
pic_dir
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/sim.R', echo=TRUE)
prast(net,T0=0,Tmax=1000, lab=sprintf("epoch %s", ep))
dev.off()
prast(net,T0=0,Tmax=1000, lab=sprintf("epoch %s", ep))
