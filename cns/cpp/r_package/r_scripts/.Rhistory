require(Rdnn)
require(rjson)
setwd("~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts")
source('plot_stat.R')
const = "/home/alexeyche/cpp/const.json"
cr = fromJSON(parseConst(const))
cjson = toJSON(cr)
const = RConstants$new(cjson)
s = RSim$new(const)
# len = 10000
# t = seq(1,len)/1000
# Iin = 0.0 +0.8*cos(2*pi*3.5*t + 0.8)
# RProto$new("/home/alexeyche/cpp/build/input.pb")$write(list(values=Iin), "TimeSeries")
source("./ucr_data_to_spikes.R")
spikes = spikes_complect[["train"]]$values
spikes = sapply(spikes_complect[["train"]]$values, function(x) x[x<10000])
s$setInputSpikes(spikes, "SpikeSequenceNeuron")
s$run(4)
stat = s$getStat()
net = s$getSpikes()
m = s$getModel()
prast(net,T0=0,Tmax=10000)
lsize = sapply(cr$sim_configuration$layers, function(x) x$size)
w = m[["w"]]
maps = getWeightMaps(5,5, w, lsize)
maps
gr_pl(maps)
gr_pl(maps[[2]])
plotl(maps[[2]][5,])
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
plotl(maps[[2]][5,])
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
plotl(maps[[2]][5,])
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
names(stat[[1]])
s$saveModel("/home/alexeyche/cpp/build/model.pb")
s$saveModel("/home/alexeyche/cpp/build/model.pb")
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
gr_pl(t(w))
gr_pl(maps[[2]])
plotl(get_st(stat[[1]], "u")[1:1000])
plotl(get_st(stat[[1]], "Stdp_w")[1:1000])
plotl(stat[[1]][["Stdp_w10"]])
plotl(stat[[1]][["Stdp_w100"]])
plotl(stat[[1]][["Stdp_w101"]])
plotl(stat[[1]][["Stdp_w102"]])
plotl(stat[[1]][["Stdp_w103"]])
plotl(stat[[1]][["Stdp_w104"]])
plotl(stat[[1]][["Stdp_w105"]])
plotl(stat[[1]][["Stdp_w106"]])
plotl(stat[[1]][["Stdp_w107"]])
plotl(stat[[1]][["Stdp_w108"]])
plotl(stat[[1]][["Stdp_w109"]])
plotl(stat[[1]][["Stdp_w70"]])
plotl(stat[[1]][["Stdp_w72"]])
plotl(get_st(stat[[1]], "Stdp_w")[1,1:1000])
ww - get_st(stat[[1]], "Stdp_w")
ww = get_st(stat[[1]], "Stdp_w")
gr_pl(w)
gr_pl(ww)
gr_pl(ww[,1:100])
gr_pl(ww[,1:1000])
colMeans(ww)
plotl(colMeans(ww))
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
plotl(colMeans(get_st(stat[[1]], "Stdp_w"))[1000:2000])
colMeans(get_st(stat[[1]], "Stdp_x"))
plotl(colMeans(get_st(stat[[1]], "Stdp_x")))
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
sapply(length, net)
sapply(net, length)
which(sapply(net, length)>600)
net[[145]]
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
source('~/cpp/r_package/r_scripts/sim.R', echo=TRUE)
