dist_to_c = NULL
for(lab in lab_spikes$labels) {
labi = which(lab == lab_spikes$labels)
d = sapply(1:nrow(x_y), function(i) dist_xy(x_y[i,], centroids[labi, ]) )
dist_to_c = cbind(dist_to_c, d)
}
dist_to_c
centroids
total_centroid =  c(mean(x), mean(y))
total_centroid
x
fit = cmdscale(dist, 2, eig=TRUE)
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Metric    MDS",	type="n")
lab_cols = rainbow(length(lab_spikes$labels))
text(x, y, labels = lab_spikes$labels[lab_spikes$labels_id_timeline+1], cex=.7, col=lab_cols[lab_spikes$labels_id_timeline+1])
x_y = cbind(x,y)
dist_xy = function(x_y1, x_y2) {
sqrt((x_y1[1] - x_y2[1])^2 + (x_y1[2] - x_y2[2])^2)
}
total_centroid =  c(mean(x), mean(y))
centroids = NULL
for(lab in lab_spikes$labels) {
labi = which(lab == lab_spikes$labels)
ci = which(lab_spikes$labels_id_timeline == labi-1)
xc = x[ci]
yc = y[ci]
centroids = rbind(centroids, c(mean(xc), mean(yc)))
}
dist_to_c = NULL
for(lab in lab_spikes$labels) {
labi = which(lab == lab_spikes$labels)
d = sapply(1:nrow(x_y), function(i) dist_xy(x_y[i,], centroids[labi, ]) )
dist_to_c = cbind(dist_to_c, d)
}
points(centroids, lwd=10, pch=3, col=lab_cols)
points(total_centroid, lwd=10, pch=3, col="black")
total_centroid
points(total_centroid, lwd=10, pch=3, col="black")
points(0,0, lwd=10, pch=3, col="black")
total_centroid
total_centroid
centroids
total_centroid =  matrix(c(mean(x), mean(y)), nrow=1, ncol=2)
fit = cmdscale(dist, 2, eig=TRUE)
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Metric    MDS",	type="n")
lab_cols = rainbow(length(lab_spikes$labels))
text(x, y, labels = lab_spikes$labels[lab_spikes$labels_id_timeline+1], cex=.7, col=lab_cols[lab_spikes$labels_id_timeline+1])
x_y = cbind(x,y)
dist_xy = function(x_y1, x_y2) {
sqrt((x_y1[1] - x_y2[1])^2 + (x_y1[2] - x_y2[2])^2)
}
total_centroid =  matrix(c(mean(x), mean(y)), nrow=1, ncol=2)
centroids = NULL
for(lab in lab_spikes$labels) {
labi = which(lab == lab_spikes$labels)
ci = which(lab_spikes$labels_id_timeline == labi-1)
xc = x[ci]
yc = y[ci]
centroids = rbind(centroids, c(mean(xc), mean(yc)))
}
dist_to_c = NULL
for(lab in lab_spikes$labels) {
labi = which(lab == lab_spikes$labels)
d = sapply(1:nrow(x_y), function(i) dist_xy(x_y[i,], centroids[labi, ]) )
dist_to_c = cbind(dist_to_c, d)
}
points(centroids, lwd=10, pch=3, col=lab_cols)
points(total_centroid, lwd=10, pch=3, col="black")
dist_to_c
dist_to_cd
d
dist_to_c
sse = 0
for(lab in lab_spikes$labels) {
labi = which(lab == lab_spikes$labels)
ci = which(lab_spikes$labels_id_timeline == labi-1)
d = dist_to_c[ci,labi]
sse = sse + d^2
}
sse
sse = 0
for(lab in lab_spikes$labels) {
labi = which(lab == lab_spikes$labels)
ci = which(lab_spikes$labels_id_timeline == labi-1)
d = dist_to_c[ci,labi]
sse = sse + sum(d^2)
}
sse
ci
ci
labi
centroid
centroids
dist_xy(centroids[labi,], total_centroid)
sse = 0
bss = 0
for(lab in lab_spikes$labels) {
labi = which(lab == lab_spikes$labels)
ci = which(lab_spikes$labels_id_timeline == labi-1)
d = dist_to_c[ci,labi]
sse = sse + sum(d^2)
bss = bss + length(d)*dist_xy(centroids[labi,], total_centroid)
}
bss
sse = 0
bss = 0
for(lab in lab_spikes$labels) {
labi = which(lab == lab_spikes$labels)
ci = which(lab_spikes$labels_id_timeline == labi-1)
d = dist_to_c[ci,labi]
sse = sse + sum(d^2)
bss = bss + length(d)*dist_xy(centroids[labi,], total_centroid)^2
}
bss
sse
sse+bss
sse-bss
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/eval_dist_matrix.R', echo=TRUE)
gr_pl(dist)
require(Rsnn)
gr_pl(dist)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
sse
bss
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
sse
bss
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
bss
sse
d
ifrom
ito
pairs
m1
gr_pl(m1)
gr_pl(m2)
dist
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
gr_pl(dist)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
x_y
centroids
total_centroid
labs
labs
?unique
rle(labs)
?rl
?rle
table(labs)
table(labs)[1]
which(lab == labs)
points[which(lab == labs)]
points = x_y
points[which(lab == labs)]
labi
labi=1
cpoints = points[which(lab == labs)]
d = sapply(1:nrow(cpoints), function(i) dist_xy(x_y[i,], centroids[labi, ]) )
points
cpoints = points[which(lab == labs),]
cpoints
d = sapply(1:nrow(cpoints), function(i) dist_xy(x_y[i,], centroids[labi, ]) )
d
sapply(points, function(x) x*2)
d = sapply(1:nrow(cpoints), function(i) dist_xy(cpoints[i,], centroids[labi, ]) )
d
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
cluster_lengths = table(labs)
ss_b = 0
cluster_length
cluster_lengths
labi=1
labi = which(lab == ulabs)
cluster_lengths[labi]
dist_xy(centroids[labi,], global_centroid)^2
centroids[labi,]
global_centroid
centroids[labi,]
(centroids[labi,])^2
sum((centroids[labi,])^2)
sqrt(sum((centroids[labi,])^2))
(centroids[labi,])^2
sum((centroids[labi,])^2)
sqrt(sum((centroids[labi,])^2))
dist_xy(centroids[labi,], global_centroid)
dist_xy(centroids[labi,], global_centroid)^2
ss_b
ss_b = 0
for(lab in ulabs) {
labi = which(lab == ulabs)
ss_b = ss_b + cluster_lengths[labi]*dist_xy(centroids[labi,], global_centroid)^2
}
ss_bn
ss_b
ss_w = 0
for(lab in ulabs) {
labi = which(lab == ulabs)
cpoints = points[which(lab == labs),]
d = sapply(1:nrow(cpoints), function(i) dist_xy(cpoints[i,], centroids[labi, ]) )
ss_w = ss_w + sum(d^2)
}
labs
points
points = cbind(x,y)
ss_w = 0
for(lab in ulabs) {
labi = which(lab == ulabs)
cpoints = points[which(lab == labs),]
d = sapply(1:nrow(cpoints), function(i) dist_xy(cpoints[i,], centroids[labi, ]) )
ss_w = ss_w + sum(d^2)
}
ss_w
nrow(points)-k
k = length(ulabs)
(nrow(points)-k)/(k-1)
ss_w
ss_b
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
(ss_b/ss_w)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
net[101:200]
sapply(net[101:200], length)
sapply(net[101:200], length)/9000
mean(sapply(net[101:200], length)/9000)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
sapply(net[101:200], length)/9000
mean(sapply(net[101:200], length)/9000)
args <- commandArgs(trailingOnly = FALSE)
arg_i = grep("--args", args)
if(length(arg_i) == 0) {
f = "/home/alexeyche/prog/alexeyche-junk/cns/cpp/out.json"
} else {
f = args[arg_i+1]
}
require(rjson)
f
fromJSON(f)
fromJSON(file = f)
data = fromJSON(file = f)
data$distance_matrix
dist = do.call(rbind, data$distance_matrix)
dim(dist)
gr_pl(dist)
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2", main="Metric MDS",    type="n")
lab_cols = rainbow(length(ulabs))
text(x, y, labels = labs, cex=.7, col=lab_cols[sapply(labs, function(l) which(l == ulabs))])
points(centroids, lwd=10, pch=3, col=lab_cols)
points(global_centroid, lwd=10, pch=3, col="black")
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
invisible(require(rjson))
?require
require(rjson, quietly=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
calinski_harabasz_criterion(points, ulabs, labs, centroids, global_centroid)
data$mean_rate
args
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/cross_spectrum_dist_test.R', echo=TRUE)
s1
fft(s1) * Conj(fft(s2))
plotl(fft(s1) * Conj(fft(s2))()
plot(fft(s1) * Conj(fft(s2)), type="l")
plot(abs(fft(s1) * Conj(fft(s2))), type="l")
plot(abs(fft(s1) * Conj(fft(s1))), type="l")
s1 = rnorm(10000)
plot(abs(fft(s1) * Conj(fft(s1))), type="l")
plot(Re(fft(s1) * Conj(fft(s1))), type="l")
?spec.pgram
spec.pgram(s1)
?spec.pgram
spec.pgram(s1, taper=10)
spec.pgram(s1, taper=0.5)
spec.pgram(s1, spans=c(3,5))
spec.pgram(s1, spans=c(3,10))
spec.pgram(s1, spans=c(0,5))
spec.pgram(s1, spans=c(1,5))
spec.pgram(s1, spans=c(1,100))
spec.pgram(s1, spans=c(1,10))
spec.pgram(s1, spans=c(3,10))
spec.pgram(s1, spans=c(3,100))
spec.pgram(s1, spans=c(3,1000))
?spec.pgram
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/cross_spectrum_dist_test.R', echo=TRUE)
spec.taper(s1)
plot(spec.taper(s1),type="l")
plot(spec.taper(s1, p=c(3,5)),type="l")
?spec.taper
plot(spec.taper(s1, p=5,type="l")
plot(spec.taper(s1, p=5),type="l")
plot(spec.taper(s1, p=0.5),type="l")
?spec.pragm
?spec.pgram
sales.spc <- spectrum(ts.union(BJsales, BJsales.lead),
kernel("modified.daniell", c(5,7)))
ts = ts.union(BJsales, BJsales.lead)
ts
kernel("modified.daniell", c(5,7))
plotl(kernel("modified.daniell", c(5,7)))
require(Rsnn)
plotl(kernel("modified.daniell", c(5,7)))
plotl(kernel("modified.daniell", c(5,10)))
plotl(kernel("modified.daniell", c(5,7)))
plotl(kernel("modified.daniell", c(1,7)))
plotl(kernel("modified.daniell", c(5,7)))
sales.spc <- spectrum(ts.union(BJsales, BJsales.lead))
sales.spc <- spectrum(ts.union(BJsales, BJsales.lead),
kernel("modified.daniell", c(5,7)))
?spec.pgram
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/cross_spectrum_dist_test.R', echo=TRUE)
?spec.pgram
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/cross_spectrum_dist_test.R', echo=TRUE)
?spec.pgram
plot(sales.spc, plot.type = "phase")
plot(sales.spc, plot.type = "coherency")
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/cross_spectrum_dist_test.R', echo=TRUE)
plotl(fs1)
plotl(Re(fs1))
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/cross_spectrum_dist_test.R', echo=TRUE)
fs1
source('~/prog/work/solomon/read.R', echo=TRUE)
source('~/prog/work/solomon/read.R', echo=TRUE)
source('~/prog/work/solomon/read.R', echo=TRUE)
source('~/prog/work/solomon/read.R', echo=TRUE)
source('~/prog/work/solomon/read.R', echo=TRUE)
source('~/prog/work/solomon/read.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/vis_p_stat.R', echo=TRUE)
install.packages("irlba")
require(irliba)
require(irlba)
?irlba
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/vis_p_stat.R', echo=TRUE)
irlba(feats, nu=2, nv=2)
feats[1,]
irlba(feats, adjust=10)
irlba(feats, adjust=1)
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
#########################
rate_penalty = function(val) {
rates = data$rates
target_rate_sum = sqrt(sum(rep(target_rate, length(data$rates))^2))
rate_sum = sqrt(sum((rates^2)))
if(mean(rates)>target_rate) {
val*exp( - (rate_sum - target_rate_sum)^2/2000.0)
} else {
val*exp( - (rate_sum - target_rate_sum)^2/500.0)
}
}
exp( - (rate_sum - target_rate_sum)^2/2000.0)
rates = data$rates
target_rate_sum = sqrt(sum(rep(target_rate, length(data$rates))^2))
rate_sum = sqrt(sum((rates^2)))
exp( - (rate_sum - target_rate_sum)^2/2000.0)
target_rate_sum
data$rates
data
require(rjson, quietly=TRUE)
args <- commandArgs(trailingOnly = FALSE)
we_are_in_r_studio = length(grep("RStudio", args)) > 0
arg_i = grep("--args", args)
if(we_are_in_r_studio) {
method = "nn_nmi"
f = "/home/alexeyche/prog/sim_spear/eval_clustering_p_stat_structure/6031/const.json"
} else {
usage = function() {
cat("Options:\n\t--method=(clustering|NN_NMI)\n\t--stat=json_file_with_stat\n")
q()
}
if(length(arg_i) == 0) usage()
i = 1
method = f = NULL
while(i <= length(args)) {
if(args[i] == "--method") {
method = args[i+1]
i = i + 1
} else
if(args[i] == "--stat") {
f = args[i+1]
i = i + 1
}
i = i + 1
}
if((is.null( c(method, f)))||(is.na( c(method, f)))) usage()
}
data = fromJSON(file = f)
target_rate = 10.0
data
data$rates
require(rjson, quietly=TRUE)
args <- commandArgs(trailingOnly = FALSE)
we_are_in_r_studio = length(grep("RStudio", args)) > 0
arg_i = grep("--args", args)
if(we_are_in_r_studio) {
method = "nn_nmi"
f = "/home/alexeyche/prog/sim_spear/eval_clustering_p_stat_structure/6031/1_proc_output.json"
} else {
usage = function() {
cat("Options:\n\t--method=(clustering|NN_NMI)\n\t--stat=json_file_with_stat\n")
q()
}
if(length(arg_i) == 0) usage()
i = 1
method = f = NULL
while(i <= length(args)) {
if(args[i] == "--method") {
method = args[i+1]
i = i + 1
} else
if(args[i] == "--stat") {
f = args[i+1]
i = i + 1
}
i = i + 1
}
if((is.null( c(method, f)))||(is.na( c(method, f)))) usage()
}
data = fromJSON(file = f)
target_rate = 10.0
###################################
dist_xy = function(x_y1, x_y2) {
sqrt((x_y1[1] - x_y2[1])^2 + (x_y1[2] - x_y2[2])^2)
}
sse_bss_criterion = function(points, ulabs, centroids, global_centroid) {
dist_to_c = NULL
for(lab in ulabs) {
labi = which(lab == ulabs)
d = sapply(1:nrow(points), function(i) dist_xy(points[i,], centroids[labi, ]) )
dist_to_c = cbind(dist_to_c, d)
}
sse = 0
bss = 0
for(lab in ulabs) {
labi = which(lab == ulabs)
ci = which(labs == lab)
d = dist_to_c[ci,labi]
sse = sse + sum(d^2)
bss = bss + length(d)*dist_xy(centroids[labi,], global_centroid)^2
}
return(sse-bss)
}
calinski_harabasz_criterion = function(points, ulabs, labs, centroids, global_centroid) {
cluster_lengths = table(labs)
ss_b = 0
for(lab in ulabs) {
labi = which(lab == ulabs)
ss_b = ss_b + cluster_lengths[labi]*dist_xy(centroids[labi,], global_centroid)^2
}
ss_w = 0
for(lab in ulabs) {
labi = which(lab == ulabs)
cpoints = points[which(lab == labs),]
d = sapply(1:nrow(cpoints), function(i) dist_xy(cpoints[i,], centroids[labi, ]) )
ss_w = ss_w + sum(d^2)
}
k = length(ulabs)
return( (ss_b/ss_w) )
}
#########################
rate_penalty = function(val) {
rates = data$rates
target_rate_sum = sqrt(sum(rep(target_rate, length(data$rates))^2))
rate_sum = sqrt(sum((rates^2)))
if(mean(rates)>target_rate) {
val*exp( - (rate_sum - target_rate_sum)^2/2000.0)
} else {
val*exp( - (rate_sum - target_rate_sum)^2/500.0)
}
}
rates = data$rates
target_rate_sum = sqrt(sum(rep(target_rate, length(data$rates))^2))
rate_sum = sqrt(sum((rates^2)))
rates
target_rate_sum
sqrt(sum((rates^2)))
exp( - (rate_sum - target_rate_sum)^2/2000.0)
rate_sum =seq(50,200)
exp( - (rate_sum - target_rate_sum)^2/2000.0)
plotl(exp( - (rate_sum - target_rate_sum)^2/2000.0))
plot(exp( - (rate_sum - target_rate_sum)^2/2000.0),type="l")
plot(rate_sum, exp( - (rate_sum - target_rate_sum)^2/2000.0),type="l")
plot(rate_sum, 5*exp( - (rate_sum - target_rate_sum)^2/2000.0),type="l")
plot(rate_sum, 10*exp( - (rate_sum - target_rate_sum)^2/2000.0),type="l")
mod = 10*exp( - (rate_sum - target_rate_sum)^2/2000.0)
which(mod > 1)
mod
which(mod > 1)
mod[which(mod > 1)] <- 1
plotl(mod)
plot(mod)
source('~/prog/alexeyche-junk/cns/cpp/scripts/eval_dist_matrix.R', echo=TRUE)
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
median
?median
source('~/prog/alexeyche-junk/cns/cpp/r_package/r_scripts/get_sim_data.R', echo=TRUE)
