"LeakyIntegrateAndFire",
list(tau_m=tau_m, rest_pot=0.0, tau_ref=2.0, noise=.0)
)
const$setElement("Determ", list(threshold=thresh))
const$addLayer(
list(size=M, neuron="LeakyIntegrateAndFire", act_function="Determ", input="InputTimeSeries")
)
s$build()
s$setTimeSeries(list(values=x.c, ts_info=inp$ts_info), "InputTimeSeries")
s$run(jobs)
sp = s$getSpikes()
prast(sp,T0=0,Tmax=1000)
k = RKernel$new()
K = k$run(sp, list(preprocessor="Epsp(10)", kernel="Dot"))
gr_pl(K)
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
simple_metric(K)
K
simple_metric(K)
get.labs(K)
inp$ts_info
require(Rdnn)
setwd(path.expand("~/dnn/r_scripts"))
setVerboseLevel(0)
M = 100
tau_m = 5
tau_ref = 2.0
thresh = 0.1
dt = 1
jobs = 1
low_f = 10
high_f = 300
samp_rate = 2000
seq.fun = log.seq
inp = proto.read("~/dnn/ts/synthetic_control_300_len_6_classes_train.pb")
x = inp$values[1,]
x.c = conv.gammatones(x, seq.fun(low_f, high_f, length.out=M), samp_rate)
#proto.write("~/dnn/ts/iaf_gammatones_raw.pb", list(values=x.c, ts_info=inp$ts_info), "TimeSeries")
gr_pl(t(x.c[,1:500]))
s = RSim$new()
const = s$getConst()
const$setElement(
"LeakyIntegrateAndFire",
list(tau_m=tau_m, rest_pot=0.0, tau_ref=tau_ref, noise=.0)
)
const$setElement("Determ", list(threshold=thresh))
const$addLayer(
list(size=M, neuron="LeakyIntegrateAndFire", act_function="Determ", input="InputTimeSeries")
)
s$build()
s$setTimeSeries(list(values=x.c, ts_info=inp$ts_info), "InputTimeSeries")
s$run(jobs)
sp = s$getSpikes()
prast(sp,T0=0,Tmax=1000)
prast(sp,T0=0,Tmax=100)
require(Rdnn)
setwd(path.expand("~/dnn/r_scripts"))
setVerboseLevel(0)
M = 100
tau_m = 5
tau_ref = 2.0
thresh = 0.05
dt = 1
jobs = 1
low_f = 10
high_f = 300
samp_rate = 2000
seq.fun = log.seq
inp = proto.read("~/dnn/ts/synthetic_control_300_len_6_classes_train.pb")
x = inp$values[1,]
x.c = conv.gammatones(x, seq.fun(low_f, high_f, length.out=M), samp_rate)
#proto.write("~/dnn/ts/iaf_gammatones_raw.pb", list(values=x.c, ts_info=inp$ts_info), "TimeSeries")
gr_pl(t(x.c[,1:500]))
s = RSim$new()
const = s$getConst()
const$setElement(
"LeakyIntegrateAndFire",
list(tau_m=tau_m, rest_pot=0.0, tau_ref=tau_ref, noise=.0)
)
const$setElement("Determ", list(threshold=thresh))
const$addLayer(
list(size=M, neuron="LeakyIntegrateAndFire", act_function="Determ", input="InputTimeSeries")
)
s$build()
s$setTimeSeries(list(values=x.c, ts_info=inp$ts_info), "InputTimeSeries")
s$run(jobs)
sp = s$getSpikes()
prast(sp,T0=0,Tmax=1000)
prast(sp,T0=0,Tmax=100)
prast(sp,T0=0,Tmax=1000)
K = RKernel$new()$run(sp, list(preprocessor="Epsp(10)", kernel="Dot"))
gr_pl(K)
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
simple_metric(K)
get.labs(K)
K
str(K)
colnames(K)
get.labs()
get.labs
get.labs = function(K) {
sapply(
strsplit(colnames(K), split="[.]"),
function(s) tail(s, 1)
)
}
simple_metric(K)
prast(sp,T0=0,Tmax=100)
prast(sp,T0=30000,Tmax=35000)
prast(sp,T0=30000,Tmax=350000)
prast(sp)
prast(sp,T0=3000, Tmax=6000)
prast(sp,T0=0, Tmax=6000)
prast(sp,T0=6000,Tmax=12000)
prast(sp,T0=6000,Tmax=6100)
prast(sp,T0=6000,Tmax=6200)
prast(sp,T0=6000,Tmax=6600)
prast(sp,T0=12000,Tmax=12600)
K = RKernel$new()$run(sp, list(preprocessor="Epsp(10)", kernel="Dot"))
gr_pl(K)
K = RKernel$new()$run(sp, list(preprocessor="Epsp(5)", kernel="Dot"))
gr_pl(K)
RKernel$new()
K = RKernel$new()$run(sp, list(preprocessor="Epsp(5)", kernel="RbfDot(0.1)"))
gr_pl(K)
K = RKernel$new()$run(sp, list(preprocessor="Epsp(5)", kernel="RbfDot(0.1)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(5)", kernel="Dot"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(15)", kernel="Dot"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(15)", kernel="RbfDot(1.0)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(15)", kernel="RbfDot(5.0)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(15)", kernel="RbfDot(0.01)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(15)", kernel="RbfDot(0.1)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(15)", kernel="RbfDot(0.5)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(15)", kernel="RbfDot(0.05)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
RKernel$new()
K = RKernel$new()$run(sp, list(preprocessor="Epsp(15)", kernel="Shoe(RbfDot(0.05))"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
RKernel$new()
K = RKernel$new()$run(sp, list(preprocessor="Epsp(15)", kernel="AnovaDot(0.05))"))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(15)", kernel="AnovaDot(0.05)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(15)", kernel="AnovaDot(0.1"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(15)", kernel="AnovaDot(0.5)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(15)", kernel="AnovaDot(0.5,2)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(15)", kernel="AnovaDot(0.5,0.1)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(15)", kernel="AnovaDot(0.01,0.1)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(10)", kernel="AnovaDot(0.01,0.1)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(5)", kernel="AnovaDot(0.01,0.1)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(5)", kernel="AnovaDot(0.01,0.05)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(5)", kernel="AnovaDot(0.01,0.5)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(5)", kernel="AnovaDot(0.01,2)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(5)", kernel="AnovaDot(0.05,2)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(5)", kernel="RbfDot(0.05)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(5)", kernel="RbfDot(0.001)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(5)", kernel="RbfDot(0.005)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(5)", kernel="RbfDot(0.001)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(5)", kernel="RbfDot(0.0001)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(1)", kernel="RbfDot(0.0001)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(20)", kernel="RbfDot(0.0001)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(10)", kernel="RbfDot(0.0001)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(1)", kernel="RbfDot(0.0001)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(20)", kernel="RbfDot(0.0001)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(20)", kernel="RbfDot(0.001)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(10)", kernel="RbfDot(0.0001)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=2)
pcv(kpc)
plot(rotated(kpc), col=as.integer(labs))
K = RKernel$new()$run(sp, list(preprocessor="Epsp(10)", kernel="RbfDot(0.0001)"))
source("kernel_methods.R")
require(kernlab)
K = as.kernelMatrix(K)
labs = get.labs(K)
K = normalize(K)
Kc = centering(K)
kpc = kpca(K, features=3)
pcv(kpc)
rotated(kpc)
install.packages(3dplot)
install.packages(plot3d)
install.packages("plot3d")
install.packages("plot3D
")
install.packages("plot3D")
require(plot3D)
??plot3D
points3D(rotated(kpc))
vv = rotated(kpc)
point3D(vv[,1],vv[,2], vv[3])
points3D(vv[,1],vv[,2], vv[3])
vv[,1]
vv[,3]
points3D(vv[,1],vv[,2], vv[,3])
points3D(vv[,1],vv[,2], vv[,3],col=as.integer(labs))
source('~/prog/dnn/r_package/r_scripts/sim_api/fb_sim.R', echo=TRUE)
install.packages("rgl")
