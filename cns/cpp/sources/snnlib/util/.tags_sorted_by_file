!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
BaseType	fast_delegate.h	/^  typedef FastDelegate0 < R > BaseType;$/;"	t	class:fastdelegate::FastDelegate
BaseType	fast_delegate.h	/^  typedef FastDelegate1 < Param1, R > BaseType;$/;"	t	class:fastdelegate::FastDelegate
BaseType	fast_delegate.h	/^  typedef FastDelegate2 < Param1, Param2, R > BaseType;$/;"	t	class:fastdelegate::FastDelegate
BaseType	fast_delegate.h	/^  typedef FastDelegate3 < Param1, Param2, Param3, R > BaseType;$/;"	t	class:fastdelegate::FastDelegate
BaseType	fast_delegate.h	/^  typedef FastDelegate4 < Param1, Param2, Param3, Param4, R > BaseType;$/;"	t	class:fastdelegate::FastDelegate
BaseType	fast_delegate.h	/^  typedef FastDelegate5 < Param1, Param2, Param3, Param4, Param5, R > BaseType;$/;"	t	class:fastdelegate::FastDelegate
BaseType	fast_delegate.h	/^  typedef FastDelegate6 < Param1, Param2, Param3, Param4, Param5, Param6, R > BaseType;$/;"	t	class:fastdelegate::FastDelegate
BaseType	fast_delegate.h	/^  typedef FastDelegate7 < Param1, Param2, Param3, Param4, Param5, Param6, Param7, R > BaseType;$/;"	t	class:fastdelegate::FastDelegate
BaseType	fast_delegate.h	/^  typedef FastDelegate8 < Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, R > BaseType;$/;"	t	class:fastdelegate::FastDelegate
ClosurePtr	fast_delegate.h	/^class ClosurePtr : public DelegateMemento {$/;"	c	namespace:fastdelegate::detail
ClosureType	fast_delegate.h	/^	typedef detail::ClosurePtr<GenericMemFn, StaticFunctionPtr, UnvoidStaticFunctionPtr> ClosureType;$/;"	t	class:fastdelegate::FastDelegate0
ClosureType	fast_delegate.h	/^	typedef detail::ClosurePtr<GenericMemFn, StaticFunctionPtr, UnvoidStaticFunctionPtr> ClosureType;$/;"	t	class:fastdelegate::FastDelegate1
ClosureType	fast_delegate.h	/^	typedef detail::ClosurePtr<GenericMemFn, StaticFunctionPtr, UnvoidStaticFunctionPtr> ClosureType;$/;"	t	class:fastdelegate::FastDelegate2
ClosureType	fast_delegate.h	/^	typedef detail::ClosurePtr<GenericMemFn, StaticFunctionPtr, UnvoidStaticFunctionPtr> ClosureType;$/;"	t	class:fastdelegate::FastDelegate3
ClosureType	fast_delegate.h	/^	typedef detail::ClosurePtr<GenericMemFn, StaticFunctionPtr, UnvoidStaticFunctionPtr> ClosureType;$/;"	t	class:fastdelegate::FastDelegate4
ClosureType	fast_delegate.h	/^	typedef detail::ClosurePtr<GenericMemFn, StaticFunctionPtr, UnvoidStaticFunctionPtr> ClosureType;$/;"	t	class:fastdelegate::FastDelegate5
ClosureType	fast_delegate.h	/^	typedef detail::ClosurePtr<GenericMemFn, StaticFunctionPtr, UnvoidStaticFunctionPtr> ClosureType;$/;"	t	class:fastdelegate::FastDelegate6
ClosureType	fast_delegate.h	/^	typedef detail::ClosurePtr<GenericMemFn, StaticFunctionPtr, UnvoidStaticFunctionPtr> ClosureType;$/;"	t	class:fastdelegate::FastDelegate7
ClosureType	fast_delegate.h	/^	typedef detail::ClosurePtr<GenericMemFn, StaticFunctionPtr, UnvoidStaticFunctionPtr> ClosureType;$/;"	t	class:fastdelegate::FastDelegate8
Convert	fast_delegate.h	/^	inline static GenericClass *Convert(X *pthis, XFuncType function_to_bind, $/;"	f	struct:fastdelegate::detail::SimplifyMemFunc
CopyFrom	fast_delegate.h	/^	inline void CopyFrom (DerivedClass *pParent, const DelegateMemento &right) {$/;"	f	class:fastdelegate::detail::ClosurePtr
CopyFrom	fast_delegate.h	/^	inline void CopyFrom (DerivedClass *pParent, const DelegateMemento &x) {$/;"	f	class:fastdelegate::detail::ClosurePtr
DefaultVoid	fast_delegate.h	/^typedef const void * DefaultVoid;$/;"	t	namespace:fastdelegate::detail
DefaultVoid	fast_delegate.h	/^typedef void DefaultVoid;$/;"	t	namespace:fastdelegate::detail
DefaultVoidToVoid	fast_delegate.h	/^struct DefaultVoidToVoid { typedef T type; };$/;"	s	namespace:fastdelegate::detail
DefaultVoidToVoid	fast_delegate.h	/^struct DefaultVoidToVoid<DefaultVoid> {	typedef void type; };$/;"	s	namespace:fastdelegate::detail
DelegateMemento	fast_delegate.h	/^	DelegateMemento (const DelegateMemento &right)  : $/;"	f	class:fastdelegate::DelegateMemento
DelegateMemento	fast_delegate.h	/^	DelegateMemento() : m_pthis(0), m_pFunction(0) {};$/;"	f	class:fastdelegate::DelegateMemento
DelegateMemento	fast_delegate.h	/^	DelegateMemento() : m_pthis(0), m_pFunction(0), m_pStaticFunction(0) {};$/;"	f	class:fastdelegate::DelegateMemento
DelegateMemento	fast_delegate.h	/^class DelegateMemento {$/;"	c	namespace:fastdelegate
DesiredRetType	fast_delegate.h	/^	typedef typename detail::DefaultVoidToVoid<RetType>::type DesiredRetType;$/;"	t	class:fastdelegate::FastDelegate0
DesiredRetType	fast_delegate.h	/^	typedef typename detail::DefaultVoidToVoid<RetType>::type DesiredRetType;$/;"	t	class:fastdelegate::FastDelegate1
DesiredRetType	fast_delegate.h	/^	typedef typename detail::DefaultVoidToVoid<RetType>::type DesiredRetType;$/;"	t	class:fastdelegate::FastDelegate2
DesiredRetType	fast_delegate.h	/^	typedef typename detail::DefaultVoidToVoid<RetType>::type DesiredRetType;$/;"	t	class:fastdelegate::FastDelegate3
DesiredRetType	fast_delegate.h	/^	typedef typename detail::DefaultVoidToVoid<RetType>::type DesiredRetType;$/;"	t	class:fastdelegate::FastDelegate4
DesiredRetType	fast_delegate.h	/^	typedef typename detail::DefaultVoidToVoid<RetType>::type DesiredRetType;$/;"	t	class:fastdelegate::FastDelegate5
DesiredRetType	fast_delegate.h	/^	typedef typename detail::DefaultVoidToVoid<RetType>::type DesiredRetType;$/;"	t	class:fastdelegate::FastDelegate6
DesiredRetType	fast_delegate.h	/^	typedef typename detail::DefaultVoidToVoid<RetType>::type DesiredRetType;$/;"	t	class:fastdelegate::FastDelegate7
DesiredRetType	fast_delegate.h	/^	typedef typename detail::DefaultVoidToVoid<RetType>::type DesiredRetType;$/;"	t	class:fastdelegate::FastDelegate8
FASTDELEGATEDECLARE	fast_delegate.h	191;"	d
FASTDELEGATE_ALLOW_FUNCTION_TYPE_SYNTAX	fast_delegate.h	105;"	d
FASTDELEGATE_ALLOW_FUNCTION_TYPE_SYNTAX	fast_delegate.h	110;"	d
FASTDELEGATE_ALLOW_FUNCTION_TYPE_SYNTAX	fast_delegate.h	115;"	d
FASTDELEGATE_GCC_BUG_8271	fast_delegate.h	120;"	d
FASTDELEGATE_H	fast_delegate.h	49;"	d
FASTDELEGATE_USESTATICFUNCTIONHACK	fast_delegate.h	195;"	d
FASTDELEGATE_USESTATICFUNCTIONHACK	fast_delegate.h	67;"	d
FASTDLGT_HASINHERITANCE_KEYWORDS	fast_delegate.h	99;"	d
FASTDLGT_ISMSVC	fast_delegate.h	81;"	d
FASTDLGT_MICROSOFT_MFP	fast_delegate.h	95;"	d
FASTDLGT_RETTYPE	fast_delegate.h	1997;"	d
FASTDLGT_RETTYPE	fast_delegate.h	1999;"	d
FASTDLGT_RETTYPE	fast_delegate.h	2103;"	d
FASTDLGT_VC6	fast_delegate.h	84;"	d
FastDelegate	fast_delegate.h	/^  FastDelegate() : BaseType() { }$/;"	f	class:fastdelegate::FastDelegate
FastDelegate	fast_delegate.h	/^  FastDelegate(R (*function_to_bind)(  ))$/;"	f	class:fastdelegate::FastDelegate
FastDelegate	fast_delegate.h	/^  FastDelegate(R (*function_to_bind)( Param1 p1 ))$/;"	f	class:fastdelegate::FastDelegate
FastDelegate	fast_delegate.h	/^  FastDelegate(R (*function_to_bind)( Param1 p1, Param2 p2 ))$/;"	f	class:fastdelegate::FastDelegate
FastDelegate	fast_delegate.h	/^  FastDelegate(R (*function_to_bind)( Param1 p1, Param2 p2, Param3 p3 ))$/;"	f	class:fastdelegate::FastDelegate
FastDelegate	fast_delegate.h	/^  FastDelegate(R (*function_to_bind)( Param1 p1, Param2 p2, Param3 p3, Param4 p4 ))$/;"	f	class:fastdelegate::FastDelegate
FastDelegate	fast_delegate.h	/^  FastDelegate(R (*function_to_bind)( Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5 ))$/;"	f	class:fastdelegate::FastDelegate
FastDelegate	fast_delegate.h	/^  FastDelegate(R (*function_to_bind)( Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6 ))$/;"	f	class:fastdelegate::FastDelegate
FastDelegate	fast_delegate.h	/^  FastDelegate(R (*function_to_bind)( Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7 ))$/;"	f	class:fastdelegate::FastDelegate
FastDelegate	fast_delegate.h	/^  FastDelegate(R (*function_to_bind)( Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7, Param8 p8 ))$/;"	f	class:fastdelegate::FastDelegate
FastDelegate	fast_delegate.h	/^  FastDelegate(Y * pthis, $/;"	f	class:fastdelegate::FastDelegate
FastDelegate	fast_delegate.h	/^  FastDelegate(const Y *pthis,$/;"	f	class:fastdelegate::FastDelegate
FastDelegate	fast_delegate.h	/^class FastDelegate< R (  ) >$/;"	c	namespace:fastdelegate
FastDelegate	fast_delegate.h	/^class FastDelegate< R ( Param1 ) >$/;"	c	namespace:fastdelegate
FastDelegate	fast_delegate.h	/^class FastDelegate< R ( Param1, Param2 ) >$/;"	c	namespace:fastdelegate
FastDelegate	fast_delegate.h	/^class FastDelegate< R ( Param1, Param2, Param3 ) >$/;"	c	namespace:fastdelegate
FastDelegate	fast_delegate.h	/^class FastDelegate< R ( Param1, Param2, Param3, Param4 ) >$/;"	c	namespace:fastdelegate
FastDelegate	fast_delegate.h	/^class FastDelegate< R ( Param1, Param2, Param3, Param4, Param5 ) >$/;"	c	namespace:fastdelegate
FastDelegate	fast_delegate.h	/^class FastDelegate< R ( Param1, Param2, Param3, Param4, Param5, Param6 ) >$/;"	c	namespace:fastdelegate
FastDelegate	fast_delegate.h	/^class FastDelegate< R ( Param1, Param2, Param3, Param4, Param5, Param6, Param7 ) >$/;"	c	namespace:fastdelegate
FastDelegate	fast_delegate.h	/^class FastDelegate< R ( Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8 ) >$/;"	c	namespace:fastdelegate
FastDelegate0	fast_delegate.h	/^	FastDelegate0() { clear(); }$/;"	f	class:fastdelegate::FastDelegate0
FastDelegate0	fast_delegate.h	/^	FastDelegate0(DesiredRetType (*function_to_bind)() ) {$/;"	f	class:fastdelegate::FastDelegate0
FastDelegate0	fast_delegate.h	/^	FastDelegate0(Y *pthis, DesiredRetType (X::* function_to_bind)() ) {$/;"	f	class:fastdelegate::FastDelegate0
FastDelegate0	fast_delegate.h	/^	FastDelegate0(const FastDelegate0 &x) {$/;"	f	class:fastdelegate::FastDelegate0
FastDelegate0	fast_delegate.h	/^	FastDelegate0(const Y *pthis, DesiredRetType (X::* function_to_bind)() const) {$/;"	f	class:fastdelegate::FastDelegate0
FastDelegate0	fast_delegate.h	/^class FastDelegate0 {$/;"	c	namespace:fastdelegate
FastDelegate1	fast_delegate.h	/^	FastDelegate1() { clear(); }$/;"	f	class:fastdelegate::FastDelegate1
FastDelegate1	fast_delegate.h	/^	FastDelegate1(DesiredRetType (*function_to_bind)(Param1 p1) ) {$/;"	f	class:fastdelegate::FastDelegate1
FastDelegate1	fast_delegate.h	/^	FastDelegate1(Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1) ) {$/;"	f	class:fastdelegate::FastDelegate1
FastDelegate1	fast_delegate.h	/^	FastDelegate1(const FastDelegate1 &x) {$/;"	f	class:fastdelegate::FastDelegate1
FastDelegate1	fast_delegate.h	/^	FastDelegate1(const Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1) const) {$/;"	f	class:fastdelegate::FastDelegate1
FastDelegate1	fast_delegate.h	/^class FastDelegate1 {$/;"	c	namespace:fastdelegate
FastDelegate2	fast_delegate.h	/^	FastDelegate2() { clear(); }$/;"	f	class:fastdelegate::FastDelegate2
FastDelegate2	fast_delegate.h	/^	FastDelegate2(DesiredRetType (*function_to_bind)(Param1 p1, Param2 p2) ) {$/;"	f	class:fastdelegate::FastDelegate2
FastDelegate2	fast_delegate.h	/^	FastDelegate2(Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1, Param2 p2) ) {$/;"	f	class:fastdelegate::FastDelegate2
FastDelegate2	fast_delegate.h	/^	FastDelegate2(const FastDelegate2 &x) {$/;"	f	class:fastdelegate::FastDelegate2
FastDelegate2	fast_delegate.h	/^	FastDelegate2(const Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1, Param2 p2) const) {$/;"	f	class:fastdelegate::FastDelegate2
FastDelegate2	fast_delegate.h	/^class FastDelegate2 {$/;"	c	namespace:fastdelegate
FastDelegate3	fast_delegate.h	/^	FastDelegate3() { clear(); }$/;"	f	class:fastdelegate::FastDelegate3
FastDelegate3	fast_delegate.h	/^	FastDelegate3(DesiredRetType (*function_to_bind)(Param1 p1, Param2 p2, Param3 p3) ) {$/;"	f	class:fastdelegate::FastDelegate3
FastDelegate3	fast_delegate.h	/^	FastDelegate3(Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1, Param2 p2, Param3 p3) ) {$/;"	f	class:fastdelegate::FastDelegate3
FastDelegate3	fast_delegate.h	/^	FastDelegate3(const FastDelegate3 &x) {$/;"	f	class:fastdelegate::FastDelegate3
FastDelegate3	fast_delegate.h	/^	FastDelegate3(const Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1, Param2 p2, Param3 p3) const) {$/;"	f	class:fastdelegate::FastDelegate3
FastDelegate3	fast_delegate.h	/^class FastDelegate3 {$/;"	c	namespace:fastdelegate
FastDelegate4	fast_delegate.h	/^	FastDelegate4() { clear(); }$/;"	f	class:fastdelegate::FastDelegate4
FastDelegate4	fast_delegate.h	/^	FastDelegate4(DesiredRetType (*function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4) ) {$/;"	f	class:fastdelegate::FastDelegate4
FastDelegate4	fast_delegate.h	/^	FastDelegate4(Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4) ) {$/;"	f	class:fastdelegate::FastDelegate4
FastDelegate4	fast_delegate.h	/^	FastDelegate4(const FastDelegate4 &x) {$/;"	f	class:fastdelegate::FastDelegate4
FastDelegate4	fast_delegate.h	/^	FastDelegate4(const Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4) const) {$/;"	f	class:fastdelegate::FastDelegate4
FastDelegate4	fast_delegate.h	/^class FastDelegate4 {$/;"	c	namespace:fastdelegate
FastDelegate5	fast_delegate.h	/^	FastDelegate5() { clear(); }$/;"	f	class:fastdelegate::FastDelegate5
FastDelegate5	fast_delegate.h	/^	FastDelegate5(DesiredRetType (*function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5) ) {$/;"	f	class:fastdelegate::FastDelegate5
FastDelegate5	fast_delegate.h	/^	FastDelegate5(Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5) ) {$/;"	f	class:fastdelegate::FastDelegate5
FastDelegate5	fast_delegate.h	/^	FastDelegate5(const FastDelegate5 &x) {$/;"	f	class:fastdelegate::FastDelegate5
FastDelegate5	fast_delegate.h	/^	FastDelegate5(const Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5) const) {$/;"	f	class:fastdelegate::FastDelegate5
FastDelegate5	fast_delegate.h	/^class FastDelegate5 {$/;"	c	namespace:fastdelegate
FastDelegate6	fast_delegate.h	/^	FastDelegate6() { clear(); }$/;"	f	class:fastdelegate::FastDelegate6
FastDelegate6	fast_delegate.h	/^	FastDelegate6(DesiredRetType (*function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6) ) {$/;"	f	class:fastdelegate::FastDelegate6
FastDelegate6	fast_delegate.h	/^	FastDelegate6(Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6) ) {$/;"	f	class:fastdelegate::FastDelegate6
FastDelegate6	fast_delegate.h	/^	FastDelegate6(const FastDelegate6 &x) {$/;"	f	class:fastdelegate::FastDelegate6
FastDelegate6	fast_delegate.h	/^	FastDelegate6(const Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6) const) {$/;"	f	class:fastdelegate::FastDelegate6
FastDelegate6	fast_delegate.h	/^class FastDelegate6 {$/;"	c	namespace:fastdelegate
FastDelegate7	fast_delegate.h	/^	FastDelegate7() { clear(); }$/;"	f	class:fastdelegate::FastDelegate7
FastDelegate7	fast_delegate.h	/^	FastDelegate7(DesiredRetType (*function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7) ) {$/;"	f	class:fastdelegate::FastDelegate7
FastDelegate7	fast_delegate.h	/^	FastDelegate7(Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7) ) {$/;"	f	class:fastdelegate::FastDelegate7
FastDelegate7	fast_delegate.h	/^	FastDelegate7(const FastDelegate7 &x) {$/;"	f	class:fastdelegate::FastDelegate7
FastDelegate7	fast_delegate.h	/^	FastDelegate7(const Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7) const) {$/;"	f	class:fastdelegate::FastDelegate7
FastDelegate7	fast_delegate.h	/^class FastDelegate7 {$/;"	c	namespace:fastdelegate
FastDelegate8	fast_delegate.h	/^	FastDelegate8() { clear(); }$/;"	f	class:fastdelegate::FastDelegate8
FastDelegate8	fast_delegate.h	/^	FastDelegate8(DesiredRetType (*function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7, Param8 p8) ) {$/;"	f	class:fastdelegate::FastDelegate8
FastDelegate8	fast_delegate.h	/^	FastDelegate8(Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7, Param8 p8) ) {$/;"	f	class:fastdelegate::FastDelegate8
FastDelegate8	fast_delegate.h	/^	FastDelegate8(const FastDelegate8 &x) {$/;"	f	class:fastdelegate::FastDelegate8
FastDelegate8	fast_delegate.h	/^	FastDelegate8(const Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7, Param8 p8) const) {$/;"	f	class:fastdelegate::FastDelegate8
FastDelegate8	fast_delegate.h	/^class FastDelegate8 {$/;"	c	namespace:fastdelegate
GenericClass	fast_delegate.h	/^	class GenericClass {};$/;"	c	namespace:fastdelegate::detail
GenericClass	fast_delegate.h	/^	class __single_inheritance GenericClass;$/;"	m	namespace:fastdelegate::detail	typeref:class:fastdelegate::detail::__single_inheritance
GenericFuncPtr	fast_delegate.h	/^	typedef void (*GenericFuncPtr)(); \/\/ arbitrary code pointer$/;"	t	class:fastdelegate::DelegateMemento
GenericMemFn	fast_delegate.h	/^	typedef RetType (detail::GenericClass::*GenericMemFn)();$/;"	t	class:fastdelegate::FastDelegate0
GenericMemFn	fast_delegate.h	/^	typedef RetType (detail::GenericClass::*GenericMemFn)(Param1 p1);$/;"	t	class:fastdelegate::FastDelegate1
GenericMemFn	fast_delegate.h	/^	typedef RetType (detail::GenericClass::*GenericMemFn)(Param1 p1, Param2 p2);$/;"	t	class:fastdelegate::FastDelegate2
GenericMemFn	fast_delegate.h	/^	typedef RetType (detail::GenericClass::*GenericMemFn)(Param1 p1, Param2 p2, Param3 p3);$/;"	t	class:fastdelegate::FastDelegate3
GenericMemFn	fast_delegate.h	/^	typedef RetType (detail::GenericClass::*GenericMemFn)(Param1 p1, Param2 p2, Param3 p3, Param4 p4);$/;"	t	class:fastdelegate::FastDelegate4
GenericMemFn	fast_delegate.h	/^	typedef RetType (detail::GenericClass::*GenericMemFn)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5);$/;"	t	class:fastdelegate::FastDelegate5
GenericMemFn	fast_delegate.h	/^	typedef RetType (detail::GenericClass::*GenericMemFn)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6);$/;"	t	class:fastdelegate::FastDelegate6
GenericMemFn	fast_delegate.h	/^	typedef RetType (detail::GenericClass::*GenericMemFn)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7);$/;"	t	class:fastdelegate::FastDelegate7
GenericMemFn	fast_delegate.h	/^	typedef RetType (detail::GenericClass::*GenericMemFn)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7, Param8 p8);$/;"	t	class:fastdelegate::FastDelegate8
GenericMemFuncType	fast_delegate.h	/^	typedef void (detail::GenericClass::*GenericMemFuncType)(); \/\/ arbitrary MFP.$/;"	t	class:fastdelegate::DelegateMemento
GenericVirtualClass	fast_delegate.h	/^struct GenericVirtualClass : virtual public GenericClass$/;"	s	namespace:fastdelegate::detail
GetClosureMemPtr	fast_delegate.h	/^	inline GenericMemFunc GetClosureMemPtr() const { return reinterpret_cast<GenericMemFunc>(m_pFunction); }$/;"	f	class:fastdelegate::detail::ClosurePtr
GetClosureThis	fast_delegate.h	/^	inline GenericClass *GetClosureThis() const { return m_pthis; }$/;"	f	class:fastdelegate::detail::ClosurePtr
GetMemento	fast_delegate.h	/^	const DelegateMemento & GetMemento() { return m_Closure; }$/;"	f	class:fastdelegate::FastDelegate0
GetMemento	fast_delegate.h	/^	const DelegateMemento & GetMemento() { return m_Closure; }$/;"	f	class:fastdelegate::FastDelegate1
GetMemento	fast_delegate.h	/^	const DelegateMemento & GetMemento() { return m_Closure; }$/;"	f	class:fastdelegate::FastDelegate2
GetMemento	fast_delegate.h	/^	const DelegateMemento & GetMemento() { return m_Closure; }$/;"	f	class:fastdelegate::FastDelegate3
GetMemento	fast_delegate.h	/^	const DelegateMemento & GetMemento() { return m_Closure; }$/;"	f	class:fastdelegate::FastDelegate4
GetMemento	fast_delegate.h	/^	const DelegateMemento & GetMemento() { return m_Closure; }$/;"	f	class:fastdelegate::FastDelegate5
GetMemento	fast_delegate.h	/^	const DelegateMemento & GetMemento() { return m_Closure; }$/;"	f	class:fastdelegate::FastDelegate6
GetMemento	fast_delegate.h	/^	const DelegateMemento & GetMemento() { return m_Closure; }$/;"	f	class:fastdelegate::FastDelegate7
GetMemento	fast_delegate.h	/^	const DelegateMemento & GetMemento() { return m_Closure; }$/;"	f	class:fastdelegate::FastDelegate8
GetStaticFunction	fast_delegate.h	/^	inline UnvoidStaticFuncPtr GetStaticFunction() const { $/;"	f	class:fastdelegate::detail::ClosurePtr
GetStaticFunction	fast_delegate.h	/^	inline UnvoidStaticFuncPtr GetStaticFunction() const {$/;"	f	class:fastdelegate::detail::ClosurePtr
GetThis	fast_delegate.h	/^	GenericVirtualClass * GetThis() { return this; }$/;"	f	struct:fastdelegate::detail::GenericVirtualClass
InvokeStaticFunction	fast_delegate.h	/^	RetType InvokeStaticFunction() const {$/;"	f	class:fastdelegate::FastDelegate0
InvokeStaticFunction	fast_delegate.h	/^	RetType InvokeStaticFunction(Param1 p1) const {$/;"	f	class:fastdelegate::FastDelegate1
InvokeStaticFunction	fast_delegate.h	/^	RetType InvokeStaticFunction(Param1 p1, Param2 p2) const {$/;"	f	class:fastdelegate::FastDelegate2
InvokeStaticFunction	fast_delegate.h	/^	RetType InvokeStaticFunction(Param1 p1, Param2 p2, Param3 p3) const {$/;"	f	class:fastdelegate::FastDelegate3
InvokeStaticFunction	fast_delegate.h	/^	RetType InvokeStaticFunction(Param1 p1, Param2 p2, Param3 p3, Param4 p4) const {$/;"	f	class:fastdelegate::FastDelegate4
InvokeStaticFunction	fast_delegate.h	/^	RetType InvokeStaticFunction(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5) const {$/;"	f	class:fastdelegate::FastDelegate5
InvokeStaticFunction	fast_delegate.h	/^	RetType InvokeStaticFunction(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6) const {$/;"	f	class:fastdelegate::FastDelegate6
InvokeStaticFunction	fast_delegate.h	/^	RetType InvokeStaticFunction(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7) const {$/;"	f	class:fastdelegate::FastDelegate7
InvokeStaticFunction	fast_delegate.h	/^	RetType InvokeStaticFunction(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7, Param8 p8) const {$/;"	f	class:fastdelegate::FastDelegate8
IsEqual	fast_delegate.h	/^	inline bool IsEqual (const DelegateMemento &x) const{$/;"	f	class:fastdelegate::DelegateMemento
IsEqualToStaticFuncPtr	fast_delegate.h	/^	inline bool IsEqualToStaticFuncPtr(StaticFuncPtr funcptr){$/;"	f	class:fastdelegate::detail::ClosurePtr
IsLess	fast_delegate.h	/^	inline bool IsLess(const DelegateMemento &right) const {$/;"	f	class:fastdelegate::DelegateMemento
MakeDelegate	fast_delegate.h	/^FastDelegate0<FASTDLGT_RETTYPE> MakeDelegate(Y* x, RetType (X::*func)() const) { $/;"	f	namespace:fastdelegate
MakeDelegate	fast_delegate.h	/^FastDelegate0<FASTDLGT_RETTYPE> MakeDelegate(Y* x, RetType (X::*func)()) { $/;"	f	namespace:fastdelegate
MakeDelegate	fast_delegate.h	/^FastDelegate1<Param1, FASTDLGT_RETTYPE> MakeDelegate(Y* x, RetType (X::*func)(Param1 p1) const) { $/;"	f	namespace:fastdelegate
MakeDelegate	fast_delegate.h	/^FastDelegate1<Param1, FASTDLGT_RETTYPE> MakeDelegate(Y* x, RetType (X::*func)(Param1 p1)) { $/;"	f	namespace:fastdelegate
MakeDelegate	fast_delegate.h	/^FastDelegate2<Param1, Param2, FASTDLGT_RETTYPE> MakeDelegate(Y* x, RetType (X::*func)(Param1 p1, Param2 p2) const) { $/;"	f	namespace:fastdelegate
MakeDelegate	fast_delegate.h	/^FastDelegate2<Param1, Param2, FASTDLGT_RETTYPE> MakeDelegate(Y* x, RetType (X::*func)(Param1 p1, Param2 p2)) { $/;"	f	namespace:fastdelegate
MakeDelegate	fast_delegate.h	/^FastDelegate3<Param1, Param2, Param3, FASTDLGT_RETTYPE> MakeDelegate(Y* x, RetType (X::*func)(Param1 p1, Param2 p2, Param3 p3) const) { $/;"	f	namespace:fastdelegate
MakeDelegate	fast_delegate.h	/^FastDelegate3<Param1, Param2, Param3, FASTDLGT_RETTYPE> MakeDelegate(Y* x, RetType (X::*func)(Param1 p1, Param2 p2, Param3 p3)) { $/;"	f	namespace:fastdelegate
MakeDelegate	fast_delegate.h	/^FastDelegate4<Param1, Param2, Param3, Param4, FASTDLGT_RETTYPE> MakeDelegate(Y* x, RetType (X::*func)(Param1 p1, Param2 p2, Param3 p3, Param4 p4) const) { $/;"	f	namespace:fastdelegate
MakeDelegate	fast_delegate.h	/^FastDelegate4<Param1, Param2, Param3, Param4, FASTDLGT_RETTYPE> MakeDelegate(Y* x, RetType (X::*func)(Param1 p1, Param2 p2, Param3 p3, Param4 p4)) { $/;"	f	namespace:fastdelegate
MakeDelegate	fast_delegate.h	/^FastDelegate5<Param1, Param2, Param3, Param4, Param5, FASTDLGT_RETTYPE> MakeDelegate(Y* x, RetType (X::*func)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5) const) { $/;"	f	namespace:fastdelegate
MakeDelegate	fast_delegate.h	/^FastDelegate5<Param1, Param2, Param3, Param4, Param5, FASTDLGT_RETTYPE> MakeDelegate(Y* x, RetType (X::*func)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5)) { $/;"	f	namespace:fastdelegate
MakeDelegate	fast_delegate.h	/^FastDelegate6<Param1, Param2, Param3, Param4, Param5, Param6, FASTDLGT_RETTYPE> MakeDelegate(Y* x, RetType (X::*func)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6) const) { $/;"	f	namespace:fastdelegate
MakeDelegate	fast_delegate.h	/^FastDelegate6<Param1, Param2, Param3, Param4, Param5, Param6, FASTDLGT_RETTYPE> MakeDelegate(Y* x, RetType (X::*func)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6)) { $/;"	f	namespace:fastdelegate
MakeDelegate	fast_delegate.h	/^FastDelegate7<Param1, Param2, Param3, Param4, Param5, Param6, Param7, FASTDLGT_RETTYPE> MakeDelegate(Y* x, RetType (X::*func)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7) const) { $/;"	f	namespace:fastdelegate
MakeDelegate	fast_delegate.h	/^FastDelegate7<Param1, Param2, Param3, Param4, Param5, Param6, Param7, FASTDLGT_RETTYPE> MakeDelegate(Y* x, RetType (X::*func)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7)) { $/;"	f	namespace:fastdelegate
MakeDelegate	fast_delegate.h	/^FastDelegate8<Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, FASTDLGT_RETTYPE> MakeDelegate(Y* x, RetType (X::*func)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7, Param8 p8) const) { $/;"	f	namespace:fastdelegate
MakeDelegate	fast_delegate.h	/^FastDelegate8<Param1, Param2, Param3, Param4, Param5, Param6, Param7, Param8, FASTDLGT_RETTYPE> MakeDelegate(Y* x, RetType (X::*func)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7, Param8 p8)) { $/;"	f	namespace:fastdelegate
MicrosoftVirtualMFP	fast_delegate.h	/^struct MicrosoftVirtualMFP {$/;"	s	namespace:fastdelegate::detail
ProbePtrType	fast_delegate.h	/^	typedef GenericVirtualClass * (GenericVirtualClass::*ProbePtrType)();$/;"	t	struct:fastdelegate::detail::GenericVirtualClass
SINGLE_MEMFUNCPTR_SIZE	fast_delegate.h	/^const int SINGLE_MEMFUNCPTR_SIZE = sizeof(void (GenericClass::*)());$/;"	m	namespace:fastdelegate::detail
SafeBoolStruct	fast_delegate.h	/^	typedef struct SafeBoolStruct {$/;"	s	class:fastdelegate::FastDelegate0
SafeBoolStruct	fast_delegate.h	/^	typedef struct SafeBoolStruct {$/;"	s	class:fastdelegate::FastDelegate1
SafeBoolStruct	fast_delegate.h	/^	typedef struct SafeBoolStruct {$/;"	s	class:fastdelegate::FastDelegate2
SafeBoolStruct	fast_delegate.h	/^	typedef struct SafeBoolStruct {$/;"	s	class:fastdelegate::FastDelegate3
SafeBoolStruct	fast_delegate.h	/^	typedef struct SafeBoolStruct {$/;"	s	class:fastdelegate::FastDelegate4
SafeBoolStruct	fast_delegate.h	/^	typedef struct SafeBoolStruct {$/;"	s	class:fastdelegate::FastDelegate5
SafeBoolStruct	fast_delegate.h	/^	typedef struct SafeBoolStruct {$/;"	s	class:fastdelegate::FastDelegate6
SafeBoolStruct	fast_delegate.h	/^	typedef struct SafeBoolStruct {$/;"	s	class:fastdelegate::FastDelegate7
SafeBoolStruct	fast_delegate.h	/^	typedef struct SafeBoolStruct {$/;"	s	class:fastdelegate::FastDelegate8
SelfType	fast_delegate.h	/^  typedef FastDelegate SelfType;$/;"	t	class:fastdelegate::FastDelegate
SetMemento	fast_delegate.h	/^	void SetMemento(const DelegateMemento &any) { m_Closure.CopyFrom(this, any); }$/;"	f	class:fastdelegate::FastDelegate0
SetMemento	fast_delegate.h	/^	void SetMemento(const DelegateMemento &any) { m_Closure.CopyFrom(this, any); }$/;"	f	class:fastdelegate::FastDelegate1
SetMemento	fast_delegate.h	/^	void SetMemento(const DelegateMemento &any) { m_Closure.CopyFrom(this, any); }$/;"	f	class:fastdelegate::FastDelegate2
SetMemento	fast_delegate.h	/^	void SetMemento(const DelegateMemento &any) { m_Closure.CopyFrom(this, any); }$/;"	f	class:fastdelegate::FastDelegate3
SetMemento	fast_delegate.h	/^	void SetMemento(const DelegateMemento &any) { m_Closure.CopyFrom(this, any); }$/;"	f	class:fastdelegate::FastDelegate4
SetMemento	fast_delegate.h	/^	void SetMemento(const DelegateMemento &any) { m_Closure.CopyFrom(this, any); }$/;"	f	class:fastdelegate::FastDelegate5
SetMemento	fast_delegate.h	/^	void SetMemento(const DelegateMemento &any) { m_Closure.CopyFrom(this, any); }$/;"	f	class:fastdelegate::FastDelegate6
SetMemento	fast_delegate.h	/^	void SetMemento(const DelegateMemento &any) { m_Closure.CopyFrom(this, any); }$/;"	f	class:fastdelegate::FastDelegate7
SetMemento	fast_delegate.h	/^	void SetMemento(const DelegateMemento &any) { m_Closure.CopyFrom(this, any); }$/;"	f	class:fastdelegate::FastDelegate8
SetMementoFrom	fast_delegate.h	/^	void SetMementoFrom(const DelegateMemento &right)  {$/;"	f	class:fastdelegate::DelegateMemento
SimplifyMemFunc	fast_delegate.h	/^struct SimplifyMemFunc {$/;"	s	namespace:fastdelegate::detail
SimplifyMemFunc	fast_delegate.h	/^struct SimplifyMemFunc< SINGLE_MEMFUNCPTR_SIZE + sizeof(int) >  {$/;"	s	namespace:fastdelegate::detail
SimplifyMemFunc	fast_delegate.h	/^struct SimplifyMemFunc<SINGLE_MEMFUNCPTR_SIZE + 2*sizeof(int) >$/;"	s	namespace:fastdelegate::detail
SimplifyMemFunc	fast_delegate.h	/^struct SimplifyMemFunc<SINGLE_MEMFUNCPTR_SIZE + 3*sizeof(int) >$/;"	s	namespace:fastdelegate::detail
SimplifyMemFunc	fast_delegate.h	/^struct SimplifyMemFunc<SINGLE_MEMFUNCPTR_SIZE>  {	$/;"	s	namespace:fastdelegate::detail
StaticFunctionPtr	fast_delegate.h	/^	typedef DesiredRetType (*StaticFunctionPtr)();$/;"	t	class:fastdelegate::FastDelegate0
StaticFunctionPtr	fast_delegate.h	/^	typedef DesiredRetType (*StaticFunctionPtr)(Param1 p1);$/;"	t	class:fastdelegate::FastDelegate1
StaticFunctionPtr	fast_delegate.h	/^	typedef DesiredRetType (*StaticFunctionPtr)(Param1 p1, Param2 p2);$/;"	t	class:fastdelegate::FastDelegate2
StaticFunctionPtr	fast_delegate.h	/^	typedef DesiredRetType (*StaticFunctionPtr)(Param1 p1, Param2 p2, Param3 p3);$/;"	t	class:fastdelegate::FastDelegate3
StaticFunctionPtr	fast_delegate.h	/^	typedef DesiredRetType (*StaticFunctionPtr)(Param1 p1, Param2 p2, Param3 p3, Param4 p4);$/;"	t	class:fastdelegate::FastDelegate4
StaticFunctionPtr	fast_delegate.h	/^	typedef DesiredRetType (*StaticFunctionPtr)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5);$/;"	t	class:fastdelegate::FastDelegate5
StaticFunctionPtr	fast_delegate.h	/^	typedef DesiredRetType (*StaticFunctionPtr)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6);$/;"	t	class:fastdelegate::FastDelegate6
StaticFunctionPtr	fast_delegate.h	/^	typedef DesiredRetType (*StaticFunctionPtr)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7);$/;"	t	class:fastdelegate::FastDelegate7
StaticFunctionPtr	fast_delegate.h	/^	typedef DesiredRetType (*StaticFunctionPtr)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7, Param8 p8);$/;"	t	class:fastdelegate::FastDelegate8
UnvoidStaticFunctionPtr	fast_delegate.h	/^	typedef RetType (*UnvoidStaticFunctionPtr)();$/;"	t	class:fastdelegate::FastDelegate0
UnvoidStaticFunctionPtr	fast_delegate.h	/^	typedef RetType (*UnvoidStaticFunctionPtr)(Param1 p1);$/;"	t	class:fastdelegate::FastDelegate1
UnvoidStaticFunctionPtr	fast_delegate.h	/^	typedef RetType (*UnvoidStaticFunctionPtr)(Param1 p1, Param2 p2);$/;"	t	class:fastdelegate::FastDelegate2
UnvoidStaticFunctionPtr	fast_delegate.h	/^	typedef RetType (*UnvoidStaticFunctionPtr)(Param1 p1, Param2 p2, Param3 p3);$/;"	t	class:fastdelegate::FastDelegate3
UnvoidStaticFunctionPtr	fast_delegate.h	/^	typedef RetType (*UnvoidStaticFunctionPtr)(Param1 p1, Param2 p2, Param3 p3, Param4 p4);$/;"	t	class:fastdelegate::FastDelegate4
UnvoidStaticFunctionPtr	fast_delegate.h	/^	typedef RetType (*UnvoidStaticFunctionPtr)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5);$/;"	t	class:fastdelegate::FastDelegate5
UnvoidStaticFunctionPtr	fast_delegate.h	/^	typedef RetType (*UnvoidStaticFunctionPtr)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6);$/;"	t	class:fastdelegate::FastDelegate6
UnvoidStaticFunctionPtr	fast_delegate.h	/^	typedef RetType (*UnvoidStaticFunctionPtr)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7);$/;"	t	class:fastdelegate::FastDelegate7
UnvoidStaticFunctionPtr	fast_delegate.h	/^	typedef RetType (*UnvoidStaticFunctionPtr)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7, Param8 p8);$/;"	t	class:fastdelegate::FastDelegate8
UselessTypedef	fast_delegate.h	/^	} UselessTypedef;$/;"	t	class:fastdelegate::FastDelegate0	typeref:struct:fastdelegate::FastDelegate0::SafeBoolStruct
UselessTypedef	fast_delegate.h	/^	} UselessTypedef;$/;"	t	class:fastdelegate::FastDelegate1	typeref:struct:fastdelegate::FastDelegate1::SafeBoolStruct
UselessTypedef	fast_delegate.h	/^	} UselessTypedef;$/;"	t	class:fastdelegate::FastDelegate2	typeref:struct:fastdelegate::FastDelegate2::SafeBoolStruct
UselessTypedef	fast_delegate.h	/^	} UselessTypedef;$/;"	t	class:fastdelegate::FastDelegate3	typeref:struct:fastdelegate::FastDelegate3::SafeBoolStruct
UselessTypedef	fast_delegate.h	/^	} UselessTypedef;$/;"	t	class:fastdelegate::FastDelegate4	typeref:struct:fastdelegate::FastDelegate4::SafeBoolStruct
UselessTypedef	fast_delegate.h	/^	} UselessTypedef;$/;"	t	class:fastdelegate::FastDelegate5	typeref:struct:fastdelegate::FastDelegate5::SafeBoolStruct
UselessTypedef	fast_delegate.h	/^	} UselessTypedef;$/;"	t	class:fastdelegate::FastDelegate6	typeref:struct:fastdelegate::FastDelegate6::SafeBoolStruct
UselessTypedef	fast_delegate.h	/^	} UselessTypedef;$/;"	t	class:fastdelegate::FastDelegate7	typeref:struct:fastdelegate::FastDelegate7::SafeBoolStruct
UselessTypedef	fast_delegate.h	/^	} UselessTypedef;$/;"	t	class:fastdelegate::FastDelegate8	typeref:struct:fastdelegate::FastDelegate8::SafeBoolStruct
VoidToDefaultVoid	fast_delegate.h	/^struct VoidToDefaultVoid { typedef T type; };$/;"	s	namespace:fastdelegate::detail
VoidToDefaultVoid	fast_delegate.h	/^struct VoidToDefaultVoid<void> { typedef DefaultVoid type; };$/;"	s	namespace:fastdelegate::detail
a_data_pointer_to_this_is_0_on_buggy_compilers	fast_delegate.h	/^		int a_data_pointer_to_this_is_0_on_buggy_compilers;$/;"	m	struct:fastdelegate::FastDelegate0::SafeBoolStruct
a_data_pointer_to_this_is_0_on_buggy_compilers	fast_delegate.h	/^		int a_data_pointer_to_this_is_0_on_buggy_compilers;$/;"	m	struct:fastdelegate::FastDelegate1::SafeBoolStruct
a_data_pointer_to_this_is_0_on_buggy_compilers	fast_delegate.h	/^		int a_data_pointer_to_this_is_0_on_buggy_compilers;$/;"	m	struct:fastdelegate::FastDelegate2::SafeBoolStruct
a_data_pointer_to_this_is_0_on_buggy_compilers	fast_delegate.h	/^		int a_data_pointer_to_this_is_0_on_buggy_compilers;$/;"	m	struct:fastdelegate::FastDelegate3::SafeBoolStruct
a_data_pointer_to_this_is_0_on_buggy_compilers	fast_delegate.h	/^		int a_data_pointer_to_this_is_0_on_buggy_compilers;$/;"	m	struct:fastdelegate::FastDelegate4::SafeBoolStruct
a_data_pointer_to_this_is_0_on_buggy_compilers	fast_delegate.h	/^		int a_data_pointer_to_this_is_0_on_buggy_compilers;$/;"	m	struct:fastdelegate::FastDelegate5::SafeBoolStruct
a_data_pointer_to_this_is_0_on_buggy_compilers	fast_delegate.h	/^		int a_data_pointer_to_this_is_0_on_buggy_compilers;$/;"	m	struct:fastdelegate::FastDelegate6::SafeBoolStruct
a_data_pointer_to_this_is_0_on_buggy_compilers	fast_delegate.h	/^		int a_data_pointer_to_this_is_0_on_buggy_compilers;$/;"	m	struct:fastdelegate::FastDelegate7::SafeBoolStruct
a_data_pointer_to_this_is_0_on_buggy_compilers	fast_delegate.h	/^		int a_data_pointer_to_this_is_0_on_buggy_compilers;$/;"	m	struct:fastdelegate::FastDelegate8::SafeBoolStruct
bind	fast_delegate.h	/^	inline void bind(DesiredRetType (*function_to_bind)()) {$/;"	f	class:fastdelegate::FastDelegate0
bind	fast_delegate.h	/^	inline void bind(DesiredRetType (*function_to_bind)(Param1 p1)) {$/;"	f	class:fastdelegate::FastDelegate1
bind	fast_delegate.h	/^	inline void bind(DesiredRetType (*function_to_bind)(Param1 p1, Param2 p2)) {$/;"	f	class:fastdelegate::FastDelegate2
bind	fast_delegate.h	/^	inline void bind(DesiredRetType (*function_to_bind)(Param1 p1, Param2 p2, Param3 p3)) {$/;"	f	class:fastdelegate::FastDelegate3
bind	fast_delegate.h	/^	inline void bind(DesiredRetType (*function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4)) {$/;"	f	class:fastdelegate::FastDelegate4
bind	fast_delegate.h	/^	inline void bind(DesiredRetType (*function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5)) {$/;"	f	class:fastdelegate::FastDelegate5
bind	fast_delegate.h	/^	inline void bind(DesiredRetType (*function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6)) {$/;"	f	class:fastdelegate::FastDelegate6
bind	fast_delegate.h	/^	inline void bind(DesiredRetType (*function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7)) {$/;"	f	class:fastdelegate::FastDelegate7
bind	fast_delegate.h	/^	inline void bind(DesiredRetType (*function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7, Param8 p8)) {$/;"	f	class:fastdelegate::FastDelegate8
bind	fast_delegate.h	/^	inline void bind(Y *pthis, DesiredRetType (X::* function_to_bind)()) {$/;"	f	class:fastdelegate::FastDelegate0
bind	fast_delegate.h	/^	inline void bind(Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1)) {$/;"	f	class:fastdelegate::FastDelegate1
bind	fast_delegate.h	/^	inline void bind(Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1, Param2 p2)) {$/;"	f	class:fastdelegate::FastDelegate2
bind	fast_delegate.h	/^	inline void bind(Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1, Param2 p2, Param3 p3)) {$/;"	f	class:fastdelegate::FastDelegate3
bind	fast_delegate.h	/^	inline void bind(Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4)) {$/;"	f	class:fastdelegate::FastDelegate4
bind	fast_delegate.h	/^	inline void bind(Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5)) {$/;"	f	class:fastdelegate::FastDelegate5
bind	fast_delegate.h	/^	inline void bind(Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6)) {$/;"	f	class:fastdelegate::FastDelegate6
bind	fast_delegate.h	/^	inline void bind(Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7)) {$/;"	f	class:fastdelegate::FastDelegate7
bind	fast_delegate.h	/^	inline void bind(Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7, Param8 p8)) {$/;"	f	class:fastdelegate::FastDelegate8
bind	fast_delegate.h	/^	inline void bind(const Y *pthis, DesiredRetType (X::* function_to_bind)() const) {$/;"	f	class:fastdelegate::FastDelegate0
bind	fast_delegate.h	/^	inline void bind(const Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1) const) {$/;"	f	class:fastdelegate::FastDelegate1
bind	fast_delegate.h	/^	inline void bind(const Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1, Param2 p2) const) {$/;"	f	class:fastdelegate::FastDelegate2
bind	fast_delegate.h	/^	inline void bind(const Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1, Param2 p2, Param3 p3) const) {$/;"	f	class:fastdelegate::FastDelegate3
bind	fast_delegate.h	/^	inline void bind(const Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4) const) {$/;"	f	class:fastdelegate::FastDelegate4
bind	fast_delegate.h	/^	inline void bind(const Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5) const) {$/;"	f	class:fastdelegate::FastDelegate5
bind	fast_delegate.h	/^	inline void bind(const Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6) const) {$/;"	f	class:fastdelegate::FastDelegate6
bind	fast_delegate.h	/^	inline void bind(const Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7) const) {$/;"	f	class:fastdelegate::FastDelegate7
bind	fast_delegate.h	/^	inline void bind(const Y *pthis, DesiredRetType (X::* function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7, Param8 p8) const) {$/;"	f	class:fastdelegate::FastDelegate8
bindconstmemfunc	fast_delegate.h	/^	inline void bindconstmemfunc(const X *pthis, XMemFunc function_to_bind) {$/;"	f	class:fastdelegate::detail::ClosurePtr
bindmemfunc	fast_delegate.h	/^	inline void bindmemfunc(X *pthis, XMemFunc function_to_bind ) {$/;"	f	class:fastdelegate::detail::ClosurePtr
bindmemfunc	fast_delegate.h	/^	inline void bindmemfunc(const X *pthis, XMemFunc function_to_bind) {$/;"	f	class:fastdelegate::detail::ClosurePtr
bindstaticfunc	fast_delegate.h	/^	inline void bindstaticfunc(DerivedClass *pParent, ParentInvokerSig static_function_invoker, $/;"	f	class:fastdelegate::detail::ClosurePtr
clear	fast_delegate.h	/^	void clear() {	m_pthis=0; m_pFunction=0;	}$/;"	f	class:fastdelegate::DelegateMemento
clear	fast_delegate.h	/^	void clear() { m_Closure.clear();}$/;"	f	class:fastdelegate::FastDelegate0
clear	fast_delegate.h	/^	void clear() { m_Closure.clear();}$/;"	f	class:fastdelegate::FastDelegate1
clear	fast_delegate.h	/^	void clear() { m_Closure.clear();}$/;"	f	class:fastdelegate::FastDelegate2
clear	fast_delegate.h	/^	void clear() { m_Closure.clear();}$/;"	f	class:fastdelegate::FastDelegate3
clear	fast_delegate.h	/^	void clear() { m_Closure.clear();}$/;"	f	class:fastdelegate::FastDelegate4
clear	fast_delegate.h	/^	void clear() { m_Closure.clear();}$/;"	f	class:fastdelegate::FastDelegate5
clear	fast_delegate.h	/^	void clear() { m_Closure.clear();}$/;"	f	class:fastdelegate::FastDelegate6
clear	fast_delegate.h	/^	void clear() { m_Closure.clear();}$/;"	f	class:fastdelegate::FastDelegate7
clear	fast_delegate.h	/^	void clear() { m_Closure.clear();}$/;"	f	class:fastdelegate::FastDelegate8
clear	fast_delegate.h	/^	void clear() {$/;"	f	class:fastdelegate::DelegateMemento
codeptr	fast_delegate.h	/^	void (GenericClass::*codeptr)(); \/\/ points to the actual member function$/;"	m	struct:fastdelegate::detail::MicrosoftVirtualMFP
delta	fast_delegate.h	/^	int delta;		\/\/ #bytes to be added to the 'this' pointer$/;"	m	struct:fastdelegate::detail::MicrosoftVirtualMFP
detail	fast_delegate.h	/^namespace detail {	\/\/ we'll hide the implementation details in a nested namespace.$/;"	n	namespace:fastdelegate
detail	fast_delegate.h	/^namespace detail {$/;"	n	namespace:fastdelegate
empty	fast_delegate.h	/^	inline bool empty() const		\/\/ Is it bound to anything?$/;"	f	class:fastdelegate::DelegateMemento
empty	fast_delegate.h	/^	inline bool empty() const	{$/;"	f	class:fastdelegate::FastDelegate0
empty	fast_delegate.h	/^	inline bool empty() const	{$/;"	f	class:fastdelegate::FastDelegate1
empty	fast_delegate.h	/^	inline bool empty() const	{$/;"	f	class:fastdelegate::FastDelegate2
empty	fast_delegate.h	/^	inline bool empty() const	{$/;"	f	class:fastdelegate::FastDelegate3
empty	fast_delegate.h	/^	inline bool empty() const	{$/;"	f	class:fastdelegate::FastDelegate4
empty	fast_delegate.h	/^	inline bool empty() const	{$/;"	f	class:fastdelegate::FastDelegate5
empty	fast_delegate.h	/^	inline bool empty() const	{$/;"	f	class:fastdelegate::FastDelegate6
empty	fast_delegate.h	/^	inline bool empty() const	{$/;"	f	class:fastdelegate::FastDelegate7
empty	fast_delegate.h	/^	inline bool empty() const	{$/;"	f	class:fastdelegate::FastDelegate8
fastdelegate	fast_delegate.h	/^namespace fastdelegate {$/;"	n
horrible_cast	fast_delegate.h	/^inline OutputClass horrible_cast(const InputClass input){$/;"	f	namespace:fastdelegate::detail
horrible_union	fast_delegate.h	/^union horrible_union{$/;"	u	namespace:fastdelegate::detail
implicit_cast	fast_delegate.h	/^inline OutputClass implicit_cast(InputClass input){$/;"	f	namespace:fastdelegate::detail
in	fast_delegate.h	/^	InputClass in;$/;"	m	union:fastdelegate::detail::horrible_union
m_Closure	fast_delegate.h	/^	ClosureType m_Closure;$/;"	m	class:fastdelegate::FastDelegate0
m_Closure	fast_delegate.h	/^	ClosureType m_Closure;$/;"	m	class:fastdelegate::FastDelegate1
m_Closure	fast_delegate.h	/^	ClosureType m_Closure;$/;"	m	class:fastdelegate::FastDelegate2
m_Closure	fast_delegate.h	/^	ClosureType m_Closure;$/;"	m	class:fastdelegate::FastDelegate3
m_Closure	fast_delegate.h	/^	ClosureType m_Closure;$/;"	m	class:fastdelegate::FastDelegate4
m_Closure	fast_delegate.h	/^	ClosureType m_Closure;$/;"	m	class:fastdelegate::FastDelegate5
m_Closure	fast_delegate.h	/^	ClosureType m_Closure;$/;"	m	class:fastdelegate::FastDelegate6
m_Closure	fast_delegate.h	/^	ClosureType m_Closure;$/;"	m	class:fastdelegate::FastDelegate7
m_Closure	fast_delegate.h	/^	ClosureType m_Closure;$/;"	m	class:fastdelegate::FastDelegate8
m_nonzero	fast_delegate.h	/^		StaticFunctionPtr m_nonzero;$/;"	m	struct:fastdelegate::FastDelegate0::SafeBoolStruct
m_nonzero	fast_delegate.h	/^		StaticFunctionPtr m_nonzero;$/;"	m	struct:fastdelegate::FastDelegate1::SafeBoolStruct
m_nonzero	fast_delegate.h	/^		StaticFunctionPtr m_nonzero;$/;"	m	struct:fastdelegate::FastDelegate2::SafeBoolStruct
m_nonzero	fast_delegate.h	/^		StaticFunctionPtr m_nonzero;$/;"	m	struct:fastdelegate::FastDelegate3::SafeBoolStruct
m_nonzero	fast_delegate.h	/^		StaticFunctionPtr m_nonzero;$/;"	m	struct:fastdelegate::FastDelegate4::SafeBoolStruct
m_nonzero	fast_delegate.h	/^		StaticFunctionPtr m_nonzero;$/;"	m	struct:fastdelegate::FastDelegate5::SafeBoolStruct
m_nonzero	fast_delegate.h	/^		StaticFunctionPtr m_nonzero;$/;"	m	struct:fastdelegate::FastDelegate6::SafeBoolStruct
m_nonzero	fast_delegate.h	/^		StaticFunctionPtr m_nonzero;$/;"	m	struct:fastdelegate::FastDelegate7::SafeBoolStruct
m_nonzero	fast_delegate.h	/^		StaticFunctionPtr m_nonzero;$/;"	m	struct:fastdelegate::FastDelegate8::SafeBoolStruct
m_pFunction	fast_delegate.h	/^	GenericMemFuncType m_pFunction;$/;"	m	class:fastdelegate::DelegateMemento
m_pStaticFunction	fast_delegate.h	/^	GenericFuncPtr m_pStaticFunction;$/;"	m	class:fastdelegate::DelegateMemento
m_pthis	fast_delegate.h	/^	detail::GenericClass *m_pthis;$/;"	m	class:fastdelegate::DelegateMemento
operator !	fast_delegate.h	/^	inline bool operator ! () const		\/\/ Is it bound to anything?$/;"	f	class:fastdelegate::DelegateMemento
operator !	fast_delegate.h	/^	inline bool operator ! () const	{	\/\/ Is it bound to anything?$/;"	f	class:fastdelegate::FastDelegate0
operator !	fast_delegate.h	/^	inline bool operator ! () const	{	\/\/ Is it bound to anything?$/;"	f	class:fastdelegate::FastDelegate1
operator !	fast_delegate.h	/^	inline bool operator ! () const	{	\/\/ Is it bound to anything?$/;"	f	class:fastdelegate::FastDelegate2
operator !	fast_delegate.h	/^	inline bool operator ! () const	{	\/\/ Is it bound to anything?$/;"	f	class:fastdelegate::FastDelegate3
operator !	fast_delegate.h	/^	inline bool operator ! () const	{	\/\/ Is it bound to anything?$/;"	f	class:fastdelegate::FastDelegate4
operator !	fast_delegate.h	/^	inline bool operator ! () const	{	\/\/ Is it bound to anything?$/;"	f	class:fastdelegate::FastDelegate5
operator !	fast_delegate.h	/^	inline bool operator ! () const	{	\/\/ Is it bound to anything?$/;"	f	class:fastdelegate::FastDelegate6
operator !	fast_delegate.h	/^	inline bool operator ! () const	{	\/\/ Is it bound to anything?$/;"	f	class:fastdelegate::FastDelegate7
operator !	fast_delegate.h	/^	inline bool operator ! () const	{	\/\/ Is it bound to anything?$/;"	f	class:fastdelegate::FastDelegate8
operator !=	fast_delegate.h	/^	bool operator !=(const FastDelegate0 &x) const {$/;"	f	class:fastdelegate::FastDelegate0
operator !=	fast_delegate.h	/^	bool operator !=(const FastDelegate1 &x) const {$/;"	f	class:fastdelegate::FastDelegate1
operator !=	fast_delegate.h	/^	bool operator !=(const FastDelegate2 &x) const {$/;"	f	class:fastdelegate::FastDelegate2
operator !=	fast_delegate.h	/^	bool operator !=(const FastDelegate3 &x) const {$/;"	f	class:fastdelegate::FastDelegate3
operator !=	fast_delegate.h	/^	bool operator !=(const FastDelegate4 &x) const {$/;"	f	class:fastdelegate::FastDelegate4
operator !=	fast_delegate.h	/^	bool operator !=(const FastDelegate5 &x) const {$/;"	f	class:fastdelegate::FastDelegate5
operator !=	fast_delegate.h	/^	bool operator !=(const FastDelegate6 &x) const {$/;"	f	class:fastdelegate::FastDelegate6
operator !=	fast_delegate.h	/^	bool operator !=(const FastDelegate7 &x) const {$/;"	f	class:fastdelegate::FastDelegate7
operator !=	fast_delegate.h	/^	bool operator !=(const FastDelegate8 &x) const {$/;"	f	class:fastdelegate::FastDelegate8
operator !=	fast_delegate.h	/^	inline bool operator!=(StaticFunctionPtr funcptr) { $/;"	f	class:fastdelegate::FastDelegate0
operator !=	fast_delegate.h	/^	inline bool operator!=(StaticFunctionPtr funcptr) { $/;"	f	class:fastdelegate::FastDelegate1
operator !=	fast_delegate.h	/^	inline bool operator!=(StaticFunctionPtr funcptr) { $/;"	f	class:fastdelegate::FastDelegate2
operator !=	fast_delegate.h	/^	inline bool operator!=(StaticFunctionPtr funcptr) { $/;"	f	class:fastdelegate::FastDelegate3
operator !=	fast_delegate.h	/^	inline bool operator!=(StaticFunctionPtr funcptr) { $/;"	f	class:fastdelegate::FastDelegate4
operator !=	fast_delegate.h	/^	inline bool operator!=(StaticFunctionPtr funcptr) { $/;"	f	class:fastdelegate::FastDelegate5
operator !=	fast_delegate.h	/^	inline bool operator!=(StaticFunctionPtr funcptr) { $/;"	f	class:fastdelegate::FastDelegate6
operator !=	fast_delegate.h	/^	inline bool operator!=(StaticFunctionPtr funcptr) { $/;"	f	class:fastdelegate::FastDelegate7
operator !=	fast_delegate.h	/^	inline bool operator!=(StaticFunctionPtr funcptr) { $/;"	f	class:fastdelegate::FastDelegate8
operator ()	fast_delegate.h	/^	RetType operator() () const {$/;"	f	class:fastdelegate::FastDelegate0
operator ()	fast_delegate.h	/^	RetType operator() (Param1 p1) const {$/;"	f	class:fastdelegate::FastDelegate1
operator ()	fast_delegate.h	/^	RetType operator() (Param1 p1, Param2 p2) const {$/;"	f	class:fastdelegate::FastDelegate2
operator ()	fast_delegate.h	/^	RetType operator() (Param1 p1, Param2 p2, Param3 p3) const {$/;"	f	class:fastdelegate::FastDelegate3
operator ()	fast_delegate.h	/^	RetType operator() (Param1 p1, Param2 p2, Param3 p3, Param4 p4) const {$/;"	f	class:fastdelegate::FastDelegate4
operator ()	fast_delegate.h	/^	RetType operator() (Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5) const {$/;"	f	class:fastdelegate::FastDelegate5
operator ()	fast_delegate.h	/^	RetType operator() (Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6) const {$/;"	f	class:fastdelegate::FastDelegate6
operator ()	fast_delegate.h	/^	RetType operator() (Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7) const {$/;"	f	class:fastdelegate::FastDelegate7
operator ()	fast_delegate.h	/^	RetType operator() (Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7, Param8 p8) const {$/;"	f	class:fastdelegate::FastDelegate8
operator <	fast_delegate.h	/^	bool operator <(const FastDelegate0 &x) const {$/;"	f	class:fastdelegate::FastDelegate0
operator <	fast_delegate.h	/^	bool operator <(const FastDelegate1 &x) const {$/;"	f	class:fastdelegate::FastDelegate1
operator <	fast_delegate.h	/^	bool operator <(const FastDelegate2 &x) const {$/;"	f	class:fastdelegate::FastDelegate2
operator <	fast_delegate.h	/^	bool operator <(const FastDelegate3 &x) const {$/;"	f	class:fastdelegate::FastDelegate3
operator <	fast_delegate.h	/^	bool operator <(const FastDelegate4 &x) const {$/;"	f	class:fastdelegate::FastDelegate4
operator <	fast_delegate.h	/^	bool operator <(const FastDelegate5 &x) const {$/;"	f	class:fastdelegate::FastDelegate5
operator <	fast_delegate.h	/^	bool operator <(const FastDelegate6 &x) const {$/;"	f	class:fastdelegate::FastDelegate6
operator <	fast_delegate.h	/^	bool operator <(const FastDelegate7 &x) const {$/;"	f	class:fastdelegate::FastDelegate7
operator <	fast_delegate.h	/^	bool operator <(const FastDelegate8 &x) const {$/;"	f	class:fastdelegate::FastDelegate8
operator <	fast_delegate.h	/^	inline bool operator <(const DelegateMemento &right) {$/;"	f	class:fastdelegate::DelegateMemento
operator =	fast_delegate.h	/^	DelegateMemento & operator = (const DelegateMemento &right)  {$/;"	f	class:fastdelegate::DelegateMemento
operator =	fast_delegate.h	/^	void operator = (DesiredRetType (*function_to_bind)() ) {$/;"	f	class:fastdelegate::FastDelegate0
operator =	fast_delegate.h	/^	void operator = (DesiredRetType (*function_to_bind)(Param1 p1) ) {$/;"	f	class:fastdelegate::FastDelegate1
operator =	fast_delegate.h	/^	void operator = (DesiredRetType (*function_to_bind)(Param1 p1, Param2 p2) ) {$/;"	f	class:fastdelegate::FastDelegate2
operator =	fast_delegate.h	/^	void operator = (DesiredRetType (*function_to_bind)(Param1 p1, Param2 p2, Param3 p3) ) {$/;"	f	class:fastdelegate::FastDelegate3
operator =	fast_delegate.h	/^	void operator = (DesiredRetType (*function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4) ) {$/;"	f	class:fastdelegate::FastDelegate4
operator =	fast_delegate.h	/^	void operator = (DesiredRetType (*function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5) ) {$/;"	f	class:fastdelegate::FastDelegate5
operator =	fast_delegate.h	/^	void operator = (DesiredRetType (*function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6) ) {$/;"	f	class:fastdelegate::FastDelegate6
operator =	fast_delegate.h	/^	void operator = (DesiredRetType (*function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7) ) {$/;"	f	class:fastdelegate::FastDelegate7
operator =	fast_delegate.h	/^	void operator = (DesiredRetType (*function_to_bind)(Param1 p1, Param2 p2, Param3 p3, Param4 p4, Param5 p5, Param6 p6, Param7 p7, Param8 p8) ) {$/;"	f	class:fastdelegate::FastDelegate8
operator =	fast_delegate.h	/^	void operator = (const FastDelegate0 &x)  {$/;"	f	class:fastdelegate::FastDelegate0
operator =	fast_delegate.h	/^	void operator = (const FastDelegate1 &x)  {$/;"	f	class:fastdelegate::FastDelegate1
operator =	fast_delegate.h	/^	void operator = (const FastDelegate2 &x)  {$/;"	f	class:fastdelegate::FastDelegate2
operator =	fast_delegate.h	/^	void operator = (const FastDelegate3 &x)  {$/;"	f	class:fastdelegate::FastDelegate3
operator =	fast_delegate.h	/^	void operator = (const FastDelegate4 &x)  {$/;"	f	class:fastdelegate::FastDelegate4
operator =	fast_delegate.h	/^	void operator = (const FastDelegate5 &x)  {$/;"	f	class:fastdelegate::FastDelegate5
operator =	fast_delegate.h	/^	void operator = (const FastDelegate6 &x)  {$/;"	f	class:fastdelegate::FastDelegate6
operator =	fast_delegate.h	/^	void operator = (const FastDelegate7 &x)  {$/;"	f	class:fastdelegate::FastDelegate7
operator =	fast_delegate.h	/^	void operator = (const FastDelegate8 &x)  {$/;"	f	class:fastdelegate::FastDelegate8
operator =	fast_delegate.h	/^  void operator = (const BaseType &x)  {	  $/;"	f	class:fastdelegate::FastDelegate
operator ==	fast_delegate.h	/^	bool operator ==(const FastDelegate0 &x) const {$/;"	f	class:fastdelegate::FastDelegate0
operator ==	fast_delegate.h	/^	bool operator ==(const FastDelegate1 &x) const {$/;"	f	class:fastdelegate::FastDelegate1
operator ==	fast_delegate.h	/^	bool operator ==(const FastDelegate2 &x) const {$/;"	f	class:fastdelegate::FastDelegate2
operator ==	fast_delegate.h	/^	bool operator ==(const FastDelegate3 &x) const {$/;"	f	class:fastdelegate::FastDelegate3
operator ==	fast_delegate.h	/^	bool operator ==(const FastDelegate4 &x) const {$/;"	f	class:fastdelegate::FastDelegate4
operator ==	fast_delegate.h	/^	bool operator ==(const FastDelegate5 &x) const {$/;"	f	class:fastdelegate::FastDelegate5
operator ==	fast_delegate.h	/^	bool operator ==(const FastDelegate6 &x) const {$/;"	f	class:fastdelegate::FastDelegate6
operator ==	fast_delegate.h	/^	bool operator ==(const FastDelegate7 &x) const {$/;"	f	class:fastdelegate::FastDelegate7
operator ==	fast_delegate.h	/^	bool operator ==(const FastDelegate8 &x) const {$/;"	f	class:fastdelegate::FastDelegate8
operator ==	fast_delegate.h	/^	inline bool operator==(StaticFunctionPtr funcptr) {$/;"	f	class:fastdelegate::FastDelegate0
operator ==	fast_delegate.h	/^	inline bool operator==(StaticFunctionPtr funcptr) {$/;"	f	class:fastdelegate::FastDelegate1
operator ==	fast_delegate.h	/^	inline bool operator==(StaticFunctionPtr funcptr) {$/;"	f	class:fastdelegate::FastDelegate2
operator ==	fast_delegate.h	/^	inline bool operator==(StaticFunctionPtr funcptr) {$/;"	f	class:fastdelegate::FastDelegate3
operator ==	fast_delegate.h	/^	inline bool operator==(StaticFunctionPtr funcptr) {$/;"	f	class:fastdelegate::FastDelegate4
operator ==	fast_delegate.h	/^	inline bool operator==(StaticFunctionPtr funcptr) {$/;"	f	class:fastdelegate::FastDelegate5
operator ==	fast_delegate.h	/^	inline bool operator==(StaticFunctionPtr funcptr) {$/;"	f	class:fastdelegate::FastDelegate6
operator ==	fast_delegate.h	/^	inline bool operator==(StaticFunctionPtr funcptr) {$/;"	f	class:fastdelegate::FastDelegate7
operator ==	fast_delegate.h	/^	inline bool operator==(StaticFunctionPtr funcptr) {$/;"	f	class:fastdelegate::FastDelegate8
operator >	fast_delegate.h	/^	bool operator >(const FastDelegate0 &x) const {$/;"	f	class:fastdelegate::FastDelegate0
operator >	fast_delegate.h	/^	bool operator >(const FastDelegate1 &x) const {$/;"	f	class:fastdelegate::FastDelegate1
operator >	fast_delegate.h	/^	bool operator >(const FastDelegate2 &x) const {$/;"	f	class:fastdelegate::FastDelegate2
operator >	fast_delegate.h	/^	bool operator >(const FastDelegate3 &x) const {$/;"	f	class:fastdelegate::FastDelegate3
operator >	fast_delegate.h	/^	bool operator >(const FastDelegate4 &x) const {$/;"	f	class:fastdelegate::FastDelegate4
operator >	fast_delegate.h	/^	bool operator >(const FastDelegate5 &x) const {$/;"	f	class:fastdelegate::FastDelegate5
operator >	fast_delegate.h	/^	bool operator >(const FastDelegate6 &x) const {$/;"	f	class:fastdelegate::FastDelegate6
operator >	fast_delegate.h	/^	bool operator >(const FastDelegate7 &x) const {$/;"	f	class:fastdelegate::FastDelegate7
operator >	fast_delegate.h	/^	bool operator >(const FastDelegate8 &x) const {$/;"	f	class:fastdelegate::FastDelegate8
operator >	fast_delegate.h	/^	inline bool operator >(const DelegateMemento &right) {$/;"	f	class:fastdelegate::DelegateMemento
operator unspecified_bool_type	fast_delegate.h	/^	operator unspecified_bool_type() const {$/;"	f	class:fastdelegate::FastDelegate0
operator unspecified_bool_type	fast_delegate.h	/^	operator unspecified_bool_type() const {$/;"	f	class:fastdelegate::FastDelegate1
operator unspecified_bool_type	fast_delegate.h	/^	operator unspecified_bool_type() const {$/;"	f	class:fastdelegate::FastDelegate2
operator unspecified_bool_type	fast_delegate.h	/^	operator unspecified_bool_type() const {$/;"	f	class:fastdelegate::FastDelegate3
operator unspecified_bool_type	fast_delegate.h	/^	operator unspecified_bool_type() const {$/;"	f	class:fastdelegate::FastDelegate4
operator unspecified_bool_type	fast_delegate.h	/^	operator unspecified_bool_type() const {$/;"	f	class:fastdelegate::FastDelegate5
operator unspecified_bool_type	fast_delegate.h	/^	operator unspecified_bool_type() const {$/;"	f	class:fastdelegate::FastDelegate6
operator unspecified_bool_type	fast_delegate.h	/^	operator unspecified_bool_type() const {$/;"	f	class:fastdelegate::FastDelegate7
operator unspecified_bool_type	fast_delegate.h	/^	operator unspecified_bool_type() const {$/;"	f	class:fastdelegate::FastDelegate8
out	fast_delegate.h	/^	OutputClass out;$/;"	m	union:fastdelegate::detail::horrible_union
type	fast_delegate.h	/^	typedef FastDelegate0 type;$/;"	t	class:fastdelegate::FastDelegate0
type	fast_delegate.h	/^	typedef FastDelegate1 type;$/;"	t	class:fastdelegate::FastDelegate1
type	fast_delegate.h	/^	typedef FastDelegate2 type;$/;"	t	class:fastdelegate::FastDelegate2
type	fast_delegate.h	/^	typedef FastDelegate3 type;$/;"	t	class:fastdelegate::FastDelegate3
type	fast_delegate.h	/^	typedef FastDelegate4 type;$/;"	t	class:fastdelegate::FastDelegate4
type	fast_delegate.h	/^	typedef FastDelegate5 type;$/;"	t	class:fastdelegate::FastDelegate5
type	fast_delegate.h	/^	typedef FastDelegate6 type;$/;"	t	class:fastdelegate::FastDelegate6
type	fast_delegate.h	/^	typedef FastDelegate7 type;$/;"	t	class:fastdelegate::FastDelegate7
type	fast_delegate.h	/^	typedef FastDelegate8 type;$/;"	t	class:fastdelegate::FastDelegate8
type	fast_delegate.h	/^struct DefaultVoidToVoid { typedef T type; };$/;"	t	struct:fastdelegate::detail::DefaultVoidToVoid
type	fast_delegate.h	/^struct DefaultVoidToVoid<DefaultVoid> {	typedef void type; };$/;"	t	struct:fastdelegate::detail::DefaultVoidToVoid
type	fast_delegate.h	/^struct VoidToDefaultVoid { typedef T type; };$/;"	t	struct:fastdelegate::detail::VoidToDefaultVoid
type	fast_delegate.h	/^struct VoidToDefaultVoid<void> { typedef DefaultVoid type; };$/;"	t	struct:fastdelegate::detail::VoidToDefaultVoid
unspecified_bool_type	fast_delegate.h	/^    typedef StaticFunctionPtr SafeBoolStruct::*unspecified_bool_type;$/;"	t	class:fastdelegate::FastDelegate0::SafeBoolStruct
unspecified_bool_type	fast_delegate.h	/^    typedef StaticFunctionPtr SafeBoolStruct::*unspecified_bool_type;$/;"	t	class:fastdelegate::FastDelegate1::SafeBoolStruct
unspecified_bool_type	fast_delegate.h	/^    typedef StaticFunctionPtr SafeBoolStruct::*unspecified_bool_type;$/;"	t	class:fastdelegate::FastDelegate2::SafeBoolStruct
unspecified_bool_type	fast_delegate.h	/^    typedef StaticFunctionPtr SafeBoolStruct::*unspecified_bool_type;$/;"	t	class:fastdelegate::FastDelegate3::SafeBoolStruct
unspecified_bool_type	fast_delegate.h	/^    typedef StaticFunctionPtr SafeBoolStruct::*unspecified_bool_type;$/;"	t	class:fastdelegate::FastDelegate4::SafeBoolStruct
unspecified_bool_type	fast_delegate.h	/^    typedef StaticFunctionPtr SafeBoolStruct::*unspecified_bool_type;$/;"	t	class:fastdelegate::FastDelegate5::SafeBoolStruct
unspecified_bool_type	fast_delegate.h	/^    typedef StaticFunctionPtr SafeBoolStruct::*unspecified_bool_type;$/;"	t	class:fastdelegate::FastDelegate6::SafeBoolStruct
unspecified_bool_type	fast_delegate.h	/^    typedef StaticFunctionPtr SafeBoolStruct::*unspecified_bool_type;$/;"	t	class:fastdelegate::FastDelegate7::SafeBoolStruct
unspecified_bool_type	fast_delegate.h	/^    typedef StaticFunctionPtr SafeBoolStruct::*unspecified_bool_type;$/;"	t	class:fastdelegate::FastDelegate8::SafeBoolStruct
vtable_index	fast_delegate.h	/^	int vtable_index; \/\/ or 0 if no virtual inheritance$/;"	m	struct:fastdelegate::detail::MicrosoftVirtualMFP
FASTDELEGATEBIND_H	fast_delegate_bind.h	19;"	d
fastdelegate	fast_delegate_bind.h	/^namespace fastdelegate {$/;"	n
y	fast_delegate_bind.h	/^    Y * y,$/;"	m	namespace:fastdelegate
cast_uint32_t	fastapprox/cast.h	44;"	d
cast_uint32_t	fastapprox/cast.h	46;"	d
__FAST_EXP_H_	fastapprox/fastexp.h	42;"	d
fasterexp	fastapprox/fastexp.h	/^fasterexp (float p)$/;"	f
fasterpow2	fastapprox/fastexp.h	/^fasterpow2 (float p)$/;"	f
fastexp	fastapprox/fastexp.h	/^fastexp (float p)$/;"	f
fastpow2	fastapprox/fastexp.h	/^fastpow2 (float p)$/;"	f
vfasterexp	fastapprox/fastexp.h	/^vfasterexp (const v4sf p)$/;"	f
vfasterpow2	fastapprox/fastexp.h	/^vfasterpow2 (const v4sf p)$/;"	f
vfastexp	fastapprox/fastexp.h	/^vfastexp (const v4sf p)$/;"	f
vfastpow2	fastapprox/fastexp.h	/^vfastpow2 (const v4sf p)$/;"	f
__FAST_LOG_H_	fastapprox/fastlog.h	42;"	d
fasterlog	fastapprox/fastlog.h	/^fasterlog (float x)$/;"	f
fasterlog2	fastapprox/fastlog.h	/^fasterlog2 (float x)$/;"	f
fastlog	fastapprox/fastlog.h	/^fastlog (float x)$/;"	f
fastlog2	fastapprox/fastlog.h	/^fastlog2 (float x)$/;"	f
vfasterlog	fastapprox/fastlog.h	/^vfasterlog (v4sf x)$/;"	f
vfasterlog2	fastapprox/fastlog.h	/^vfasterlog2 (v4sf x)$/;"	f
vfastlog	fastapprox/fastlog.h	/^vfastlog (v4sf x)$/;"	f
vfastlog2	fastapprox/fastlog.h	/^vfastlog2 (v4sf x)$/;"	f
__FAST_POW_H_	fastapprox/fastpow.h	43;"	d
fasterpow	fastapprox/fastpow.h	/^fasterpow (float x,$/;"	f
fastpow	fastapprox/fastpow.h	/^fastpow (float x,$/;"	f
vfasterpow	fastapprox/fastpow.h	/^vfasterpow (const v4sf x,$/;"	f
vfastpow	fastapprox/fastpow.h	/^vfastpow (const v4sf x,$/;"	f
__FAST_SIGMOID_H_	fastapprox/fastsigmoid.h	42;"	d
fastersigmoid	fastapprox/fastsigmoid.h	/^fastersigmoid (float x)$/;"	f
fastsigmoid	fastapprox/fastsigmoid.h	/^fastsigmoid (float x)$/;"	f
vfastersigmoid	fastapprox/fastsigmoid.h	/^vfastersigmoid (const v4sf x)$/;"	f
vfastsigmoid	fastapprox/fastsigmoid.h	/^vfastsigmoid (const v4sf x)$/;"	f
__FAST_TRIG_H_	fastapprox/fasttrig.h	42;"	d
fastcos	fastapprox/fasttrig.h	/^fastcos (float x)$/;"	f
fastcosfull	fastapprox/fasttrig.h	/^fastcosfull (float x)$/;"	f
fastercos	fastapprox/fasttrig.h	/^fastercos (float x)$/;"	f
fastercosfull	fastapprox/fasttrig.h	/^fastercosfull (float x)$/;"	f
fastersin	fastapprox/fasttrig.h	/^fastersin (float x)$/;"	f
fastersinfull	fastapprox/fasttrig.h	/^fastersinfull (float x)$/;"	f
fastertan	fastapprox/fasttrig.h	/^fastertan (float x)$/;"	f
fastertanfull	fastapprox/fasttrig.h	/^fastertanfull (float x)$/;"	f
fastsin	fastapprox/fasttrig.h	/^fastsin (float x)$/;"	f
fastsinfull	fastapprox/fasttrig.h	/^fastsinfull (float x)$/;"	f
fasttan	fastapprox/fasttrig.h	/^fasttan (float x)$/;"	f
fasttanfull	fastapprox/fasttrig.h	/^fasttanfull (float x)$/;"	f
vfastcos	fastapprox/fasttrig.h	/^vfastcos (const v4sf x)$/;"	f
vfastcosfull	fastapprox/fasttrig.h	/^vfastcosfull (const v4sf x)$/;"	f
vfastercos	fastapprox/fasttrig.h	/^vfastercos (v4sf x)$/;"	f
vfastercosfull	fastapprox/fasttrig.h	/^vfastercosfull (const v4sf x)$/;"	f
vfastersin	fastapprox/fasttrig.h	/^vfastersin (const v4sf x)$/;"	f
vfastersinfull	fastapprox/fasttrig.h	/^vfastersinfull (const v4sf x)$/;"	f
vfastertan	fastapprox/fasttrig.h	/^vfastertan (const v4sf x)$/;"	f
vfastertanfull	fastapprox/fasttrig.h	/^vfastertanfull (const v4sf x)$/;"	f
vfastsin	fastapprox/fasttrig.h	/^vfastsin (const v4sf x)$/;"	f
vfastsinfull	fastapprox/fasttrig.h	/^vfastsinfull (const v4sf x)$/;"	f
vfasttan	fastapprox/fasttrig.h	/^vfasttan (const v4sf x)$/;"	f
vfasttanfull	fastapprox/fasttrig.h	/^vfasttanfull (const v4sf x)$/;"	f
__SSE_H_	fastapprox/sse.h	42;"	d
array	fastapprox/sse.h	/^typedef union { v4sf f; float array[4]; } v4sfindexer;$/;"	m	union:__anon1::__anon2
array	fastapprox/sse.h	/^typedef union { v4si i; int array[4]; } v4siindexer;$/;"	m	union:__anon1::__anon3
f	fastapprox/sse.h	/^typedef union { v4sf f; float array[4]; } v4sfindexer;$/;"	m	union:__anon1::__anon2
f	fastapprox/sse.h	/^typedef union { v4sf f; v4si i; } v4sfv4sipun;$/;"	m	union:__anon1::__anon4
i	fastapprox/sse.h	/^typedef union { v4sf f; v4si i; } v4sfv4sipun;$/;"	m	union:__anon1::__anon4
i	fastapprox/sse.h	/^typedef union { v4si i; int array[4]; } v4siindexer;$/;"	m	union:__anon1::__anon3
v2dil	fastapprox/sse.h	59;"	d
v4sf	fastapprox/sse.h	/^typedef __m128 v4sf;$/;"	t	namespace:__anon1
v4sf_fabs	fastapprox/sse.h	76;"	d
v4sf_index	fastapprox/sse.h	63;"	d
v4sf_to_v4si	fastapprox/sse.h	56;"	d
v4sfindexer	fastapprox/sse.h	/^typedef union { v4sf f; float array[4]; } v4sfindexer;$/;"	t	namespace:__anon1	typeref:union:__anon1::__anon2
v4sfl	fastapprox/sse.h	58;"	d
v4sfv4sipun	fastapprox/sse.h	/^typedef union { v4sf f; v4si i; } v4sfv4sipun;$/;"	t	namespace:__anon1	typeref:union:__anon1::__anon4
v4si	fastapprox/sse.h	/^typedef __m128i v4si;$/;"	t	namespace:__anon1
v4si_index	fastapprox/sse.h	69;"	d
v4si_to_v4sf	fastapprox/sse.h	55;"	d
v4siindexer	fastapprox/sse.h	/^typedef union { v4si i; int array[4]; } v4siindexer;$/;"	t	namespace:__anon1	typeref:union:__anon1::__anon3
v4sil	fastapprox/sse.h	60;"	d
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
Array	json/array.cpp	/^	Array::Array(const Array &other) : data(other.data) {$/;"	f	class:JsonBox::Array
Array	json/array.cpp	/^	Array::Array(const allocator_type &alloc) : data(alloc) {$/;"	f	class:JsonBox::Array
Array	json/array.cpp	/^	Array::Array(size_type count, const_reference value, const allocator_type &alloc) : data(count, value, alloc) {$/;"	f	class:JsonBox::Array
JsonBox	json/array.cpp	/^namespace JsonBox {$/;"	n	file:
assign	json/array.cpp	/^	void Array::assign(size_type count, const_reference value) {$/;"	f	class:JsonBox::Array
at	json/array.cpp	/^	Array::const_reference Array::at(size_type pos) const {$/;"	f	class:JsonBox::Array
at	json/array.cpp	/^	Array::reference Array::at(size_type pos) {$/;"	f	class:JsonBox::Array
back	json/array.cpp	/^	Array::const_reference Array::back() const {$/;"	f	class:JsonBox::Array
back	json/array.cpp	/^	Array::reference Array::back() {$/;"	f	class:JsonBox::Array
begin	json/array.cpp	/^	Array::const_iterator Array::begin() const {$/;"	f	class:JsonBox::Array
begin	json/array.cpp	/^	Array::iterator Array::begin() {$/;"	f	class:JsonBox::Array
capacity	json/array.cpp	/^	Array::size_type Array::capacity() const {$/;"	f	class:JsonBox::Array
clear	json/array.cpp	/^	void Array::clear() {$/;"	f	class:JsonBox::Array
empty	json/array.cpp	/^	bool Array::empty() const {$/;"	f	class:JsonBox::Array
end	json/array.cpp	/^	Array::const_iterator Array::end() const {$/;"	f	class:JsonBox::Array
end	json/array.cpp	/^	Array::iterator Array::end() {$/;"	f	class:JsonBox::Array
erase	json/array.cpp	/^	Array::iterator Array::erase(iterator first, iterator last) {$/;"	f	class:JsonBox::Array
erase	json/array.cpp	/^	Array::iterator Array::erase(iterator pos) {$/;"	f	class:JsonBox::Array
front	json/array.cpp	/^	Array::const_reference Array::front() const {$/;"	f	class:JsonBox::Array
front	json/array.cpp	/^	Array::reference Array::front() {$/;"	f	class:JsonBox::Array
get_allocator	json/array.cpp	/^	Array::allocator_type Array::get_allocator() const {$/;"	f	class:JsonBox::Array
insert	json/array.cpp	/^	Array::iterator Array::insert(iterator pos, const_reference value) {$/;"	f	class:JsonBox::Array
insert	json/array.cpp	/^	void Array::insert(iterator pos, size_type count, const_reference value) {$/;"	f	class:JsonBox::Array
max_size	json/array.cpp	/^	Array::size_type Array::max_size() const {$/;"	f	class:JsonBox::Array
operator !=	json/array.cpp	/^	bool Array::operator!=(const Array &rhs) const {$/;"	f	class:JsonBox::Array
operator <	json/array.cpp	/^	bool Array::operator<(const Array &rhs) const {$/;"	f	class:JsonBox::Array
operator <<	json/array.cpp	/^	std::ostream &operator<<(std::ostream &output, const Array &a) {$/;"	f	namespace:JsonBox
operator <=	json/array.cpp	/^	bool Array::operator<=(const Array &rhs) const {$/;"	f	class:JsonBox::Array
operator =	json/array.cpp	/^	Array &Array::operator=(const Array &other) {$/;"	f	class:JsonBox::Array
operator ==	json/array.cpp	/^	bool Array::operator==(const Array &rhs) const {$/;"	f	class:JsonBox::Array
operator >	json/array.cpp	/^	bool Array::operator>(const Array &rhs) const {$/;"	f	class:JsonBox::Array
operator >=	json/array.cpp	/^	bool Array::operator>=(const Array &rhs) const {$/;"	f	class:JsonBox::Array
operator []	json/array.cpp	/^	Array::const_reference Array::operator[](size_type pos) const {$/;"	f	class:JsonBox::Array
operator []	json/array.cpp	/^	Array::reference Array::operator[](size_type pos) {$/;"	f	class:JsonBox::Array
pop_back	json/array.cpp	/^	void Array::pop_back() {$/;"	f	class:JsonBox::Array
push_back	json/array.cpp	/^	void Array::push_back(const_reference value) {$/;"	f	class:JsonBox::Array
rbegin	json/array.cpp	/^	Array::const_reverse_iterator Array::rbegin() const {$/;"	f	class:JsonBox::Array
rbegin	json/array.cpp	/^	Array::reverse_iterator Array::rbegin() {$/;"	f	class:JsonBox::Array
rend	json/array.cpp	/^	Array::const_reverse_iterator Array::rend() const {$/;"	f	class:JsonBox::Array
rend	json/array.cpp	/^	Array::reverse_iterator Array::rend() {$/;"	f	class:JsonBox::Array
reserve	json/array.cpp	/^	void Array::reserve(size_type size) {$/;"	f	class:JsonBox::Array
resize	json/array.cpp	/^	void Array::resize(size_type count, const_reference value) {$/;"	f	class:JsonBox::Array
size	json/array.cpp	/^	Array::size_type Array::size() const {$/;"	f	class:JsonBox::Array
swap	json/array.cpp	/^	void Array::swap(Array &other) {$/;"	f	class:JsonBox::Array
Array	json/array.h	/^		Array(InputIterator first, InputIterator last, const allocator_type &alloc = allocator_type()) : data(first, last) {$/;"	f	class:JsonBox::Array
Array	json/array.h	/^	class Array {$/;"	c	namespace:JsonBox
JB_ARRAY_H	json/array.h	2;"	d
JsonBox	json/array.h	/^namespace JsonBox {$/;"	n
allocator_type	json/array.h	/^		typedef container::allocator_type allocator_type;$/;"	t	class:JsonBox::Array
assign	json/array.h	/^		void assign(InputIterator first, InputIterator last) {$/;"	f	class:JsonBox::Array
const_iterator	json/array.h	/^		typedef container::const_iterator const_iterator;$/;"	t	class:JsonBox::Array
const_pointer	json/array.h	/^		typedef container::const_pointer const_pointer;$/;"	t	class:JsonBox::Array
const_reference	json/array.h	/^		typedef container::const_reference const_reference;$/;"	t	class:JsonBox::Array
const_reverse_iterator	json/array.h	/^		typedef container::const_reverse_iterator const_reverse_iterator;$/;"	t	class:JsonBox::Array
container	json/array.h	/^		typedef std::vector<Value> container;$/;"	t	class:JsonBox::Array
data	json/array.h	/^		container data;$/;"	m	class:JsonBox::Array
difference_type	json/array.h	/^		typedef container::difference_type difference_type;$/;"	t	class:JsonBox::Array
insert	json/array.h	/^		void insert(iterator pos, InputIterator first, InputIterator last) {$/;"	f	class:JsonBox::Array
iterator	json/array.h	/^		typedef container::iterator iterator;$/;"	t	class:JsonBox::Array
pointer	json/array.h	/^		typedef container::pointer pointer;$/;"	t	class:JsonBox::Array
reference	json/array.h	/^		typedef container::reference reference;$/;"	t	class:JsonBox::Array
reverse_iterator	json/array.h	/^		typedef container::reverse_iterator reverse_iterator;$/;"	t	class:JsonBox::Array
size_type	json/array.h	/^		typedef container::size_type size_type;$/;"	t	class:JsonBox::Array
value_type	json/array.h	/^		typedef container::value_type value_type;$/;"	t	class:JsonBox::Array
JsonBox	json/convert.cpp	/^namespace JsonBox {$/;"	n	file:
MASK1BYTE	json/convert.cpp	6;"	d	file:
MASK2BYTES	json/convert.cpp	7;"	d	file:
MASK3BYTES	json/convert.cpp	8;"	d	file:
MASK4BYTES	json/convert.cpp	9;"	d	file:
MASK5BYTES	json/convert.cpp	10;"	d	file:
MASK6BYTES	json/convert.cpp	11;"	d	file:
MASKBITS	json/convert.cpp	5;"	d	file:
decodeUTF8	json/convert.cpp	/^	String32 Convert::decodeUTF8(const std::string& utf8String) {$/;"	f	class:JsonBox::Convert
encodeToUTF8	json/convert.cpp	/^	std::string Convert::encodeToUTF8(const String32& utf32String) {$/;"	f	class:JsonBox::Convert
Convert	json/convert.h	/^	class Convert {$/;"	c	namespace:JsonBox
JB_CONVERTER_H	json/convert.h	5;"	d
JsonBox	json/convert.h	/^namespace JsonBox {$/;"	n
String32	json/convert.h	/^	typedef std::basic_string<int32_t> String32;$/;"	t	namespace:JsonBox
Escaper	json/escaper.cpp	/^	Escaper::Escaper() : afterBackSlash(false), inString(false) {$/;"	f	class:JsonBox::Escaper
JsonBox	json/escaper.cpp	/^namespace JsonBox {$/;"	n	file:
operator ()	json/escaper.cpp	/^	std::streambuf::int_type Escaper::operator()(std::streambuf &destination,$/;"	f	class:JsonBox::Escaper
Escaper	json/escaper.h	/^	class Escaper {$/;"	c	namespace:JsonBox
JB_ESCAPER_H	json/escaper.h	2;"	d
JsonBox	json/escaper.h	/^namespace JsonBox {$/;"	n
afterBackSlash	json/escaper.h	/^		bool afterBackSlash;$/;"	m	class:JsonBox::Escaper
inString	json/escaper.h	/^		bool inString;$/;"	m	class:JsonBox::Escaper
BACKSPACE	json/grammar.h	/^				const char BACKSPACE = 'b';$/;"	m	namespace:JsonBox::Strings::Json::Escape
BACKSPACE	json/grammar.h	/^			const char BACKSPACE = '\\b';$/;"	m	namespace:JsonBox::Strings::Std
BACKSPACE	json/grammar.h	/^			const std::string BACKSPACE = "\\\\b";$/;"	m	namespace:JsonBox::Strings::Json
BEGIN_ARRAY	json/grammar.h	/^		const char BEGIN_ARRAY = '[';$/;"	m	namespace:JsonBox::Structural
BEGIN_END_STRING	json/grammar.h	/^		const char BEGIN_END_STRING = '"';$/;"	m	namespace:JsonBox::Structural
BEGIN_ESCAPE	json/grammar.h	/^				const char BEGIN_ESCAPE = '\\\\';$/;"	m	namespace:JsonBox::Strings::Json::Escape
BEGIN_OBJECT	json/grammar.h	/^		const char BEGIN_OBJECT = '{';$/;"	m	namespace:JsonBox::Structural
BEGIN_UNICODE	json/grammar.h	/^				const char BEGIN_UNICODE = 'u';$/;"	m	namespace:JsonBox::Strings::Json::Escape
BEGIN_UNICODE	json/grammar.h	/^			const std::string BEGIN_UNICODE = "\\\\u";$/;"	m	namespace:JsonBox::Strings::Json
CARRIAGE_RETURN	json/grammar.h	/^				const char CARRIAGE_RETURN = 'r';$/;"	m	namespace:JsonBox::Strings::Json::Escape
CARRIAGE_RETURN	json/grammar.h	/^			const char CARRIAGE_RETURN = '\\r';$/;"	m	namespace:JsonBox::Strings::Std
CARRIAGE_RETURN	json/grammar.h	/^			const std::string CARRIAGE_RETURN = "\\\\r";$/;"	m	namespace:JsonBox::Strings::Json
CARRIAGE_RETURN	json/grammar.h	/^		const char CARRIAGE_RETURN = '\\r';$/;"	m	namespace:JsonBox::Whitespace
DECIMAL_POINT	json/grammar.h	/^		const char DECIMAL_POINT = '.';$/;"	m	namespace:JsonBox::Numbers
DIGITS	json/grammar.h	/^		const std::string DIGITS = "0123456789ABCDEFabcdef";$/;"	m	namespace:JsonBox::Numbers
END_ARRAY	json/grammar.h	/^		const char END_ARRAY = ']';$/;"	m	namespace:JsonBox::Structural
END_OBJECT	json/grammar.h	/^		const char END_OBJECT = '}';$/;"	m	namespace:JsonBox::Structural
Escape	json/grammar.h	/^			namespace Escape {$/;"	n	namespace:JsonBox::Strings::Json
FALSE_STRING	json/grammar.h	/^		const std::string FALSE_STRING = "false";$/;"	m	namespace:JsonBox::Literals
FORM_FEED	json/grammar.h	/^				const char FORM_FEED = 'f';$/;"	m	namespace:JsonBox::Strings::Json::Escape
FORM_FEED	json/grammar.h	/^			const char FORM_FEED = '\\f';$/;"	m	namespace:JsonBox::Strings::Std
FORM_FEED	json/grammar.h	/^			const std::string FORM_FEED = "\\\\f";$/;"	m	namespace:JsonBox::Strings::Json
HORIZONTAL_TAB	json/grammar.h	/^		const char HORIZONTAL_TAB = '\\t';$/;"	m	namespace:JsonBox::Whitespace
JB_GRAMMAR_H	json/grammar.h	2;"	d
Json	json/grammar.h	/^		namespace Json {$/;"	n	namespace:JsonBox::Strings
JsonBox	json/grammar.h	/^namespace JsonBox {$/;"	n
LINE_FEED	json/grammar.h	/^				const char LINE_FEED = 'n';$/;"	m	namespace:JsonBox::Strings::Json::Escape
LINE_FEED	json/grammar.h	/^			const char LINE_FEED = '\\n';$/;"	m	namespace:JsonBox::Strings::Std
LINE_FEED	json/grammar.h	/^			const std::string LINE_FEED = "\\\\n";$/;"	m	namespace:JsonBox::Strings::Json
LOWER_EXP	json/grammar.h	/^		const char LOWER_EXP = 'e';$/;"	m	namespace:JsonBox::Numbers
Literals	json/grammar.h	/^	namespace Literals {$/;"	n	namespace:JsonBox
MINUS	json/grammar.h	/^		const char MINUS = '-';$/;"	m	namespace:JsonBox::Numbers
NAME_SEPARATOR	json/grammar.h	/^		const char NAME_SEPARATOR = ':';$/;"	m	namespace:JsonBox::Structural
NEW_LINE	json/grammar.h	/^		const char NEW_LINE = '\\n';$/;"	m	namespace:JsonBox::Whitespace
NULL_STRING	json/grammar.h	/^		const std::string NULL_STRING = "null";$/;"	m	namespace:JsonBox::Literals
Numbers	json/grammar.h	/^	namespace Numbers {$/;"	n	namespace:JsonBox
PLUS	json/grammar.h	/^		const char PLUS = '+';$/;"	m	namespace:JsonBox::Numbers
QUOTATION_MARK	json/grammar.h	/^				const char QUOTATION_MARK = '"';$/;"	m	namespace:JsonBox::Strings::Json::Escape
QUOTATION_MARK	json/grammar.h	/^			const char QUOTATION_MARK = '"';$/;"	m	namespace:JsonBox::Strings::Std
QUOTATION_MARK	json/grammar.h	/^			const std::string QUOTATION_MARK = "\\\\\\"";$/;"	m	namespace:JsonBox::Strings::Json
REVERSE_SOLIDUS	json/grammar.h	/^				const char REVERSE_SOLIDUS = '\\\\';$/;"	m	namespace:JsonBox::Strings::Json::Escape
REVERSE_SOLIDUS	json/grammar.h	/^			const char REVERSE_SOLIDUS = '\\\\';$/;"	m	namespace:JsonBox::Strings::Std
REVERSE_SOLIDUS	json/grammar.h	/^			const std::string REVERSE_SOLIDUS = "\\\\\\\\";$/;"	m	namespace:JsonBox::Strings::Json
SOLIDUS	json/grammar.h	/^				const char SOLIDUS = '\/';$/;"	m	namespace:JsonBox::Strings::Json::Escape
SOLIDUS	json/grammar.h	/^			const char SOLIDUS = '\/';$/;"	m	namespace:JsonBox::Strings::Std
SOLIDUS	json/grammar.h	/^			const std::string SOLIDUS = "\\\\\/";$/;"	m	namespace:JsonBox::Strings::Json
SPACE	json/grammar.h	/^		const char SPACE = ' ';$/;"	m	namespace:JsonBox::Whitespace
Std	json/grammar.h	/^		namespace Std {$/;"	n	namespace:JsonBox::Strings
Strings	json/grammar.h	/^	namespace Strings {$/;"	n	namespace:JsonBox
Structural	json/grammar.h	/^	namespace Structural {$/;"	n	namespace:JsonBox
TAB	json/grammar.h	/^				const char TAB = 't';$/;"	m	namespace:JsonBox::Strings::Json::Escape
TAB	json/grammar.h	/^			const char TAB = '\\t';$/;"	m	namespace:JsonBox::Strings::Std
TAB	json/grammar.h	/^			const std::string TAB = "\\\\t";$/;"	m	namespace:JsonBox::Strings::Json
TRUE_STRING	json/grammar.h	/^		const std::string TRUE_STRING = "true";$/;"	m	namespace:JsonBox::Literals
UPPER_EXP	json/grammar.h	/^		const char UPPER_EXP = 'E';$/;"	m	namespace:JsonBox::Numbers
VALUE_SEPARATOR	json/grammar.h	/^		const char VALUE_SEPARATOR = ',';$/;"	m	namespace:JsonBox::Structural
Whitespace	json/grammar.h	/^	namespace Whitespace {$/;"	n	namespace:JsonBox
IndentCanceller	json/indent_canceller.cpp	/^	IndentCanceller::IndentCanceller() : afterBackSlash(false), inString(false) {$/;"	f	class:JsonBox::IndentCanceller
JsonBox	json/indent_canceller.cpp	/^namespace JsonBox {$/;"	n	file:
operator ()	json/indent_canceller.cpp	/^	std::streambuf::int_type IndentCanceller::operator()(std::streambuf &destination,$/;"	f	class:JsonBox::IndentCanceller
IndentCanceller	json/indent_canceller.h	/^	class IndentCanceller {$/;"	c	namespace:JsonBox
JB_INDENT_CANCELLER_H	json/indent_canceller.h	2;"	d
JsonBox	json/indent_canceller.h	/^namespace JsonBox {$/;"	n
afterBackSlash	json/indent_canceller.h	/^		bool afterBackSlash;$/;"	m	class:JsonBox::IndentCanceller
inString	json/indent_canceller.h	/^		bool inString;$/;"	m	class:JsonBox::IndentCanceller
Indenter	json/indenter.cpp	/^	Indenter::Indenter() : atStartOfLine(true) {$/;"	f	class:JsonBox::Indenter
JsonBox	json/indenter.cpp	/^namespace JsonBox {$/;"	n	file:
operator ()	json/indenter.cpp	/^	std::streambuf::int_type Indenter::operator()(std::streambuf &destination,$/;"	f	class:JsonBox::Indenter
Indenter	json/indenter.h	/^	class Indenter {$/;"	c	namespace:JsonBox
JB_INDENTER_H	json/indenter.h	2;"	d
JsonBox	json/indenter.h	/^namespace JsonBox {$/;"	n
atStartOfLine	json/indenter.h	/^		bool atStartOfLine;$/;"	m	class:JsonBox::Indenter
JB_JSON_BOX_H	json/json_box.h	2;"	d
JsonBox	json/object.cpp	/^namespace JsonBox {$/;"	n	file:
Object	json/object.cpp	/^	Object::Object(const Object &other) : data(other.data) {$/;"	f	class:JsonBox::Object
Object	json/object.cpp	/^	Object::Object(const key_compare &comp, const allocator_type &alloc) : data(comp, alloc) {$/;"	f	class:JsonBox::Object
begin	json/object.cpp	/^	Object::const_iterator Object::begin() const {$/;"	f	class:JsonBox::Object
begin	json/object.cpp	/^	Object::iterator Object::begin() {$/;"	f	class:JsonBox::Object
clear	json/object.cpp	/^	void Object::clear() {$/;"	f	class:JsonBox::Object
count	json/object.cpp	/^	Object::size_type Object::count(const key_type &key) const {$/;"	f	class:JsonBox::Object
empty	json/object.cpp	/^	bool Object::empty() const {$/;"	f	class:JsonBox::Object
end	json/object.cpp	/^	Object::const_iterator Object::end() const {$/;"	f	class:JsonBox::Object
end	json/object.cpp	/^	Object::iterator Object::end() {$/;"	f	class:JsonBox::Object
equal_range	json/object.cpp	/^	std::pair<Object::const_iterator, Object::const_iterator> Object::equal_range(const key_type &key) const {$/;"	f	class:JsonBox::Object
equal_range	json/object.cpp	/^	std::pair<Object::iterator, Object::iterator> Object::equal_range(const key_type &key) {$/;"	f	class:JsonBox::Object
erase	json/object.cpp	/^	Object::size_type Object::erase(const key_type &key) {$/;"	f	class:JsonBox::Object
erase	json/object.cpp	/^	void Object::erase(iterator first, iterator last) {$/;"	f	class:JsonBox::Object
erase	json/object.cpp	/^	void Object::erase(iterator position) {$/;"	f	class:JsonBox::Object
find	json/object.cpp	/^	Object::const_iterator Object::find(const key_type &key) const {$/;"	f	class:JsonBox::Object
find	json/object.cpp	/^	Object::iterator Object::find(const key_type &key) {$/;"	f	class:JsonBox::Object
get_allocator	json/object.cpp	/^	Object::allocator_type Object::get_allocator() const {$/;"	f	class:JsonBox::Object
insert	json/object.cpp	/^	Object::iterator Object::insert(iterator hint, const_reference value) {$/;"	f	class:JsonBox::Object
insert	json/object.cpp	/^	std::pair<Object::iterator, bool> Object::insert(const_reference value) {$/;"	f	class:JsonBox::Object
key_comp	json/object.cpp	/^	Object::key_compare Object::key_comp() const {$/;"	f	class:JsonBox::Object
lower_bound	json/object.cpp	/^	Object::const_iterator Object::lower_bound(const key_type &key) const {$/;"	f	class:JsonBox::Object
lower_bound	json/object.cpp	/^	Object::iterator Object::lower_bound(const key_type &key) {$/;"	f	class:JsonBox::Object
max_size	json/object.cpp	/^	Object::size_type Object::max_size() const {$/;"	f	class:JsonBox::Object
operator !=	json/object.cpp	/^	bool Object::operator!=(const Object &rhs) const {$/;"	f	class:JsonBox::Object
operator <	json/object.cpp	/^	bool Object::operator<(const Object &rhs) const {$/;"	f	class:JsonBox::Object
operator <<	json/object.cpp	/^	std::ostream &operator<<(std::ostream &output, const Object &o) {$/;"	f	namespace:JsonBox
operator <=	json/object.cpp	/^	bool Object::operator<=(const Object &rhs) const {$/;"	f	class:JsonBox::Object
operator =	json/object.cpp	/^	Object &Object::operator=(const Object &other) {$/;"	f	class:JsonBox::Object
operator ==	json/object.cpp	/^	bool Object::operator==(const Object &rhs) const {$/;"	f	class:JsonBox::Object
operator >	json/object.cpp	/^	bool Object::operator>(const Object &rhs) const {$/;"	f	class:JsonBox::Object
operator >=	json/object.cpp	/^	bool Object::operator>=(const Object &rhs) const {$/;"	f	class:JsonBox::Object
operator []	json/object.cpp	/^	Object::mapped_type &Object::operator[](const key_type &key) {$/;"	f	class:JsonBox::Object
rbegin	json/object.cpp	/^	Object::const_reverse_iterator Object::rbegin() const {$/;"	f	class:JsonBox::Object
rbegin	json/object.cpp	/^	Object::reverse_iterator Object::rbegin() {$/;"	f	class:JsonBox::Object
rend	json/object.cpp	/^	Object::const_reverse_iterator Object::rend() const {$/;"	f	class:JsonBox::Object
rend	json/object.cpp	/^	Object::reverse_iterator Object::rend() {$/;"	f	class:JsonBox::Object
size	json/object.cpp	/^	Object::size_type Object::size() const {$/;"	f	class:JsonBox::Object
swap	json/object.cpp	/^	void Object::swap(Object &other) {$/;"	f	class:JsonBox::Object
upper_bound	json/object.cpp	/^	Object::const_iterator Object::upper_bound(const key_type &key) const {$/;"	f	class:JsonBox::Object
upper_bound	json/object.cpp	/^	Object::iterator Object::upper_bound(const key_type &key) {$/;"	f	class:JsonBox::Object
JB_OBJECT_H	json/object.h	2;"	d
JsonBox	json/object.h	/^namespace JsonBox {$/;"	n
Object	json/object.h	/^		explicit Object(InputIterator first, InputIterator last, const key_compare &comp = key_compare(), const allocator_type &alloc = allocator_type()) : data(first, last, comp, alloc) {$/;"	f	class:JsonBox::Object
Object	json/object.h	/^	class Object {$/;"	c	namespace:JsonBox
allocator_type	json/object.h	/^		typedef container::allocator_type allocator_type;$/;"	t	class:JsonBox::Object
const_iterator	json/object.h	/^		typedef container::const_iterator const_iterator;$/;"	t	class:JsonBox::Object
const_pointer	json/object.h	/^		typedef container::const_pointer const_pointer;$/;"	t	class:JsonBox::Object
const_reference	json/object.h	/^		typedef container::const_reference const_reference;$/;"	t	class:JsonBox::Object
const_reverse_iterator	json/object.h	/^		typedef container::const_reverse_iterator const_reverse_iterator;$/;"	t	class:JsonBox::Object
container	json/object.h	/^		typedef std::map<std::string, Value> container;$/;"	t	class:JsonBox::Object
data	json/object.h	/^		container data;$/;"	m	class:JsonBox::Object
difference_type	json/object.h	/^		typedef container::difference_type difference_type;$/;"	t	class:JsonBox::Object
insert	json/object.h	/^		void insert(InputIterator first, InputIterator last) {$/;"	f	class:JsonBox::Object
iterator	json/object.h	/^		typedef container::iterator iterator;$/;"	t	class:JsonBox::Object
key_compare	json/object.h	/^		typedef container::key_compare key_compare;$/;"	t	class:JsonBox::Object
key_type	json/object.h	/^		typedef container::key_type key_type;$/;"	t	class:JsonBox::Object
mapped_type	json/object.h	/^		typedef container::mapped_type mapped_type;$/;"	t	class:JsonBox::Object
pointer	json/object.h	/^		typedef container::pointer pointer;$/;"	t	class:JsonBox::Object
reference	json/object.h	/^		typedef container::reference reference;$/;"	t	class:JsonBox::Object
reverse_iterator	json/object.h	/^		typedef container::reverse_iterator reverse_iterator;$/;"	t	class:JsonBox::Object
size_type	json/object.h	/^		typedef container::size_type size_type;$/;"	t	class:JsonBox::Object
value_type	json/object.h	/^		typedef container::value_type value_type;$/;"	t	class:JsonBox::Object
JB_OUTPUT_FILTER_H	json/output_filter.h	2;"	d
JsonBox	json/output_filter.h	/^namespace JsonBox {$/;"	n
OutputFilter	json/output_filter.h	/^		OutputFilter(std::streambuf *newDestination, Inserter newInserter,$/;"	f	class:JsonBox::OutputFilter
OutputFilter	json/output_filter.h	/^		OutputFilter(std::streambuf *newDestination,$/;"	f	class:JsonBox::OutputFilter
OutputFilter	json/output_filter.h	/^	class OutputFilter : public std::streambuf {$/;"	c	namespace:JsonBox
deleteWhenFinished	json/output_filter.h	/^		bool deleteWhenFinished;$/;"	m	class:JsonBox::OutputFilter
destination	json/output_filter.h	/^		std::streambuf *destination;$/;"	m	class:JsonBox::OutputFilter
getDestination	json/output_filter.h	/^		std::streambuf *getDestination() const {$/;"	f	class:JsonBox::OutputFilter
getInserter	json/output_filter.h	/^		Inserter &getInserter() {$/;"	f	class:JsonBox::OutputFilter
inserter	json/output_filter.h	/^		Inserter inserter;$/;"	m	class:JsonBox::OutputFilter
overflow	json/output_filter.h	/^		virtual int_type overflow(int_type ch) {$/;"	f	class:JsonBox::OutputFilter
setbuf	json/output_filter.h	/^		virtual std::streambuf *setbuf(char *p, int len) {$/;"	f	class:JsonBox::OutputFilter
sync	json/output_filter.h	/^		virtual int_type sync() {$/;"	f	class:JsonBox::OutputFilter
underflow	json/output_filter.h	/^		virtual int_type underflow() {$/;"	f	class:JsonBox::OutputFilter
~OutputFilter	json/output_filter.h	/^		virtual ~OutputFilter() {$/;"	f	class:JsonBox::OutputFilter
JsonBox	json/solidus_escaper.cpp	/^namespace JsonBox {$/;"	n	file:
SolidusEscaper	json/solidus_escaper.cpp	/^	SolidusEscaper::SolidusEscaper() : afterBackSlash(false), inString(false) {$/;"	f	class:JsonBox::SolidusEscaper
operator ()	json/solidus_escaper.cpp	/^	std::streambuf::int_type SolidusEscaper::operator()(std::streambuf &destination,$/;"	f	class:JsonBox::SolidusEscaper
JB_SOLIDUS_ESCAPER_H	json/solidus_escaper.h	2;"	d
JsonBox	json/solidus_escaper.h	/^namespace JsonBox {$/;"	n
SolidusEscaper	json/solidus_escaper.h	/^	class SolidusEscaper {$/;"	c	namespace:JsonBox
afterBackSlash	json/solidus_escaper.h	/^		bool afterBackSlash;$/;"	m	class:JsonBox::SolidusEscaper
inString	json/solidus_escaper.h	/^		bool inString;$/;"	m	class:JsonBox::SolidusEscaper
EMPTY_ARRAY	json/value.cpp	/^	const Array Value::EMPTY_ARRAY = Array();$/;"	m	class:JsonBox::Value	file:
EMPTY_DOUBLE	json/value.cpp	/^	const double Value::EMPTY_DOUBLE = 0.0;$/;"	m	class:JsonBox::Value	file:
EMPTY_OBJECT	json/value.cpp	/^	const Object Value::EMPTY_OBJECT = Object();$/;"	m	class:JsonBox::Value	file:
EMPTY_STRING	json/value.cpp	/^	const std::string Value::EMPTY_STRING = std::string();$/;"	m	class:JsonBox::Value	file:
JsonBox	json/value.cpp	/^namespace JsonBox {$/;"	n	file:
Value	json/value.cpp	/^	Value::Value() : type(NULL_VALUE), data() {$/;"	f	class:JsonBox::Value
Value	json/value.cpp	/^	Value::Value(bool newBoolean) : type(BOOLEAN), data(new bool(newBoolean)) {$/;"	f	class:JsonBox::Value
Value	json/value.cpp	/^	Value::Value(const Array &newArray) : type(ARRAY),$/;"	f	class:JsonBox::Value
Value	json/value.cpp	/^	Value::Value(const Object &newObject) : type(OBJECT),$/;"	f	class:JsonBox::Value
Value	json/value.cpp	/^	Value::Value(const Value &src) : type(src.type), data() {$/;"	f	class:JsonBox::Value
Value	json/value.cpp	/^	Value::Value(const char *newCString) : type(STRING),$/;"	f	class:JsonBox::Value
Value	json/value.cpp	/^	Value::Value(const std::string &newString) : type(STRING),$/;"	f	class:JsonBox::Value
Value	json/value.cpp	/^	Value::Value(double newDouble) : type(DOUBLE), data(new double(newDouble)) {$/;"	f	class:JsonBox::Value
Value	json/value.cpp	/^	Value::Value(int newInt) : type(INTEGER), data(new int(newInt)) {$/;"	f	class:JsonBox::Value
Value	json/value.cpp	/^	Value::Value(std::istream &input) : type(NULL_VALUE), data() {$/;"	f	class:JsonBox::Value
ValueDataPointer	json/value.cpp	/^	Value::ValueDataPointer::ValueDataPointer(): stringValue(NULL) {$/;"	f	class:JsonBox::Value::ValueDataPointer
ValueDataPointer	json/value.cpp	/^	Value::ValueDataPointer::ValueDataPointer(Array *newArrayValue) :$/;"	f	class:JsonBox::Value::ValueDataPointer
ValueDataPointer	json/value.cpp	/^	Value::ValueDataPointer::ValueDataPointer(Object *newObjectValue) :$/;"	f	class:JsonBox::Value::ValueDataPointer
ValueDataPointer	json/value.cpp	/^	Value::ValueDataPointer::ValueDataPointer(bool *newBoolValue) :$/;"	f	class:JsonBox::Value::ValueDataPointer
ValueDataPointer	json/value.cpp	/^	Value::ValueDataPointer::ValueDataPointer(double *newDoubleValue) :$/;"	f	class:JsonBox::Value::ValueDataPointer
ValueDataPointer	json/value.cpp	/^	Value::ValueDataPointer::ValueDataPointer(int *newIntValue) :$/;"	f	class:JsonBox::Value::ValueDataPointer
ValueDataPointer	json/value.cpp	/^	Value::ValueDataPointer::ValueDataPointer(std::string *newStringValue) :$/;"	f	class:JsonBox::Value::ValueDataPointer
clear	json/value.cpp	/^	void Value::clear() {$/;"	f	class:JsonBox::Value
escapeAllCharacters	json/value.cpp	/^	std::string Value::escapeAllCharacters(const std::string &str) {$/;"	f	class:JsonBox::Value
escapeMinimumCharacters	json/value.cpp	/^	std::string Value::escapeMinimumCharacters(const std::string &str) {$/;"	f	class:JsonBox::Value
escapeToUnicode	json/value.cpp	/^	const std::string Value::escapeToUnicode(char charToEscape) {$/;"	f	class:JsonBox::Value
getArray	json/value.cpp	/^	const Array &Value::getArray() const {$/;"	f	class:JsonBox::Value
getBoolean	json/value.cpp	/^	bool Value::getBoolean() const {$/;"	f	class:JsonBox::Value
getDouble	json/value.cpp	/^	double Value::getDouble() const {$/;"	f	class:JsonBox::Value
getInt	json/value.cpp	/^	int Value::getInt() const {$/;"	f	class:JsonBox::Value
getObject	json/value.cpp	/^	const Object &Value::getObject() const {$/;"	f	class:JsonBox::Value
getString	json/value.cpp	/^	const std::string &Value::getString() const {$/;"	f	class:JsonBox::Value
getType	json/value.cpp	/^	Value::Type Value::getType() const {$/;"	f	class:JsonBox::Value
isArray	json/value.cpp	/^	bool Value::isArray() const {$/;"	f	class:JsonBox::Value
isBoolean	json/value.cpp	/^	bool Value::isBoolean() const {$/;"	f	class:JsonBox::Value
isDouble	json/value.cpp	/^	bool Value::isDouble() const {$/;"	f	class:JsonBox::Value
isHexDigit	json/value.cpp	/^	bool Value::isHexDigit(char digit) {$/;"	f	class:JsonBox::Value
isInteger	json/value.cpp	/^	bool Value::isInteger() const {$/;"	f	class:JsonBox::Value
isNull	json/value.cpp	/^	bool Value::isNull() const {$/;"	f	class:JsonBox::Value
isObject	json/value.cpp	/^	bool Value::isObject() const {$/;"	f	class:JsonBox::Value
isString	json/value.cpp	/^	bool Value::isString() const {$/;"	f	class:JsonBox::Value
isWhiteSpace	json/value.cpp	/^	bool Value::isWhiteSpace(char whiteSpace) {$/;"	f	class:JsonBox::Value
loadFromFile	json/value.cpp	/^	void Value::loadFromFile(const std::string &filePath) {$/;"	f	class:JsonBox::Value
loadFromStream	json/value.cpp	/^	void Value::loadFromStream(std::istream &input) {$/;"	f	class:JsonBox::Value
loadFromString	json/value.cpp	/^	void Value::loadFromString(std::string const &json) {$/;"	f	class:JsonBox::Value
operator !=	json/value.cpp	/^	bool Value::operator!=(const Value &rhs) const {$/;"	f	class:JsonBox::Value
operator <	json/value.cpp	/^	bool Value::operator<(const Value &rhs) const {$/;"	f	class:JsonBox::Value
operator <<	json/value.cpp	/^	std::ostream &operator<<(std::ostream &output, const Value &v) {$/;"	f	namespace:JsonBox
operator <=	json/value.cpp	/^	bool Value::operator<=(const Value &rhs) const {$/;"	f	class:JsonBox::Value
operator =	json/value.cpp	/^	Value &Value::operator=(const Value &src) {$/;"	f	class:JsonBox::Value
operator ==	json/value.cpp	/^	bool Value::operator==(const Value &rhs) const {$/;"	f	class:JsonBox::Value
operator >	json/value.cpp	/^	bool Value::operator>(const Value &rhs) const {$/;"	f	class:JsonBox::Value
operator >=	json/value.cpp	/^	bool Value::operator>=(const Value &rhs) const {$/;"	f	class:JsonBox::Value
operator []	json/value.cpp	/^	Value &Value::operator[](Array::size_type index) {$/;"	f	class:JsonBox::Value
operator []	json/value.cpp	/^	Value &Value::operator[](const Object::key_type &key) {$/;"	f	class:JsonBox::Value
operator []	json/value.cpp	/^	Value &Value::operator[](const char *key) {$/;"	f	class:JsonBox::Value
output	json/value.cpp	/^	void Value::output(std::ostream &output, bool indent,$/;"	f	class:JsonBox::Value
readArray	json/value.cpp	/^	void Value::readArray(std::istream &input, Array &result) {$/;"	f	class:JsonBox::Value
readNumber	json/value.cpp	/^	void Value::readNumber(std::istream &input, JsonBox::Value &result) {$/;"	f	class:JsonBox::Value
readObject	json/value.cpp	/^	void Value::readObject(std::istream &input, Object &result) {$/;"	f	class:JsonBox::Value
readString	json/value.cpp	/^	void Value::readString(std::istream &input, std::string &result) {$/;"	f	class:JsonBox::Value
readToNonWhiteSpace	json/value.cpp	/^	void Value::readToNonWhiteSpace(std::istream &input, char &currentCharacter) {$/;"	f	class:JsonBox::Value
setArray	json/value.cpp	/^	void Value::setArray(const Array &newArray) {$/;"	f	class:JsonBox::Value
setBoolean	json/value.cpp	/^	void Value::setBoolean(bool newBoolean) {$/;"	f	class:JsonBox::Value
setDouble	json/value.cpp	/^	void Value::setDouble(double newDouble) {$/;"	f	class:JsonBox::Value
setInt	json/value.cpp	/^	void Value::setInt(int newInt) {$/;"	f	class:JsonBox::Value
setNull	json/value.cpp	/^	void Value::setNull() {$/;"	f	class:JsonBox::Value
setObject	json/value.cpp	/^	void Value::setObject(const Object &newObject) {$/;"	f	class:JsonBox::Value
setString	json/value.cpp	/^	void Value::setString(std::string const &newString) {$/;"	f	class:JsonBox::Value
writeToFile	json/value.cpp	/^	void Value::writeToFile(const std::string &filePath, bool indent,$/;"	f	class:JsonBox::Value
writeToStream	json/value.cpp	/^	void Value::writeToStream(std::ostream &output, bool indent,$/;"	f	class:JsonBox::Value
~Value	json/value.cpp	/^	Value::~Value() {$/;"	f	class:JsonBox::Value
ARRAY	json/value.h	/^		    ARRAY,$/;"	e	enum:JsonBox::Value::Type
BOOLEAN	json/value.h	/^		    BOOLEAN,$/;"	e	enum:JsonBox::Value::Type
DOUBLE	json/value.h	/^		    DOUBLE,$/;"	e	enum:JsonBox::Value::Type
EMPTY_ARRAY	json/value.h	/^		static const Array EMPTY_ARRAY;$/;"	m	class:JsonBox::Value
EMPTY_BOOL	json/value.h	/^		static const bool EMPTY_BOOL = false;$/;"	m	class:JsonBox::Value
EMPTY_DOUBLE	json/value.h	/^		static const double EMPTY_DOUBLE;$/;"	m	class:JsonBox::Value
EMPTY_INT	json/value.h	/^		static const int EMPTY_INT = 0;$/;"	m	class:JsonBox::Value
EMPTY_OBJECT	json/value.h	/^		static const Object EMPTY_OBJECT;$/;"	m	class:JsonBox::Value
EMPTY_STRING	json/value.h	/^		static const std::string EMPTY_STRING;$/;"	m	class:JsonBox::Value
INTEGER	json/value.h	/^		    INTEGER,$/;"	e	enum:JsonBox::Value::Type
JB_VALUE_H	json/value.h	5;"	d
JsonBox	json/value.h	/^namespace JsonBox {$/;"	n
NULL_VALUE	json/value.h	/^			NULL_VALUE,$/;"	e	enum:JsonBox::Value::Type
OBJECT	json/value.h	/^		    OBJECT,$/;"	e	enum:JsonBox::Value::Type
STRING	json/value.h	/^		    STRING,$/;"	e	enum:JsonBox::Value::Type
Type	json/value.h	/^		enum Type {$/;"	g	class:JsonBox::Value
UNKNOWN	json/value.h	/^			UNKNOWN$/;"	e	enum:JsonBox::Value::Type
Value	json/value.h	/^	class Value {$/;"	c	namespace:JsonBox
ValueDataPointer	json/value.h	/^		union ValueDataPointer {$/;"	u	class:JsonBox::Value
arrayValue	json/value.h	/^			Array *arrayValue;$/;"	m	union:JsonBox::Value::ValueDataPointer
boolValue	json/value.h	/^			bool *boolValue;$/;"	m	union:JsonBox::Value::ValueDataPointer
data	json/value.h	/^		ValueDataPointer data;$/;"	m	class:JsonBox::Value
doubleValue	json/value.h	/^			double *doubleValue;$/;"	m	union:JsonBox::Value::ValueDataPointer
intValue	json/value.h	/^			int *intValue;$/;"	m	union:JsonBox::Value::ValueDataPointer
objectValue	json/value.h	/^			Object *objectValue;$/;"	m	union:JsonBox::Value::ValueDataPointer
stringValue	json/value.h	/^			std::string *stringValue;$/;"	m	union:JsonBox::Value::ValueDataPointer
type	json/value.h	/^		Type type;$/;"	m	class:JsonBox::Value
Matrix	matrix.h	/^    Matrix() : nrow(0), ncol(0) {$/;"	f	class:Matrix
Matrix	matrix.h	/^    Matrix(size_t nr, size_t nc) : nrow(nr), ncol(nc) {$/;"	f	class:Matrix
Matrix	matrix.h	/^class Matrix {$/;"	c
allocate	matrix.h	/^    void allocate(size_t nr, size_t nc) {$/;"	f	class:Matrix
fill	matrix.h	/^    void fill(T val) {$/;"	f	class:Matrix
fill_from_json	matrix.h	/^    void fill_from_json(JsonBox::Array a) {$/;"	f	class:Matrix
getElement	matrix.h	/^    T getElement(size_t i, size_t j) const {$/;"	f	class:Matrix
ncol	matrix.h	/^    size_t ncol;$/;"	m	class:Matrix
nrow	matrix.h	/^    size_t nrow;$/;"	m	class:Matrix
operator <<	matrix.h	/^    friend std::ostream& operator<<(std::ostream& str, Matrix<T> const& data) {$/;"	f	class:Matrix
setElement	matrix.h	/^    void setElement(size_t i, size_t j, T val) {$/;"	f	class:Matrix
vals	matrix.h	/^    T *vals;$/;"	m	class:Matrix
~Matrix	matrix.h	/^    ~Matrix() {$/;"	f	class:Matrix
Arg	optionparser/opt.h	/^struct Arg: public option::Arg$/;"	s
NonEmpty	optionparser/opt.h	/^  static option::ArgStatus NonEmpty(const option::Option& option, bool msg)$/;"	f	struct:Arg
Numeric	optionparser/opt.h	/^  static option::ArgStatus Numeric(const option::Option& option, bool msg)$/;"	f	struct:Arg
Required	optionparser/opt.h	/^  static option::ArgStatus Required(const option::Option& option, bool msg)$/;"	f	struct:Arg
Unknown	optionparser/opt.h	/^  static option::ArgStatus Unknown(const option::Option& option, bool msg)$/;"	f	struct:Arg
printError	optionparser/opt.h	/^  static void printError(const char* msg1, const option::Option& opt, const char* msg2)$/;"	f	struct:Arg
ARG_IGNORE	optionparser/optionparser.h	/^  ARG_IGNORE,$/;"	e	enum:option::ArgStatus
ARG_ILLEGAL	optionparser/optionparser.h	/^  ARG_ILLEGAL$/;"	e	enum:option::ArgStatus
ARG_NONE	optionparser/optionparser.h	/^  ARG_NONE,$/;"	e	enum:option::ArgStatus
ARG_OK	optionparser/optionparser.h	/^  ARG_OK,$/;"	e	enum:option::ArgStatus
Action	optionparser/optionparser.h	/^struct Parser::Action$/;"	s	class:option::Parser
Arg	optionparser/optionparser.h	/^struct Arg$/;"	s	namespace:option
ArgStatus	optionparser/optionparser.h	/^enum ArgStatus$/;"	g	namespace:option
CheckArg	optionparser/optionparser.h	/^typedef ArgStatus (*CheckArg)(const Option& option, bool msg);$/;"	t	namespace:option
CountOptionsAction	optionparser/optionparser.h	/^  CountOptionsAction(unsigned* buffer_max_) :$/;"	f	class:option::Stats::CountOptionsAction
CountOptionsAction	optionparser/optionparser.h	/^class Stats::CountOptionsAction: public Parser::Action$/;"	c	class:option::Stats
Descriptor	optionparser/optionparser.h	/^struct Descriptor$/;"	s	namespace:option
FunctionWriter	optionparser/optionparser.h	/^    FunctionWriter(Function* w) :$/;"	f	struct:option::PrintUsageImplementation::FunctionWriter
FunctionWriter	optionparser/optionparser.h	/^  struct FunctionWriter: public IStringWriter$/;"	s	struct:option::PrintUsageImplementation
IStringWriter	optionparser/optionparser.h	/^  struct IStringWriter$/;"	s	struct:option::PrintUsageImplementation
LinePartIterator	optionparser/optionparser.h	/^    LinePartIterator(const Descriptor usage[]) :$/;"	f	class:option::PrintUsageImplementation::LinePartIterator
LinePartIterator	optionparser/optionparser.h	/^  class LinePartIterator$/;"	c	struct:option::PrintUsageImplementation
LineWrapper	optionparser/optionparser.h	/^    LineWrapper(int x1, int x2) :$/;"	f	class:option::PrintUsageImplementation::LineWrapper
LineWrapper	optionparser/optionparser.h	/^  class LineWrapper$/;"	c	struct:option::PrintUsageImplementation
MSC_Builtin_CLZ	optionparser/optionparser.h	/^struct MSC_Builtin_CLZ$/;"	s	namespace:option
None	optionparser/optionparser.h	/^  static ArgStatus None(const Option&, bool)$/;"	f	struct:option::Arg
OPTIONPARSER_H_	optionparser/optionparser.h	215;"	d
OStreamWriter	optionparser/optionparser.h	/^    OStreamWriter(OStream& o) :$/;"	f	struct:option::PrintUsageImplementation::OStreamWriter
OStreamWriter	optionparser/optionparser.h	/^  struct OStreamWriter: public IStringWriter$/;"	s	struct:option::PrintUsageImplementation
Option	optionparser/optionparser.h	/^  Option() :$/;"	f	class:option::Option
Option	optionparser/optionparser.h	/^  Option(const Descriptor* desc_, const char* name_, const char* arg_)$/;"	f	class:option::Option
Option	optionparser/optionparser.h	/^  Option(const Option& orig)$/;"	f	class:option::Option
Option	optionparser/optionparser.h	/^class Option$/;"	c	namespace:option
Optional	optionparser/optionparser.h	/^  static ArgStatus Optional(const Option& option, bool)$/;"	f	struct:option::Arg
Parser	optionparser/optionparser.h	/^  Parser() :$/;"	f	class:option::Parser
Parser	optionparser/optionparser.h	/^  Parser(bool gnu, const Descriptor usage[], int argc, char** argv, Option options[], Option buffer[],$/;"	f	class:option::Parser
Parser	optionparser/optionparser.h	/^  Parser(bool gnu, const Descriptor usage[], int argc, const char** argv, Option options[], Option buffer[],$/;"	f	class:option::Parser
Parser	optionparser/optionparser.h	/^  Parser(const Descriptor usage[], int argc, char** argv, Option options[], Option buffer[], int min_abbr_len = 0,$/;"	f	class:option::Parser
Parser	optionparser/optionparser.h	/^  Parser(const Descriptor usage[], int argc, const char** argv, Option options[], Option buffer[], int min_abbr_len = 0,$/;"	f	class:option::Parser
Parser	optionparser/optionparser.h	/^class Parser$/;"	c	namespace:option
PrintUsageImplementation	optionparser/optionparser.h	/^struct PrintUsageImplementation$/;"	s	namespace:option
Stats	optionparser/optionparser.h	/^  Stats() :$/;"	f	struct:option::Stats
Stats	optionparser/optionparser.h	/^  Stats(bool gnu, const Descriptor usage[], int argc, char** argv, int min_abbr_len = 0, \/\/$/;"	f	struct:option::Stats
Stats	optionparser/optionparser.h	/^  Stats(bool gnu, const Descriptor usage[], int argc, const char** argv, int min_abbr_len = 0, \/\/$/;"	f	struct:option::Stats
Stats	optionparser/optionparser.h	/^  Stats(const Descriptor usage[], int argc, char** argv, int min_abbr_len = 0, \/\/$/;"	f	struct:option::Stats
Stats	optionparser/optionparser.h	/^  Stats(const Descriptor usage[], int argc, const char** argv, int min_abbr_len = 0, \/\/$/;"	f	struct:option::Stats
Stats	optionparser/optionparser.h	/^struct Stats$/;"	s	namespace:option
StoreOptionAction	optionparser/optionparser.h	/^  StoreOptionAction(Parser& parser_, Option options_[], Option buffer_[], int bufmax_) :$/;"	f	class:option::Parser::StoreOptionAction
StoreOptionAction	optionparser/optionparser.h	/^class Parser::StoreOptionAction: public Parser::Action$/;"	c	class:option::Parser
StreamWriter	optionparser/optionparser.h	/^    StreamWriter(Function* w, Stream* s) :$/;"	f	struct:option::PrintUsageImplementation::StreamWriter
StreamWriter	optionparser/optionparser.h	/^  struct StreamWriter: public IStringWriter$/;"	s	struct:option::PrintUsageImplementation
SyscallWriter	optionparser/optionparser.h	/^    SyscallWriter(Syscall* w, int f) :$/;"	f	struct:option::PrintUsageImplementation::SyscallWriter
SyscallWriter	optionparser/optionparser.h	/^  struct SyscallWriter: public IStringWriter$/;"	s	struct:option::PrintUsageImplementation
TemporaryWriter	optionparser/optionparser.h	/^    TemporaryWriter(const Temporary& u) :$/;"	f	struct:option::PrintUsageImplementation::TemporaryWriter
TemporaryWriter	optionparser/optionparser.h	/^  struct TemporaryWriter: public IStringWriter$/;"	s	struct:option::PrintUsageImplementation
__builtin_clz	optionparser/optionparser.h	233;"	d
add	optionparser/optionparser.h	/^  void add(bool gnu, const Descriptor usage[], int argc, char** argv, int min_abbr_len = 0, \/\/$/;"	f	struct:option::Stats
add	optionparser/optionparser.h	/^  void add(const Descriptor usage[], int argc, char** argv, int min_abbr_len = 0, \/\/$/;"	f	struct:option::Stats
add	optionparser/optionparser.h	/^  void add(const Descriptor usage[], int argc, const char** argv, int min_abbr_len = 0, \/\/$/;"	f	struct:option::Stats
add	optionparser/optionparser.h	/^inline void Stats::add(bool gnu, const Descriptor usage[], int argc, const char** argv, int min_abbr_len,$/;"	f	class:option::Stats
append	optionparser/optionparser.h	/^  void append(Option* new_last)$/;"	f	class:option::Option
arg	optionparser/optionparser.h	/^  const char* arg;$/;"	m	class:option::Option
buf_empty	optionparser/optionparser.h	/^    bool buf_empty()$/;"	f	class:option::PrintUsageImplementation::LineWrapper
buf_full	optionparser/optionparser.h	/^    bool buf_full()$/;"	f	class:option::PrintUsageImplementation::LineWrapper
buf_next	optionparser/optionparser.h	/^    void buf_next()$/;"	f	class:option::PrintUsageImplementation::LineWrapper
buf_store	optionparser/optionparser.h	/^    void buf_store(const char* data, int len)$/;"	f	class:option::PrintUsageImplementation::LineWrapper
buffer	optionparser/optionparser.h	/^  Option* buffer;$/;"	m	class:option::Parser::StoreOptionAction
buffer_max	optionparser/optionparser.h	/^  unsigned buffer_max;$/;"	m	struct:option::Stats
buffer_max	optionparser/optionparser.h	/^  unsigned* buffer_max;$/;"	m	class:option::Stats::CountOptionsAction
bufmask	optionparser/optionparser.h	/^    static const int bufmask = 15; \/\/!< Must be a power of 2 minus 1.$/;"	m	class:option::PrintUsageImplementation::LineWrapper
bufmax	optionparser/optionparser.h	/^  int bufmax; \/\/! Number of slots in @c buffer. @c -1 means "large enough".$/;"	m	class:option::Parser::StoreOptionAction
builtin_clz	optionparser/optionparser.h	/^  static int builtin_clz(unsigned x)$/;"	f	struct:option::MSC_Builtin_CLZ
check_arg	optionparser/optionparser.h	/^  const CheckArg check_arg;$/;"	m	struct:option::Descriptor
col	optionparser/optionparser.h	/^    int col; \/\/!< Index of current column.$/;"	m	class:option::PrintUsageImplementation::LinePartIterator
column	optionparser/optionparser.h	/^    int column()$/;"	f	class:option::PrintUsageImplementation::LinePartIterator
count	optionparser/optionparser.h	/^  int count()$/;"	f	class:option::Option
data	optionparser/optionparser.h	/^    const char* data()$/;"	f	class:option::PrintUsageImplementation::LinePartIterator
datbuf	optionparser/optionparser.h	/^    const char* datbuf[bufmask + 1];$/;"	m	class:option::PrintUsageImplementation::LineWrapper
desc	optionparser/optionparser.h	/^  const Descriptor* desc;$/;"	m	class:option::Option
err	optionparser/optionparser.h	/^  bool err; \/\/!< @internal @brief see error()$/;"	m	class:option::Parser
error	optionparser/optionparser.h	/^  bool error()$/;"	f	class:option::Parser
fd	optionparser/optionparser.h	/^    int fd;$/;"	m	struct:option::PrintUsageImplementation::SyscallWriter
finished	optionparser/optionparser.h	/^  bool finished(int numargs, const char** args)$/;"	f	class:option::Parser::StoreOptionAction
finished	optionparser/optionparser.h	/^  virtual bool finished(int numargs, const char** args)$/;"	f	struct:option::Parser::Action
first	optionparser/optionparser.h	/^  Option* first()$/;"	f	class:option::Option
flush	optionparser/optionparser.h	/^    void flush(IStringWriter& write)$/;"	f	class:option::PrintUsageImplementation::LineWrapper
fwrite	optionparser/optionparser.h	/^    Function* fwrite;$/;"	m	struct:option::PrintUsageImplementation::StreamWriter
head	optionparser/optionparser.h	/^    int head; \/\/!< @brief index for next write$/;"	m	class:option::PrintUsageImplementation::LineWrapper
help	optionparser/optionparser.h	/^  const char* help;$/;"	m	struct:option::Descriptor
hit_target_line	optionparser/optionparser.h	/^    bool hit_target_line; \/\/!< Flag whether we encountered a part with line index target_line_in_block in the current cell.$/;"	m	class:option::PrintUsageImplementation::LinePartIterator
indent	optionparser/optionparser.h	/^  static void indent(IStringWriter& write, int& x, int want_x)$/;"	f	struct:option::PrintUsageImplementation
index	optionparser/optionparser.h	/^  const unsigned index;$/;"	m	struct:option::Descriptor
index	optionparser/optionparser.h	/^  int index() const$/;"	f	class:option::Option
init	optionparser/optionparser.h	/^  void init(const Descriptor* desc_, const char* name_, const char* arg_)$/;"	f	class:option::Option
instr	optionparser/optionparser.h	/^  static bool instr(char ch, const char* st)$/;"	f	class:option::Parser
isFirst	optionparser/optionparser.h	/^  bool isFirst() const$/;"	f	class:option::Option
isLast	optionparser/optionparser.h	/^  bool isLast() const$/;"	f	class:option::Option
isTagged	optionparser/optionparser.h	/^  static bool isTagged(Option* ptr)$/;"	f	class:option::Option
isWideChar	optionparser/optionparser.h	/^  static bool isWideChar(unsigned ch)$/;"	f	struct:option::PrintUsageImplementation
last	optionparser/optionparser.h	/^  Option* last()$/;"	f	class:option::Option
len	optionparser/optionparser.h	/^    int len; \/\/!< Length of the current part (that ptr points at) in BYTES$/;"	m	class:option::PrintUsageImplementation::LinePartIterator
lenbuf	optionparser/optionparser.h	/^    int lenbuf[bufmask + 1];$/;"	m	class:option::PrintUsageImplementation::LineWrapper
length	optionparser/optionparser.h	/^    int length()$/;"	f	class:option::PrintUsageImplementation::LinePartIterator
line	optionparser/optionparser.h	/^    int line()$/;"	f	class:option::PrintUsageImplementation::LinePartIterator
line_in_block	optionparser/optionparser.h	/^    int line_in_block; \/\/!< Line index within the current cell of the current part.$/;"	m	class:option::PrintUsageImplementation::LinePartIterator
longopt	optionparser/optionparser.h	/^  const char* const longopt;$/;"	m	struct:option::Descriptor
max_line_in_block	optionparser/optionparser.h	/^    int max_line_in_block; \/\/!< Greatest index of a line within the block. This is the number of \\\\v within the cell with the most \\\\vs.$/;"	m	class:option::PrintUsageImplementation::LinePartIterator
name	optionparser/optionparser.h	/^  const char* name;$/;"	m	class:option::Option
namelen	optionparser/optionparser.h	/^  int namelen;$/;"	m	class:option::Option
next	optionparser/optionparser.h	/^    bool next()$/;"	f	class:option::PrintUsageImplementation::LinePartIterator
next	optionparser/optionparser.h	/^  Option* next()$/;"	f	class:option::Option
nextRow	optionparser/optionparser.h	/^    bool nextRow()$/;"	f	class:option::PrintUsageImplementation::LinePartIterator
nextTable	optionparser/optionparser.h	/^    bool nextTable()$/;"	f	class:option::PrintUsageImplementation::LinePartIterator
next_	optionparser/optionparser.h	/^  Option* next_;$/;"	m	class:option::Option
nextwrap	optionparser/optionparser.h	/^  Option* nextwrap()$/;"	f	class:option::Option
nonOption	optionparser/optionparser.h	/^  const char* nonOption(int i)$/;"	f	class:option::Parser
nonOptions	optionparser/optionparser.h	/^  const char** nonOptions()$/;"	f	class:option::Parser
nonOptionsCount	optionparser/optionparser.h	/^  int nonOptionsCount()$/;"	f	class:option::Parser
nonop_args	optionparser/optionparser.h	/^  const char** nonop_args; \/\/!< @internal @brief see nonOptions()$/;"	m	class:option::Parser
nonop_count	optionparser/optionparser.h	/^  int nonop_count; \/\/!< @internal @brief see nonOptionsCount()$/;"	m	class:option::Parser
op_count	optionparser/optionparser.h	/^  int op_count; \/\/!< @internal @brief see optionsCount()$/;"	m	class:option::Parser
operator ()	optionparser/optionparser.h	/^    virtual void operator()(const char* str, int size)$/;"	f	struct:option::PrintUsageImplementation::FunctionWriter
operator ()	optionparser/optionparser.h	/^    virtual void operator()(const char* str, int size)$/;"	f	struct:option::PrintUsageImplementation::OStreamWriter
operator ()	optionparser/optionparser.h	/^    virtual void operator()(const char* str, int size)$/;"	f	struct:option::PrintUsageImplementation::StreamWriter
operator ()	optionparser/optionparser.h	/^    virtual void operator()(const char* str, int size)$/;"	f	struct:option::PrintUsageImplementation::SyscallWriter
operator ()	optionparser/optionparser.h	/^    virtual void operator()(const char* str, int size)$/;"	f	struct:option::PrintUsageImplementation::TemporaryWriter
operator ()	optionparser/optionparser.h	/^    virtual void operator()(const char*, int)$/;"	f	struct:option::PrintUsageImplementation::IStringWriter
operator =	optionparser/optionparser.h	/^  void operator=(const Option& orig)$/;"	f	class:option::Option
operator Option*	optionparser/optionparser.h	/^  operator Option*()$/;"	f	class:option::Option
operator const Option*	optionparser/optionparser.h	/^  operator const Option*() const$/;"	f	class:option::Option
option	optionparser/optionparser.h	/^namespace option$/;"	n
options	optionparser/optionparser.h	/^  Option* options;$/;"	m	class:option::Parser::StoreOptionAction
optionsCount	optionparser/optionparser.h	/^  int optionsCount()$/;"	f	class:option::Parser
options_max	optionparser/optionparser.h	/^  unsigned options_max;$/;"	m	struct:option::Stats
ostream	optionparser/optionparser.h	/^    OStream& ostream;$/;"	m	struct:option::PrintUsageImplementation::OStreamWriter
output	optionparser/optionparser.h	/^    void output(IStringWriter& write, const char* data, int len)$/;"	f	class:option::PrintUsageImplementation::LineWrapper
parse	optionparser/optionparser.h	/^  void parse(bool gnu, const Descriptor usage[], int argc, char** argv, Option options[], Option buffer[],$/;"	f	class:option::Parser
parse	optionparser/optionparser.h	/^  void parse(const Descriptor usage[], int argc, char** argv, Option options[], Option buffer[], int min_abbr_len = 0,$/;"	f	class:option::Parser
parse	optionparser/optionparser.h	/^  void parse(const Descriptor usage[], int argc, const char** argv, Option options[], Option buffer[],$/;"	f	class:option::Parser
parse	optionparser/optionparser.h	/^inline void Parser::parse(bool gnu, const Descriptor usage[], int argc, const char** argv, Option options[],$/;"	f	class:option::Parser
parser	optionparser/optionparser.h	/^  Parser& parser;$/;"	m	class:option::Parser::StoreOptionAction
perform	optionparser/optionparser.h	/^  bool perform(Option& option)$/;"	f	class:option::Parser::StoreOptionAction
perform	optionparser/optionparser.h	/^  bool perform(Option&)$/;"	f	class:option::Stats::CountOptionsAction
perform	optionparser/optionparser.h	/^  virtual bool perform(Option&)$/;"	f	struct:option::Parser::Action
prev	optionparser/optionparser.h	/^  Option* prev()$/;"	f	class:option::Option
prev_	optionparser/optionparser.h	/^  Option* prev_;$/;"	m	class:option::Option
prevwrap	optionparser/optionparser.h	/^  Option* prevwrap()$/;"	f	class:option::Option
printUsage	optionparser/optionparser.h	/^  static void printUsage(IStringWriter& write, const Descriptor usage[], int width = 80, \/\/$/;"	f	struct:option::PrintUsageImplementation
printUsage	optionparser/optionparser.h	/^void printUsage(Function* prn, Stream* stream, const Descriptor usage[], int width = 80, int last_column_min_percent =$/;"	f	namespace:option
printUsage	optionparser/optionparser.h	/^void printUsage(Function* prn, const Descriptor usage[], int width = 80, int last_column_min_percent = 50,$/;"	f	namespace:option
printUsage	optionparser/optionparser.h	/^void printUsage(OStream& prn, const Descriptor usage[], int width = 80, int last_column_min_percent = 50,$/;"	f	namespace:option
printUsage	optionparser/optionparser.h	/^void printUsage(Syscall* prn, int fd, const Descriptor usage[], int width = 80, int last_column_min_percent = 50,$/;"	f	namespace:option
printUsage	optionparser/optionparser.h	/^void printUsage(const Temporary& prn, const Descriptor usage[], int width = 80, int last_column_min_percent = 50,$/;"	f	namespace:option
process	optionparser/optionparser.h	/^    void process(IStringWriter& write, const char* data, int len)$/;"	f	class:option::PrintUsageImplementation::LineWrapper
ptr	optionparser/optionparser.h	/^    const char* ptr; \/\/!< Ptr to current part within the current row.$/;"	m	class:option::PrintUsageImplementation::LinePartIterator
restartRow	optionparser/optionparser.h	/^    void restartRow()$/;"	f	class:option::PrintUsageImplementation::LinePartIterator
restartTable	optionparser/optionparser.h	/^    void restartTable()$/;"	f	class:option::PrintUsageImplementation::LinePartIterator
rowdesc	optionparser/optionparser.h	/^    const Descriptor* rowdesc; \/\/!< The Descriptor that contains the current row.$/;"	m	class:option::PrintUsageImplementation::LinePartIterator
rowstart	optionparser/optionparser.h	/^    const char* rowstart; \/\/!< Ptr to 1st character of current row within rowdesc->help.$/;"	m	class:option::PrintUsageImplementation::LinePartIterator
screenLength	optionparser/optionparser.h	/^    int screenLength()$/;"	f	class:option::PrintUsageImplementation::LinePartIterator
screenlen	optionparser/optionparser.h	/^    int screenlen; \/\/!< Length of the current part in screen columns (taking narrow\/wide chars into account).$/;"	m	class:option::PrintUsageImplementation::LinePartIterator
shift	optionparser/optionparser.h	/^  static void shift(const char** args, int count)$/;"	f	class:option::Parser
shortopt	optionparser/optionparser.h	/^  const char* const shortopt;$/;"	m	struct:option::Descriptor
stream	optionparser/optionparser.h	/^    Stream* stream;$/;"	m	struct:option::PrintUsageImplementation::StreamWriter
streq	optionparser/optionparser.h	/^  static bool streq(const char* st1, const char* st2)$/;"	f	class:option::Parser
streqabbr	optionparser/optionparser.h	/^  static bool streqabbr(const char* st1, const char* st2, long long min)$/;"	f	class:option::Parser
tablestart	optionparser/optionparser.h	/^    const Descriptor* tablestart; \/\/!< The 1st descriptor of the current table.$/;"	m	class:option::PrintUsageImplementation::LinePartIterator
tag	optionparser/optionparser.h	/^  static Option* tag(Option* ptr)$/;"	f	class:option::Option
tail	optionparser/optionparser.h	/^    int tail; \/\/!< @brief index for next read - 1 (i.e. increment tail BEFORE read)$/;"	m	class:option::PrintUsageImplementation::LineWrapper
target_line_in_block	optionparser/optionparser.h	/^    int target_line_in_block; \/\/!< Line index of the parts we should return to the user on this iteration.$/;"	m	class:option::PrintUsageImplementation::LinePartIterator
type	optionparser/optionparser.h	/^  const int type;$/;"	m	struct:option::Descriptor
type	optionparser/optionparser.h	/^  int type() const$/;"	f	class:option::Option
untag	optionparser/optionparser.h	/^  static Option* untag(Option* ptr)$/;"	f	class:option::Option
update_length	optionparser/optionparser.h	/^    void update_length()$/;"	f	class:option::PrintUsageImplementation::LinePartIterator
upmax	optionparser/optionparser.h	/^  static void upmax(int& i1, int i2)$/;"	f	struct:option::PrintUsageImplementation
userstream	optionparser/optionparser.h	/^    const Temporary& userstream;$/;"	m	struct:option::PrintUsageImplementation::TemporaryWriter
width	optionparser/optionparser.h	/^    int width;$/;"	m	class:option::PrintUsageImplementation::LineWrapper
workhorse	optionparser/optionparser.h	/^inline bool Parser::workhorse(bool gnu, const Descriptor usage[], int numargs, const char** args, Action& action,$/;"	f	class:option::Parser
write	optionparser/optionparser.h	/^    Function* write;$/;"	m	struct:option::PrintUsageImplementation::FunctionWriter
write	optionparser/optionparser.h	/^    Syscall* write;$/;"	m	struct:option::PrintUsageImplementation::SyscallWriter
write_one_line	optionparser/optionparser.h	/^    void write_one_line(IStringWriter& write)$/;"	f	class:option::PrintUsageImplementation::LineWrapper
wrote_something	optionparser/optionparser.h	/^    bool wrote_something;$/;"	m	class:option::PrintUsageImplementation::LineWrapper
x	optionparser/optionparser.h	/^    int x;$/;"	m	class:option::PrintUsageImplementation::LineWrapper
LabeledSpikesList	spikes_list.h	/^    LabeledSpikesList(PatternsTimeline &_ptl, SpikesList &_sl) : Serializable(ELabeledSpikesList),$/;"	f	class:LabeledSpikesList
LabeledSpikesList	spikes_list.h	/^class LabeledSpikesList: public Serializable<Protos::LabeledSpikesList> {$/;"	c
N	spikes_list.h	/^    size_t N;$/;"	m	class:SpikesList
SpikesList	spikes_list.h	/^    SpikesList() : Serializable<Protos::SpikesList>(ESpikesList), sp_list(nullptr) {}$/;"	f	class:SpikesList
SpikesList	spikes_list.h	/^    SpikesList(const SpikesList &another) : Serializable(ESpikesList)  {$/;"	f	class:SpikesList
SpikesList	spikes_list.h	/^    SpikesList(size_t _N) : Serializable<Protos::SpikesList>(ESpikesList), N(_N) {$/;"	f	class:SpikesList
SpikesList	spikes_list.h	/^class SpikesList: public Serializable<Protos::SpikesList> {$/;"	c
deserialize	spikes_list.h	/^    virtual void deserialize() {$/;"	f	class:LabeledSpikesList
deserialize	spikes_list.h	/^    virtual void deserialize() {$/;"	f	class:SpikesList
getMaxSpikeTime	spikes_list.h	/^    double getMaxSpikeTime() {$/;"	f	class:SpikesList
init	spikes_list.h	/^    void init(size_t _N)  {$/;"	f	class:SpikesList
operator []	spikes_list.h	/^    const vector<double>& operator[](size_t ni) const {$/;"	f	class:SpikesList
operator []	spikes_list.h	/^    vector<double>& operator[](size_t ni) {$/;"	f	class:SpikesList
print	spikes_list.h	/^    void print(std::ostream& str) const {$/;"	f	class:LabeledSpikesList
print	spikes_list.h	/^    void print(std::ostream& str) const {$/;"	f	class:SpikesList
ptl	spikes_list.h	/^    PatternsTimeline ptl;$/;"	m	class:LabeledSpikesList
serialize	spikes_list.h	/^    virtual ProtoPack serialize() {$/;"	f	class:LabeledSpikesList
serialize	spikes_list.h	/^    virtual ProtoPack serialize() {$/;"	f	class:SpikesList
sl	spikes_list.h	/^    SpikesList sl;$/;"	m	class:LabeledSpikesList
sp_list	spikes_list.h	/^    vector<double> *sp_list;$/;"	m	class:SpikesList
~SpikesList	spikes_list.h	/^    ~SpikesList() {$/;"	f	class:SpikesList
compareSynSpike	spikes_queue.cpp	/^bool compareSynSpike (const SynSpike& s1, const SynSpike& s2) {$/;"	f
push_and_sort	spikes_queue.cpp	/^void SpikesQueue::push_and_sort(vector<SynSpike> v) {$/;"	f	class:SpikesQueue
SpikesQueue	spikes_queue.h	/^    SpikesQueue() {$/;"	f	class:SpikesQueue
SpikesQueue	spikes_queue.h	/^class SpikesQueue : public Printable {$/;"	c
__id	spikes_queue.h	/^    size_t __id;$/;"	m	class:SpikesQueue
asyncPush	spikes_queue.h	/^    const inline void asyncPush(const SynSpike s) {$/;"	f	class:SpikesQueue
clear	spikes_queue.h	/^    void clear() {$/;"	f	class:SpikesQueue
getSpike	spikes_queue.h	/^    inline const SynSpike* getSpike(const double &t) {$/;"	f	class:SpikesQueue
l	spikes_queue.h	/^    list<SynSpike> l;$/;"	m	class:SpikesQueue
lock	spikes_queue.h	/^    pthread_spinlock_t lock;$/;"	m	class:SpikesQueue
operator =	spikes_queue.h	/^    SpikesQueue& operator=(const SpikesQueue& another) {$/;"	f	class:SpikesQueue
pos	spikes_queue.h	/^    list<SynSpike>::iterator pos;$/;"	m	class:SpikesQueue
print	spikes_queue.h	/^    void print(std::ostream& str) const {$/;"	f	class:SpikesQueue
reset	spikes_queue.h	/^    void reset() {$/;"	f	class:SpikesQueue
~SpikesQueue	spikes_queue.h	/^    ~SpikesQueue() {$/;"	f	class:SpikesQueue
SpinLock	spinlock.h	/^class SpinLock$/;"	c
lck	spinlock.h	/^    std::atomic_flag lck = ATOMIC_FLAG_INIT;$/;"	m	class:SpinLock
lock	spinlock.h	/^    void lock()$/;"	f	class:SpinLock
unlock	spinlock.h	/^    void unlock()$/;"	f	class:SpinLock
SpinningBarrier	spinning_barrier.h	/^    SpinningBarrier (unsigned int n) : n_ (n), nwait_ (0), step_(0) {}$/;"	f	class:SpinningBarrier
SpinningBarrier	spinning_barrier.h	/^class SpinningBarrier$/;"	c
n_	spinning_barrier.h	/^    const unsigned int n_;$/;"	m	class:SpinningBarrier
nwait_	spinning_barrier.h	/^    std::atomic<unsigned int> nwait_;$/;"	m	class:SpinningBarrier
step_	spinning_barrier.h	/^    std::atomic<unsigned int> step_;$/;"	m	class:SpinningBarrier
wait	spinning_barrier.h	/^    bool wait ()$/;"	f	class:SpinningBarrier
CASE	str_switch.h	7;"	d
DEFAULT	str_switch.h	10;"	d
MAX_LEN	str_switch.h	/^    const uchar MAX_LEN = 20;$/;"	m	namespace:s_s
N_HASH	str_switch.h	/^    const ullong N_HASH = static_cast<ullong>(-1);$/;"	m	namespace:s_s
STR_SWITCH_H	str_switch.h	2;"	d
SWITCH	str_switch.h	6;"	d
raise_128_to	str_switch.h	/^    constexpr ullong raise_128_to(const uchar power)$/;"	f	namespace:s_s
s_s	str_switch.h	/^namespace s_s$/;"	n
str_hash	str_switch.h	/^    constexpr ullong str_hash(const char* const str, const uchar current_len)$/;"	f	namespace:s_s
str_hash_for_switch	str_switch.h	/^    inline ullong str_hash_for_switch(const char* const str)$/;"	f	namespace:s_s
str_hash_for_switch	str_switch.h	/^    inline ullong str_hash_for_switch(const std::string& str)$/;"	f	namespace:s_s
str_is_correct	str_switch.h	/^    constexpr bool str_is_correct(const char* const str)$/;"	f	namespace:s_s
str_len	str_switch.h	/^    constexpr uchar str_len(const char* const str)$/;"	f	namespace:s_s
uchar	str_switch.h	/^    typedef unsigned char uchar;$/;"	t	namespace:s_s
ullong	str_switch.h	/^    typedef unsigned long long ullong;$/;"	t	namespace:s_s
ContLabeledTimeSeries	time_series.h	/^    ContLabeledTimeSeries() {}$/;"	f	class:ContLabeledTimeSeries
ContLabeledTimeSeries	time_series.h	/^    ContLabeledTimeSeries(LabeledTimeSeriesList lst, const double &dt) {$/;"	f	class:ContLabeledTimeSeries
ContLabeledTimeSeries	time_series.h	/^class ContLabeledTimeSeries : public Printable {$/;"	c
LabeledTimeSeries	time_series.h	/^    LabeledTimeSeries() : Serializable(ELabeledTimeSeries) {}$/;"	f	class:LabeledTimeSeries
LabeledTimeSeries	time_series.h	/^    LabeledTimeSeries(const Protos::LabeledTimeSeries &m) : Serializable(ELabeledTimeSeries) {$/;"	f	class:LabeledTimeSeries
LabeledTimeSeries	time_series.h	/^    LabeledTimeSeries(const vector<double> &data, string _label) : Serializable(ELabeledTimeSeries), ts(data), label(_label) { }$/;"	f	class:LabeledTimeSeries
LabeledTimeSeries	time_series.h	/^class LabeledTimeSeries  :  public Serializable<Protos::LabeledTimeSeries> {$/;"	c
LabeledTimeSeriesList	time_series.h	/^    LabeledTimeSeriesList() : Serializable(ELabeledTimeSeriesList) {$/;"	f	class:LabeledTimeSeriesList
LabeledTimeSeriesList	time_series.h	/^class LabeledTimeSeriesList  : public Serializable<Protos::LabeledTimeSeriesList> {$/;"	c
PatternsTimeline	time_series.h	/^    PatternsTimeline() : Serializable(EPatternsTimeline) {}$/;"	f	class:PatternsTimeline
PatternsTimeline	time_series.h	/^class PatternsTimeline : public Serializable<Protos::PatternsTimeline> {$/;"	c
TimeSeries	time_series.h	/^    TimeSeries() {}$/;"	f	class:TimeSeries
TimeSeries	time_series.h	/^    TimeSeries(const vector<double> &_data) : data(_data) {}$/;"	f	class:TimeSeries
TimeSeries	time_series.h	/^class TimeSeries : public Printable {$/;"	c
Tmax	time_series.h	/^    double Tmax;$/;"	m	class:ContLabeledTimeSeries
Tmax	time_series.h	/^    double Tmax;$/;"	m	class:PatternsTimeline
current_position	time_series.h	/^    size_t current_position;$/;"	m	class:PatternsTimeline
data	time_series.h	/^    deque<double> data;$/;"	m	class:ContLabeledTimeSeries
data	time_series.h	/^    vector<double> data;$/;"	m	class:TimeSeries
deserialize	time_series.h	/^    virtual void deserialize() {$/;"	f	class:PatternsTimeline
deserialize	time_series.h	/^    void deserialize() {$/;"	f	class:LabeledTimeSeries
deserialize	time_series.h	/^    void deserialize() {$/;"	f	class:LabeledTimeSeriesList
deserialize	time_series.h	/^    void deserialize(const Protos::TimeSeries &m) {$/;"	f	class:TimeSeries
getCurrentClassId	time_series.h	/^    const size_t* getCurrentClassId(const double &t) {$/;"	f	class:PatternsTimeline
init	time_series.h	/^    void init(LabeledTimeSeriesList lst, const double &dt) {$/;"	f	class:ContLabeledTimeSeries
label	time_series.h	/^    string label;$/;"	m	class:LabeledTimeSeries
labels	time_series.h	/^    vector<string> labels;$/;"	m	class:PatternsTimeline
labels_id_timeline	time_series.h	/^    vector<size_t> labels_id_timeline;$/;"	m	class:PatternsTimeline
pop_value	time_series.h	/^    inline void pop_value() {$/;"	f	class:ContLabeledTimeSeries
print	time_series.h	/^    void print(std::ostream& str) const {$/;"	f	class:ContLabeledTimeSeries
print	time_series.h	/^    void print(std::ostream& str) const {$/;"	f	class:LabeledTimeSeries
print	time_series.h	/^    void print(std::ostream& str) const {$/;"	f	class:LabeledTimeSeriesList
print	time_series.h	/^    void print(std::ostream& str) const {$/;"	f	class:PatternsTimeline
print	time_series.h	/^    void print(std::ostream& str) const {$/;"	f	class:TimeSeries
ptl	time_series.h	/^    PatternsTimeline ptl;$/;"	m	class:ContLabeledTimeSeries
push_back	time_series.h	/^    void push_back(LabeledTimeSeries lst) {$/;"	f	class:LabeledTimeSeriesList
push_back	time_series.h	/^    void push_back(const double &x) {$/;"	f	class:TimeSeries
reset	time_series.h	/^    void reset() {$/;"	f	class:ContLabeledTimeSeries
reset	time_series.h	/^    void reset() {$/;"	f	class:PatternsTimeline
serialize	time_series.h	/^    ProtoPack serialize() {$/;"	f	class:LabeledTimeSeries
serialize	time_series.h	/^    ProtoPack serialize() {$/;"	f	class:LabeledTimeSeriesList
serialize	time_series.h	/^    virtual ProtoPack serialize() {$/;"	f	class:PatternsTimeline
size	time_series.h	/^    inline size_t size() const {$/;"	f	class:ContLabeledTimeSeries
size	time_series.h	/^    size_t size() const {$/;"	f	class:LabeledTimeSeriesList
size	time_series.h	/^    size_t size() {$/;"	f	class:TimeSeries
timeline	time_series.h	/^    vector<double> timeline;$/;"	m	class:PatternsTimeline
top_value	time_series.h	/^    inline const double& top_value() {$/;"	f	class:ContLabeledTimeSeries
ts	time_series.h	/^    TimeSeries ts;$/;"	m	class:LabeledTimeSeries
ts	time_series.h	/^    vector<LabeledTimeSeries> ts;$/;"	m	class:LabeledTimeSeriesList
getExp	util.cpp	/^double getExp(double rate) {$/;"	f
getFileSize	util.cpp	/^long getFileSize(string filename) {$/;"	f
getLogNorm	util.cpp	/^double getLogNorm(double logmean, double logsd) {$/;"	f
getNorm	util.cpp	/^double getNorm() {$/;"	f
getUnif	util.cpp	/^double getUnif() {$/;"	f
getUnifBetween	util.cpp	/^double getUnifBetween(double low, double high) {$/;"	f
normal_distr_var	util.cpp	/^double normal_distr_var = -1;$/;"	v
sampleDelay	util.cpp	/^double sampleDelay(double gain, double rate) {$/;"	f
split	util.cpp	/^vector<string> split(const string &s, char delim) {$/;"	f
splitBySubstr	util.cpp	/^vector<string> splitBySubstr(const string &s_inp, const string &delimiter) {$/;"	f
split_into	util.cpp	/^vector<string> split_into(const string &s, char delim, vector<string> &elems) {$/;"	f
strip_comments	util.cpp	/^string strip_comments(const string& input, const string& delimiters)$/;"	f
strip_white	util.cpp	/^string strip_white(const string& input)$/;"	f
swapInd	util.cpp	/^void swapInd(size_t *l, size_t *r) {$/;"	f
trim	util.cpp	/^void trim(string &str) {$/;"	f
PI	util.h	13;"	d
