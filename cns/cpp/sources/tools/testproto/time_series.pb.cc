// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: time_series.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "time_series.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Protos {

namespace {

const ::google::protobuf::Descriptor* TimeSeries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeSeries_reflection_ = NULL;
const ::google::protobuf::Descriptor* LabeledTimeSeries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabeledTimeSeries_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_time_5fseries_2eproto() {
  protobuf_AddDesc_time_5fseries_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "time_series.proto");
  GOOGLE_CHECK(file != NULL);
  TimeSeries_descriptor_ = file->message_type(0);
  static const int TimeSeries_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeries, data_),
  };
  TimeSeries_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeSeries_descriptor_,
      TimeSeries::default_instance_,
      TimeSeries_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeries, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeries, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeSeries));
  LabeledTimeSeries_descriptor_ = file->message_type(1);
  static const int LabeledTimeSeries_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabeledTimeSeries, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabeledTimeSeries, ts_),
  };
  LabeledTimeSeries_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LabeledTimeSeries_descriptor_,
      LabeledTimeSeries::default_instance_,
      LabeledTimeSeries_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabeledTimeSeries, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabeledTimeSeries, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LabeledTimeSeries));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_time_5fseries_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeSeries_descriptor_, &TimeSeries::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LabeledTimeSeries_descriptor_, &LabeledTimeSeries::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_time_5fseries_2eproto() {
  delete TimeSeries::default_instance_;
  delete TimeSeries_reflection_;
  delete LabeledTimeSeries::default_instance_;
  delete LabeledTimeSeries_reflection_;
}

void protobuf_AddDesc_time_5fseries_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021time_series.proto\022\006Protos\"\036\n\nTimeSerie"
    "s\022\020\n\004data\030\001 \003(\001B\002\020\001\"B\n\021LabeledTimeSeries"
    "\022\r\n\005label\030\002 \002(\t\022\036\n\002ts\030\003 \002(\0132\022.Protos.Tim"
    "eSeries", 127);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "time_series.proto", &protobuf_RegisterTypes);
  TimeSeries::default_instance_ = new TimeSeries();
  LabeledTimeSeries::default_instance_ = new LabeledTimeSeries();
  TimeSeries::default_instance_->InitAsDefaultInstance();
  LabeledTimeSeries::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_time_5fseries_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_time_5fseries_2eproto {
  StaticDescriptorInitializer_time_5fseries_2eproto() {
    protobuf_AddDesc_time_5fseries_2eproto();
  }
} static_descriptor_initializer_time_5fseries_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TimeSeries::kDataFieldNumber;
#endif  // !_MSC_VER

TimeSeries::TimeSeries()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protos.TimeSeries)
}

void TimeSeries::InitAsDefaultInstance() {
}

TimeSeries::TimeSeries(const TimeSeries& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protos.TimeSeries)
}

void TimeSeries::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeSeries::~TimeSeries() {
  // @@protoc_insertion_point(destructor:Protos.TimeSeries)
  SharedDtor();
}

void TimeSeries::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeSeries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeSeries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeSeries_descriptor_;
}

const TimeSeries& TimeSeries::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_time_5fseries_2eproto();
  return *default_instance_;
}

TimeSeries* TimeSeries::default_instance_ = NULL;

TimeSeries* TimeSeries::New() const {
  return new TimeSeries;
}

void TimeSeries::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeSeries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protos.TimeSeries)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double data = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protos.TimeSeries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protos.TimeSeries)
  return false;
#undef DO_
}

void TimeSeries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protos.TimeSeries)
  // repeated double data = 1 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protos.TimeSeries)
}

::google::protobuf::uint8* TimeSeries::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protos.TimeSeries)
  // repeated double data = 1 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protos.TimeSeries)
  return target;
}

int TimeSeries::ByteSize() const {
  int total_size = 0;

  // repeated double data = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeSeries::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeSeries* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeSeries*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeSeries::MergeFrom(const TimeSeries& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeSeries::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSeries::CopyFrom(const TimeSeries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSeries::IsInitialized() const {

  return true;
}

void TimeSeries::Swap(TimeSeries* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeSeries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeSeries_descriptor_;
  metadata.reflection = TimeSeries_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LabeledTimeSeries::kLabelFieldNumber;
const int LabeledTimeSeries::kTsFieldNumber;
#endif  // !_MSC_VER

LabeledTimeSeries::LabeledTimeSeries()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Protos.LabeledTimeSeries)
}

void LabeledTimeSeries::InitAsDefaultInstance() {
  ts_ = const_cast< ::Protos::TimeSeries*>(&::Protos::TimeSeries::default_instance());
}

LabeledTimeSeries::LabeledTimeSeries(const LabeledTimeSeries& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Protos.LabeledTimeSeries)
}

void LabeledTimeSeries::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ts_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LabeledTimeSeries::~LabeledTimeSeries() {
  // @@protoc_insertion_point(destructor:Protos.LabeledTimeSeries)
  SharedDtor();
}

void LabeledTimeSeries::SharedDtor() {
  if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_;
  }
  if (this != default_instance_) {
    delete ts_;
  }
}

void LabeledTimeSeries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabeledTimeSeries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabeledTimeSeries_descriptor_;
}

const LabeledTimeSeries& LabeledTimeSeries::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_time_5fseries_2eproto();
  return *default_instance_;
}

LabeledTimeSeries* LabeledTimeSeries::default_instance_ = NULL;

LabeledTimeSeries* LabeledTimeSeries::New() const {
  return new LabeledTimeSeries;
}

void LabeledTimeSeries::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        label_->clear();
      }
    }
    if (has_ts()) {
      if (ts_ != NULL) ts_->::Protos::TimeSeries::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LabeledTimeSeries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Protos.LabeledTimeSeries)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string label = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ts;
        break;
      }

      // required .Protos.TimeSeries ts = 3;
      case 3: {
        if (tag == 26) {
         parse_ts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Protos.LabeledTimeSeries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Protos.LabeledTimeSeries)
  return false;
#undef DO_
}

void LabeledTimeSeries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Protos.LabeledTimeSeries)
  // required string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->label(), output);
  }

  // required .Protos.TimeSeries ts = 3;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Protos.LabeledTimeSeries)
}

::google::protobuf::uint8* LabeledTimeSeries::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protos.LabeledTimeSeries)
  // required string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }

  // required .Protos.TimeSeries ts = 3;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protos.LabeledTimeSeries)
  return target;
}

int LabeledTimeSeries::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // required .Protos.TimeSeries ts = 3;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabeledTimeSeries::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LabeledTimeSeries* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LabeledTimeSeries*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LabeledTimeSeries::MergeFrom(const LabeledTimeSeries& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_ts()) {
      mutable_ts()->::Protos::TimeSeries::MergeFrom(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LabeledTimeSeries::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabeledTimeSeries::CopyFrom(const LabeledTimeSeries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabeledTimeSeries::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LabeledTimeSeries::Swap(LabeledTimeSeries* other) {
  if (other != this) {
    std::swap(label_, other->label_);
    std::swap(ts_, other->ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LabeledTimeSeries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabeledTimeSeries_descriptor_;
  metadata.reflection = LabeledTimeSeries_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protos

// @@protoc_insertion_point(global_scope)
