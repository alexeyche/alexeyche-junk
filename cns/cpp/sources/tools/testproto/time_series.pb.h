// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: time_series.proto

#ifndef PROTOBUF_time_5fseries_2eproto__INCLUDED
#define PROTOBUF_time_5fseries_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Protos {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_time_5fseries_2eproto();
void protobuf_AssignDesc_time_5fseries_2eproto();
void protobuf_ShutdownFile_time_5fseries_2eproto();

class TimeSeries;
class LabeledTimeSeries;

// ===================================================================

class TimeSeries : public ::google::protobuf::Message {
 public:
  TimeSeries();
  virtual ~TimeSeries();

  TimeSeries(const TimeSeries& from);

  inline TimeSeries& operator=(const TimeSeries& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeSeries& default_instance();

  void Swap(TimeSeries* other);

  // implements Message ----------------------------------------------

  TimeSeries* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TimeSeries& from);
  void MergeFrom(const TimeSeries& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double data = 1 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline double data(int index) const;
  inline void set_data(int index, double value);
  inline void add_data(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      data() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:Protos.TimeSeries)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > data_;
  mutable int _data_cached_byte_size_;
  friend void  protobuf_AddDesc_time_5fseries_2eproto();
  friend void protobuf_AssignDesc_time_5fseries_2eproto();
  friend void protobuf_ShutdownFile_time_5fseries_2eproto();

  void InitAsDefaultInstance();
  static TimeSeries* default_instance_;
};
// -------------------------------------------------------------------

class LabeledTimeSeries : public ::google::protobuf::Message {
 public:
  LabeledTimeSeries();
  virtual ~LabeledTimeSeries();

  LabeledTimeSeries(const LabeledTimeSeries& from);

  inline LabeledTimeSeries& operator=(const LabeledTimeSeries& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LabeledTimeSeries& default_instance();

  void Swap(LabeledTimeSeries* other);

  // implements Message ----------------------------------------------

  LabeledTimeSeries* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LabeledTimeSeries& from);
  void MergeFrom(const LabeledTimeSeries& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string label = 2;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 2;
  inline const ::std::string& label() const;
  inline void set_label(const ::std::string& value);
  inline void set_label(const char* value);
  inline void set_label(const char* value, size_t size);
  inline ::std::string* mutable_label();
  inline ::std::string* release_label();
  inline void set_allocated_label(::std::string* label);

  // required .Protos.TimeSeries ts = 3;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 3;
  inline const ::Protos::TimeSeries& ts() const;
  inline ::Protos::TimeSeries* mutable_ts();
  inline ::Protos::TimeSeries* release_ts();
  inline void set_allocated_ts(::Protos::TimeSeries* ts);

  // @@protoc_insertion_point(class_scope:Protos.LabeledTimeSeries)
 private:
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_ts();
  inline void clear_has_ts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* label_;
  ::Protos::TimeSeries* ts_;
  friend void  protobuf_AddDesc_time_5fseries_2eproto();
  friend void protobuf_AssignDesc_time_5fseries_2eproto();
  friend void protobuf_ShutdownFile_time_5fseries_2eproto();

  void InitAsDefaultInstance();
  static LabeledTimeSeries* default_instance_;
};
// ===================================================================


// ===================================================================

// TimeSeries

// repeated double data = 1 [packed = true];
inline int TimeSeries::data_size() const {
  return data_.size();
}
inline void TimeSeries::clear_data() {
  data_.Clear();
}
inline double TimeSeries::data(int index) const {
  // @@protoc_insertion_point(field_get:Protos.TimeSeries.data)
  return data_.Get(index);
}
inline void TimeSeries::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protos.TimeSeries.data)
}
inline void TimeSeries::add_data(double value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:Protos.TimeSeries.data)
}
inline const ::google::protobuf::RepeatedField< double >&
TimeSeries::data() const {
  // @@protoc_insertion_point(field_list:Protos.TimeSeries.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< double >*
TimeSeries::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:Protos.TimeSeries.data)
  return &data_;
}

// -------------------------------------------------------------------

// LabeledTimeSeries

// required string label = 2;
inline bool LabeledTimeSeries::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LabeledTimeSeries::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LabeledTimeSeries::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LabeledTimeSeries::clear_label() {
  if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_->clear();
  }
  clear_has_label();
}
inline const ::std::string& LabeledTimeSeries::label() const {
  // @@protoc_insertion_point(field_get:Protos.LabeledTimeSeries.label)
  return *label_;
}
inline void LabeledTimeSeries::set_label(const ::std::string& value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_ = new ::std::string;
  }
  label_->assign(value);
  // @@protoc_insertion_point(field_set:Protos.LabeledTimeSeries.label)
}
inline void LabeledTimeSeries::set_label(const char* value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_ = new ::std::string;
  }
  label_->assign(value);
  // @@protoc_insertion_point(field_set_char:Protos.LabeledTimeSeries.label)
}
inline void LabeledTimeSeries::set_label(const char* value, size_t size) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_ = new ::std::string;
  }
  label_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protos.LabeledTimeSeries.label)
}
inline ::std::string* LabeledTimeSeries::mutable_label() {
  set_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Protos.LabeledTimeSeries.label)
  return label_;
}
inline ::std::string* LabeledTimeSeries::release_label() {
  clear_has_label();
  if (label_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = label_;
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LabeledTimeSeries::set_allocated_label(::std::string* label) {
  if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_;
  }
  if (label) {
    set_has_label();
    label_ = label;
  } else {
    clear_has_label();
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Protos.LabeledTimeSeries.label)
}

// required .Protos.TimeSeries ts = 3;
inline bool LabeledTimeSeries::has_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LabeledTimeSeries::set_has_ts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LabeledTimeSeries::clear_has_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LabeledTimeSeries::clear_ts() {
  if (ts_ != NULL) ts_->::Protos::TimeSeries::Clear();
  clear_has_ts();
}
inline const ::Protos::TimeSeries& LabeledTimeSeries::ts() const {
  // @@protoc_insertion_point(field_get:Protos.LabeledTimeSeries.ts)
  return ts_ != NULL ? *ts_ : *default_instance_->ts_;
}
inline ::Protos::TimeSeries* LabeledTimeSeries::mutable_ts() {
  set_has_ts();
  if (ts_ == NULL) ts_ = new ::Protos::TimeSeries;
  // @@protoc_insertion_point(field_mutable:Protos.LabeledTimeSeries.ts)
  return ts_;
}
inline ::Protos::TimeSeries* LabeledTimeSeries::release_ts() {
  clear_has_ts();
  ::Protos::TimeSeries* temp = ts_;
  ts_ = NULL;
  return temp;
}
inline void LabeledTimeSeries::set_allocated_ts(::Protos::TimeSeries* ts) {
  delete ts_;
  ts_ = ts;
  if (ts) {
    set_has_ts();
  } else {
    clear_has_ts();
  }
  // @@protoc_insertion_point(field_set_allocated:Protos.LabeledTimeSeries.ts)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protos

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_time_5fseries_2eproto__INCLUDED
