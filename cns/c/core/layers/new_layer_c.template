
#include "{{name}}.h"
#
#include <core/sim/sim.h>

Layer{{Name}}* create{{Name}}Layer(size_t N, size_t *glob_idx, unsigned char statLevel) {
    Layer{{Name}} *l = (Layer{{Name}}*)malloc(sizeof(Layer{{Name}}));
    l->base = *create{{SuperClassName}}Layer(N, glob_idx, statLevel);

    Layer{{BaseClassName}} *lbase = (Layer{{BaseClassName}}*)l;
    lbase->calculateProbability = &calculateProbability_{{Name}};
    lbase->calculateSpike = &calculateSpike_{{Name}};
    lbase->calculateDynamics = &calculateDynamics_{{Name}};
    lbase->deleteLayer = &deleteLayer_{{Name}};
    lbase->configureLayer = &configureLayer_{{Name}};
    lbase->toStartValues = &toStartValues_{{Name}};
    lbase->propagateSpike = &propagateSpike_{{Name}};
    lbase->allocSynData = &allocSynData_{{Name}};
    lbase->deallocSynData = &deallocSynData_{{Name}};
    lbase->printLayer = &printLayer_{{Name}};
    lbase->serializeLayer = &serializeLayer_{{Name}};
    lbase->deserializeLayer= &deserializeLayer_{{Name}};
    lbase->saveStat = &saveStat_{{Name}};

    return(l);
}


void calculateProbability_{{Name}}(Layer{{BaseClassName}} *l, const size_t *ni, const SimContext *s) {
    Layer{{Name}}* linh = (Layer{{Name}}*) l;
    calculateProbability_{{SuperClassName}}(l, ni, s);

}

void calculateSpike_{{Name}}(Layer{{BaseClassName}} *l, const size_t *ni, const SimContext *s) {
    Layer{{Name}}* linh = (Layer{{Name}}*) l;
    calculateSpike_{{SuperClassName}}(l, ni, s);

}

void calculateDynamics_{{Name}}(Layer{{BaseClassName}} *l, const size_t *ni, const SimContext *s) {
    Layer{{Name}}* linh = (Layer{{Name}}*) l;
    calculateDynamics_{{SuperClassName}}(l, ni, s);

}

void propagateSpike_{{Name}}(Layer{{BaseClassName}} *l, const size_t *ni, const SynSpike *sp, const SimContext *s) {
    Layer{{Name}}* linh = (Layer{{Name}}*) l;
    propagateSpike_{{SuperClassName}}(l, ni, sp, s);

}

// methods common

void toStartValues_{{Name}}(Layer{{BaseClassName}} *l, const Constants *c) {
    Layer{{Name}}* linh = (Layer{{Name}}*) l;
    toStartValues_{{SuperClassName}}(l, c);

}

void allocSynData_{{Name}}(Layer{{BaseClassName}} *l) {
    Layer{{Name}}* linh = (Layer{{Name}}*) l;
    allocSynData_{{SuperClassName}}(l);

}

void deallocSynData_{{Name}}(Layer{{BaseClassName}} *l) {
    Layer{{Name}}* linh = (Layer{{Name}}*) l;
    deallocSynData_{{SuperClassName}}(l);

}

void printLayer_{{Name}}(Layer{{BaseClassName}} *l) {
    Layer{{Name}}* linh = (Layer{{Name}}*) l;
    printLayer_{{SuperClassName}}(l);

}

void deleteLayer_{{Name}}(Layer{{BaseClassName}} *l) {
    Layer{{Name}}* linh = (Layer{{Name}}*) l;
    deleteLayer_{{SuperClassName}}(l);

}

void configureLayer_{{Name}}(Layer{{BaseClassName}} *l, const indVector *inputIDs, const indVector *outputIDs, const Constants *c) {
    Layer{{Name}}* linh = (Layer{{Name}}*) l;
    configureLayer_{{SuperClassName}}(l, inputIDs, outputIDs, c);

}

void serializeLayer_{{Name}}(Layer{{BaseClassName}} *l, FileStream *file, const Sim *s) {
    Layer{{Name}}* linh = (Layer{{Name}}*) l;
    serializeLayer_{{SuperClassName}}(l, file, s);

}

void deserializeLayer_{{Name}}(Layer{{BaseClassName}} *l, FileStream *file, const Sim *s) {
    Layer{{Name}}* linh = (Layer{{Name}}*) l;
    deserializeLayer_{{SuperClassName}}(l, file, s);

}

void saveStat_{{Name}}(Layer{{BaseClassName}} *l, FileStream *file) {
    Layer{{Name}}* linh = (Layer{{Name}}*) l;
    saveStat_{{SuperClassName}}(l, file, c);

}

