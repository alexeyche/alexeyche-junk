p <- x
n <- ceiling(log2(max(x)))
v <- array(0, dim=c(length(x),n))
for(i in n:1) {
p <- p/2
rest <- p %% 1
v[,i] <- rest != 0
p <- p - rest
}
v[x == 0, ] = 0
v
source('~/my/git/alexeyche-junk/ml/dbn/logprob_calc.R', echo=TRUE)
int_to_bin(x)
int_to_bin <- function(x) {
p <- x
n <- ceiling(log2(max(x)))
v <- array(0, dim=c(length(x),n))
for(i in n:1) {
p <- p/2
rest <- p %% 1
v[,i] <- rest != 0
p <- p - rest
}
v[x == 0, ] <- 0
return(v)
}
source('~/my/git/alexeyche-junk/ml/dbn/logprob_calc.R', echo=TRUE)
b
source('~/my/git/alexeyche-junk/ml/dbn/logprob_calc.R', echo=TRUE)
h
h[num_cases,]
log_prob <- h %*% t(model$hid_bias) +  sum.col(log(1+exp( h %*% t(model$W) + rep.row(model$vis_bias,num_cases) ))
log_prob <- h %*% t(model$hid_bias) +  sum.col(log(1+exp( h %*% t(model$W) + rep.row(model$vis_bias,num_cases) )) )
h
dim(h)
num.hid
h %*% t(model$W)
str(h %*% t(model$W))
model$vis_bias
num_cases
source('~/my/git/alexeyche-junk/ml/dbn/logprob_calc.R', echo=TRUE)
log_prob
source('~/my/git/alexeyche-junk/ml/dbn/logprob_calc.R', echo=TRUE)
log_z_true
log_z_est
source('~/my/git/alexeyche-junk/ml/dbn/rbm_toy.R', echo=TRUE)
source('~/my/git/alexeyche-junk/ml/dbn/ais_my2.R', echo=TRUE)
log_z_est
source('~/my/git/alexeyche-junk/ml/dbn/logprob_calc.R', echo=TRUE)
log_z_true
source('~/my/git/alexeyche-junk/ml/dbn/rbm_toy.R', echo=TRUE)
source('~/my/git/alexeyche-junk/ml/dbn/ais_my2.R', echo=TRUE)
source('~/my/git/alexeyche-junk/ml/dbn/logprob_calc.R', echo=TRUE)
log_z_true
log_z_est
pd <- v %*% t(model$vis_bias) +  sum.col(log(1+exp( v %*% model$W + rep.row(model$hid_bias,nrow(v)) )) )
pd
v <- data.all
log_prob <- function(v,log_z, model) {
pd <- v %*% t(model$vis_bias) +  sum.col(log(1+exp( v %*% model$W + rep.row(model$hid_bias,nrow(v)) )) )
log_prob <- sum(pd)/nrow(v) - log_z
return(log_prob)
}
log_prob(data.all, log_z_true, model)
log_prob(data.all, log_z_est, model)
source('~/my/git/alexeyche-junk/ml/dbn/ais_my2.R', echo=TRUE)
source('~/my/git/alexeyche-junk/ml/dbn/ais_my2.R', echo=TRUE)
log_z_est
log_z_base
r
log(3)
logstd_ais
mean(logw)
logw
exp(logw-mean(logw)),2,sd)
apply(exp(logw-mean(logw)),2,sd)
diff
?diff
diff(c(1,2,3))
diff(matrix(c(1,2,3,4,5,6), ncol=2))
diff(matrix(c(1,2,3,4,5,50), ncol=2))
diff(matrix(c(1,2,3,4,5,50), ncol=3))
diff(matrix(c(1,2,3,4,5,50), ncol=3),3)
diff(matrix(c(1,2,3,4,5,50), ncol=3),2)
diff(matrix(c(1,2,3,4,5,50), ncol=3),1)
diff(matrix(c(1,2,3,4,5,50), ncol=3),1)
data.all
write.table(data.all, "/home/alexeyche/my/dbn/code_AIS/my_data.csv", sep=",",row.names=FALSE, col.names=FALSE)
write.table(model$W, "/home/alexeyche/my/dbn/code_AIS/my_data_W.csv", sep=",",row.names=FALSE, col.names=FALSE)
write.table(model$hid_bias, "/home/alexeyche/my/dbn/code_AIS/my_data_hb.csv", sep=",",row.names=FALSE, col.names=FALSE)
write.table(model$vis_bias, "/home/alexeyche/my/dbn/code_AIS/my_data_vb.csv", sep=",",row.names=FALSE, col.names=FALSE)
log_prob(data.all, log_z_true, model)
log_base_rate
source('~/my/git/alexeyche-junk/ml/dbn/ais_my2.R', echo=TRUE)
log_base_rate
base_model
#!/usr/bin/RScript
source('sys.R')
source('rbm.R')
source('dbn_util.R')
betas <- c(seq(0,0.5,by=1e-03), seq(0.5,0.9,by=1e-04), seq(0.9,1,by=1e-04))
numruns <- 100
c(num.vis, num.hid) := dim(model$W)
log_base_rate <- log(colMeans(data.all)) - log(1-colMeans(data.all))
# init base_model
base_model <- list(W = array(0,dim=c(num.vis,num.hid)), # visible units for row, hidden units for col
vis_bias = array(log_base_rate, dim=c(1,num.vis)),
hid_bias = array(0,dim = c(1,num.hid)),
num.cases = numruns)
prop_up.t <- function(v,bb,model) {
sigmoid( bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) ) )
}
prop_down.t <- function(h, bb, base_model, model) {
sigmoid( (1-bb) * rep.row(base_model$vis_bias, nrow(h)) + bb*(h %*% t(model$W) + rep.row(model$vis_bias,nrow(h)) ) )
}
free_energy.t <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias)) - sum.col(log(1+exp(bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) )) ) )
}
free_energy.t.base <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias))
}
log_p_k <- function(v, bb, base_model, model) {
-free_energy.t.base(v,(1-bb),base_model) -free_energy.t(v,bb,model)
}
bb <- betas[1]
bb
i <- 1
v.m <- rep.row(sigmoid(base_model$vis_bias), numruns)
v.m
v <- sample_bernoulli(v.m)
logw <- log_p_k(v, bb, base_model,model)
logw
v
logw
mean(logw)
free_energy.t.base(v,(1-bb),base_model)
free_energy.t(v,bb,model)
free_energy.t.base(v,(1-bb),base_model)
bb
bb
- bb*(v %*% t(model$vis_bias))
exp(bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v))
log(1+exp(bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) )) )
log(1+exp(bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) ))
)
sum.col(log(1+exp(bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) )) ) )
source('~/my/git/alexeyche-junk/ml/dbn/ais_my2.R', echo=TRUE)
#!/usr/bin/RScript
source('sys.R')
source('rbm.R')
source('dbn_util.R')
betas <- c(seq(0,0.5,by=1e-03), seq(0.5,0.9,by=1e-04), seq(0.9,1,by=1e-04))
numruns <- 100
c(num.vis, num.hid) := dim(model$W)
log_base_rate <- log(colMeans(data.all)) - log(1-colMeans(data.all))
# init base_model
base_model <- list(W = array(0,dim=c(num.vis,num.hid)), # visible units for row, hidden units for col
vis_bias = array(log_base_rate, dim=c(1,num.vis)),
hid_bias = array(0,dim = c(1,num.hid)),
num.cases = numruns)
prop_up.t <- function(v,bb,model) {
sigmoid( bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) ) )
}
prop_down.t <- function(h, bb, base_model, model) {
sigmoid( (1-bb) * rep.row(base_model$vis_bias, nrow(h)) + bb*(h %*% t(model$W) + rep.row(model$vis_bias,nrow(h)) ) )
}
free_energy.t <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias)) - sum.col(log(1+exp(bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) )) ) )
}
free_energy.t.base <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias))
}
log_p_k <- function(v, bb, base_model, model) {
-free_energy.t.base(v,(1-bb),base_model) -free_energy.t(v,bb,model)
}
# init first logw
bb <- betas[1]
i <- 1
v.m <- rep.row(sigmoid(base_model$vis_bias), numruns)
v <- sample_bernoulli(v.m)
logw <- log_p_k(v, bb, base_model,model)
bb_i <- 2
bb <- betas[bb_i]
b
bb
free_energy.t.base(v,(1-bb),base_model)
-free_energy.t.base(v,(1-bb),base_model)
free_energy.t(v,bb,model)
v
-free_energy.t(v,bb,model)
bb
v %*% t(model$vis_bias)
sum.col(log(1+exp(bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) )) ) )
bb
- bb*(v %*% t(model$vis_bias)) - sum.col(log(1+exp(bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) )) ) )
sum.col(log(1+exp(bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) )) ) )
-free_energy.t.base(v,(1-bb),base_model) -free_energy.t(v,bb,model)
-free_energy.t.base(v,(1-bb),base_model)
-free_energy.t(v,bb,model)
-free_energy.t.base(v,(1-bb),base_model)
free_energy.t(v,bb,model)
-free_energy.t(v,bb,model)
-free_energy.t.base(v,(1-bb),base_model) -free_energy.t(v,bb,model)
logw <- logw + log_p_k(v, bb, base_model,model)
mean(logw)
#!/usr/bin/RScript
source('sys.R')
source('rbm.R')
source('dbn_util.R')
betas <- c(seq(0,0.5,by=1e-03), seq(0.5,0.9,by=1e-04), seq(0.9,1,by=1e-04))
numruns <- 100
c(num.vis, num.hid) := dim(model$W)
log_base_rate <- log(colMeans(data.all)) - log(1-colMeans(data.all))
# init base_model
base_model <- list(W = array(0,dim=c(num.vis,num.hid)), # visible units for row, hidden units for col
vis_bias = array(log_base_rate, dim=c(1,num.vis)),
hid_bias = array(0,dim = c(1,num.hid)),
num.cases = numruns)
prop_up.t <- function(v,bb,model) {
sigmoid( bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) ) )
}
prop_down.t <- function(h, bb, base_model, model) {
sigmoid( (1-bb) * rep.row(base_model$vis_bias, nrow(h)) + bb*(h %*% t(model$W) + rep.row(model$vis_bias,nrow(h)) ) )
}
free_energy.t <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias)) - sum.col(log(1+exp(bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) )) ) )
}
free_energy.t.base <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias))
}
log_p_k <- function(v, bb, base_model, model) {
-free_energy.t.base(v,(1-bb),base_model) -free_energy.t(v,bb,model)
}
# init first logw
bb <- betas[1]
i <- 1
v.m <- rep.row(sigmoid(base_model$vis_bias), numruns)
v <- sample_bernoulli(v.m)
logw <- log_p_k(v, bb, base_model,model)
mean(logw)
logw
mean(logw)
v.m <- rep.row(sigmoid(base_model$vis_bias), numruns)
v <- sample_bernoulli(v.m)
logw <- log_p_k(v, bb, base_model,model)
logw
mean(logw)
bb <- betas[1]
i <- 1
v.m <- rep.row(sigmoid(base_model$vis_bias), numruns)
v <- sample_bernoulli(v.m)
logw <- log_p_k(v, bb, base_model,model)
mean(logw)
logw <- -log_p_k(v, bb, base_model,model)
logw
mean(logw)
#!/usr/bin/RScript
source('sys.R')
source('rbm.R')
source('dbn_util.R')
betas <- c(seq(0,0.5,by=1e-03), seq(0.5,0.9,by=1e-04), seq(0.9,1,by=1e-04))
numruns <- 100
c(num.vis, num.hid) := dim(model$W)
log_base_rate <- log(colMeans(data.all)) - log(1-colMeans(data.all))
# init base_model
base_model <- list(W = array(0,dim=c(num.vis,num.hid)), # visible units for row, hidden units for col
vis_bias = array(log_base_rate, dim=c(1,num.vis)),
hid_bias = array(0,dim = c(1,num.hid)),
num.cases = numruns)
prop_up.t <- function(v,bb,model) {
sigmoid( bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) ) )
}
prop_down.t <- function(h, bb, base_model, model) {
sigmoid( (1-bb) * rep.row(base_model$vis_bias, nrow(h)) + bb*(h %*% t(model$W) + rep.row(model$vis_bias,nrow(h)) ) )
}
free_energy.t <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias)) - sum.col(log(1+exp(bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) )) ) )
}
free_energy.t.base <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias))
}
log_p_k <- function(v, bb, base_model, model) {
-free_energy.t.base(v,(1-bb),base_model) -free_energy.t(v,bb,model)
}
# init first logw
bb <- betas[1]
i <- 1
v.m <- rep.row(sigmoid(base_model$vis_bias), numruns)
v <- sample_bernoulli(v.m)
logw <- -log_p_k(v, bb, base_model,model)
mean(logw)
#!/usr/bin/RScript
source('sys.R')
source('rbm.R')
source('dbn_util.R')
betas <- c(seq(0,0.5,by=1e-03), seq(0.5,0.9,by=1e-04), seq(0.9,1,by=1e-04))
numruns <- 100
c(num.vis, num.hid) := dim(model$W)
log_base_rate <- log(colMeans(data.all)) - log(1-colMeans(data.all))
# init base_model
base_model <- list(W = array(0,dim=c(num.vis,num.hid)), # visible units for row, hidden units for col
vis_bias = array(log_base_rate, dim=c(1,num.vis)),
hid_bias = array(0,dim = c(1,num.hid)),
num.cases = numruns)
prop_up.t <- function(v,bb,model) {
sigmoid( bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) ) )
}
prop_down.t <- function(h, bb, base_model, model) {
sigmoid( (1-bb) * rep.row(base_model$vis_bias, nrow(h)) + bb*(h %*% t(model$W) + rep.row(model$vis_bias,nrow(h)) ) )
}
free_energy.t <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias)) - sum.col(log(1+exp(bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) )) ) )
}
free_energy.t.base <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias))
}
log_p_k <- function(v, bb, base_model, model) {
-free_energy.t.base(v,(1-bb),base_model) -free_energy.t(v,bb,model)
}
# init first logw
bb <- betas[1]
i <- 1
v.m <- rep.row(sigmoid(base_model$vis_bias), numruns)
v <- sample_bernoulli(v.m)
logw <- -log_p_k(v, bb, base_model,model)
mean(logw)
#!/usr/bin/RScript
source('sys.R')
source('rbm.R')
source('dbn_util.R')
betas <- c(seq(0,0.5,by=1e-03), seq(0.5,0.9,by=1e-04), seq(0.9,1,by=1e-04))
numruns <- 100
c(num.vis, num.hid) := dim(model$W)
log_base_rate <- log(colMeans(data.all)) - log(1-colMeans(data.all))
# init base_model
base_model <- list(W = array(0,dim=c(num.vis,num.hid)), # visible units for row, hidden units for col
vis_bias = array(log_base_rate, dim=c(1,num.vis)),
hid_bias = array(0,dim = c(1,num.hid)),
num.cases = numruns)
prop_up.t <- function(v,bb,model) {
sigmoid( bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) ) )
}
prop_down.t <- function(h, bb, base_model, model) {
sigmoid( (1-bb) * rep.row(base_model$vis_bias, nrow(h)) + bb*(h %*% t(model$W) + rep.row(model$vis_bias,nrow(h)) ) )
}
free_energy.t <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias)) - sum.col(log(1+exp(bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) )) ) )
}
free_energy.t.base <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias))
}
log_p_k <- function(v, bb, base_model, model) {
-free_energy.t.base(v,(1-bb),base_model) -free_energy.t(v,bb,model)
}
# init first logw
bb <- betas[1]
i <- 1
v.m <- rep.row(sigmoid(base_model$vis_bias), numruns)
v <- sample_bernoulli(v.m)
logw <- -log_p_k(v, bb, base_model,model)
mean(logw)
#!/usr/bin/RScript
source('sys.R')
source('rbm.R')
source('dbn_util.R')
betas <- c(seq(0,0.5,by=1e-03), seq(0.5,0.9,by=1e-04), seq(0.9,1,by=1e-04))
numruns <- 100
c(num.vis, num.hid) := dim(model$W)
log_base_rate <- log(colMeans(data.all)) - log(1-colMeans(data.all))
# init base_model
base_model <- list(W = array(0,dim=c(num.vis,num.hid)), # visible units for row, hidden units for col
vis_bias = array(log_base_rate, dim=c(1,num.vis)),
hid_bias = array(0,dim = c(1,num.hid)),
num.cases = numruns)
prop_up.t <- function(v,bb,model) {
sigmoid( bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) ) )
}
prop_down.t <- function(h, bb, base_model, model) {
sigmoid( (1-bb) * rep.row(base_model$vis_bias, nrow(h)) + bb*(h %*% t(model$W) + rep.row(model$vis_bias,nrow(h)) ) )
}
free_energy.t <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias)) - sum.col(log(1+exp(bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) )) ) )
}
free_energy.t.base <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias))
}
log_p_k <- function(v, bb, base_model, model) {
-free_energy.t.base(v,(1-bb),base_model) -free_energy.t(v,bb,model)
}
# init first logw
bb <- betas[1]
i <- 1
v.m <- rep.row(sigmoid(base_model$vis_bias), numruns)
v <- sample_bernoulli(v.m)
logw <- -log_p_k(v, bb, base_model,model)
mean(logw)
#!/usr/bin/RScript
source('sys.R')
source('rbm.R')
source('dbn_util.R')
betas <- c(seq(0,0.5,by=1e-03), seq(0.5,0.9,by=1e-04), seq(0.9,1,by=1e-04))
numruns <- 100
c(num.vis, num.hid) := dim(model$W)
log_base_rate <- log(colMeans(data.all)) - log(1-colMeans(data.all))
# init base_model
base_model <- list(W = array(0,dim=c(num.vis,num.hid)), # visible units for row, hidden units for col
vis_bias = array(log_base_rate, dim=c(1,num.vis)),
hid_bias = array(0,dim = c(1,num.hid)),
num.cases = numruns)
prop_up.t <- function(v,bb,model) {
sigmoid( bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) ) )
}
prop_down.t <- function(h, bb, base_model, model) {
sigmoid( (1-bb) * rep.row(base_model$vis_bias, nrow(h)) + bb*(h %*% t(model$W) + rep.row(model$vis_bias,nrow(h)) ) )
}
free_energy.t <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias)) - sum.col(log(1+exp(bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) )) ) )
}
free_energy.t.base <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias))
}
log_p_k <- function(v, bb, base_model, model) {
-free_energy.t.base(v,(1-bb),base_model) -free_energy.t(v,bb,model)
}
# init first logw
bb <- betas[1]
i <- 1
v.m <- rep.row(sigmoid(base_model$vis_bias), numruns)
v <- sample_bernoulli(v.m)
logw <- -log_p_k(v, bb, base_model,model)
mean(logw)
#!/usr/bin/RScript
source('sys.R')
source('rbm.R')
source('dbn_util.R')
betas <- c(seq(0,0.5,by=1e-03), seq(0.5,0.9,by=1e-04), seq(0.9,1,by=1e-04))
numruns <- 100
c(num.vis, num.hid) := dim(model$W)
log_base_rate <- log(colMeans(data.all)) - log(1-colMeans(data.all))
# init base_model
base_model <- list(W = array(0,dim=c(num.vis,num.hid)), # visible units for row, hidden units for col
vis_bias = array(log_base_rate, dim=c(1,num.vis)),
hid_bias = array(0,dim = c(1,num.hid)),
num.cases = numruns)
prop_up.t <- function(v,bb,model) {
sigmoid( bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) ) )
}
prop_down.t <- function(h, bb, base_model, model) {
sigmoid( (1-bb) * rep.row(base_model$vis_bias, nrow(h)) + bb*(h %*% t(model$W) + rep.row(model$vis_bias,nrow(h)) ) )
}
free_energy.t <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias)) - sum.col(log(1+exp(bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) )) ) )
}
free_energy.t.base <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias))
}
log_p_k <- function(v, bb, base_model, model) {
-free_energy.t.base(v,(1-bb),base_model) -free_energy.t(v,bb,model)
}
# init first logw
bb <- betas[1]
i <- 1
v.m <- rep.row(sigmoid(base_model$vis_bias), numruns)
v <- sample_bernoulli(v.m)
logw <- -log_p_k(v, bb, base_model,model)
mean(logw)
source('~/my/git/alexeyche-junk/ml/dbn/ais_my2.R', echo=TRUE)
log_z_est
log_prob(data.all, log_z_true, model)
log_prob(data.all, log_z_est, model)
source('~/my/git/alexeyche-junk/ml/dbn/ais_my2.R', echo=TRUE)
source('~/my/git/alexeyche-junk/ml/dbn/rbm_toy.R', echo=TRUE)
source('~/my/git/alexeyche-junk/ml/dbn/ais_my2.R', echo=TRUE)
source('~/my/git/alexeyche-junk/ml/dbn/true_partition.R', echo=TRUE)
log_prob
sum(log_prob)
log(sum(log_prob))
log(exp(sum(log_prob)))
exp(log_prob)
sum(exp(log_prob))
log(sum(exp(log_prob)))
sum(exp(log_prob))
source('~/my/git/alexeyche-junk/ml/dbn/ais_tools.R', echo=TRUE)
calc_log_probs(data.all,model,log_z_est)
data.all
data.all %*% model%W
data.all %*% model$W
calc_log_probs <- function(data,model,log_z) {
p_asterisk <- data %*% t(model$vis_bias) + sum.col(log(1+exp( data %*% model$W + rep.row(model$hid_bias,nrow(data)) )) )
return(mean(log_p_asterisk) - log_z)
}
calc_log_probs(data.all,model,log_z_est)
calc_log_probs <- function(data,model,log_z) {
log_p_asterisk <- data %*% t(model$vis_bias) + sum.col(log(1+exp( data %*% model$W + rep.row(model$hid_bias,nrow(data)) )) )
return(mean(log_p_asterisk) - log_z)
}
calc_log_probs(data.all,model,log_z_est)
calc_log_probs(data.all,model,log_z_true)
source('~/.active-rstudio-document', echo=TRUE)
log_z_est
calc_true_log_z(model)
calc_true_log_z <- function(model) {
c(num.vis, num.hid) := dim(model$W)
num_cases <- 2^num.hid
x <- c(0:(num_cases-1))
h <- int_to_bin(x)
log_prob <- h %*% t(model$hid_bias) +  sum.col(log(1+exp( h %*% t(model$W) + rep.row(model$vis_bias,num_cases) )) )
log_z_true <- logsum(log_prob)
return(log_z_true)
}
calc_true_log_z(model)
calc_log_probs(data.all, model, log_z_est)
