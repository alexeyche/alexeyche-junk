c(num.vis, num.hid) := dim(model$W)
log_base_rate <- log(colMeans(data.all)) - log(1-colMeans(data.all))
# init base_model
base_model <- list(W = array(0,dim=c(num.vis,num.hid)), # visible units for row, hidden units for col
vis_bias = array(log_base_rate, dim=c(1,num.vis)),
hid_bias = array(0,dim = c(1,num.hid)),
num.cases = numruns)
prop_up.t <- function(v,bb,model) {
sigmoid( bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) ) )
}
prop_down.t <- function(h, bb, base_model, model) {
sigmoid( (1-bb) * rep.row(base_model$vis_bias, nrow(h)) + bb*(h %*% t(model$W) + rep.row(model$vis_bias,nrow(h)) ) )
}
free_energy.t <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias)) - sum.col(log(1+exp(bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) )) ) )
}
free_energy.t.base <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias))
}
log_p_k <- function(v, bb, base_model, model) {
-free_energy.t.base(v,(1-bb),base_model) -free_energy.t(v,bb,model)
}
# init first logw
bb <- betas[1]
i <- 1
v.m <- rep.row(sigmoid(base_model$vis_bias), numruns)
v <- sample_bernoulli(v.m)
logw <- -log_p_k(v, bb, base_model,model)
mean(logw)
source('~/my/git/alexeyche-junk/ml/dbn/ais_my2.R', echo=TRUE)
source('~/my/git/alexeyche-junk/ml/dbn/ais_my2.R', echo=TRUE)
logw
source('~/my/git/alexeyche-junk/ml/dbn/rbm_toy.R', echo=TRUE)
vis_sample.fantasy
model$W <- read.csv("/home/alexeyche/tmp/W_vals", sep=",", row.names=FALSE, col.names=FALSE)
?read.csv
model$W <- read.table("/home/alexeyche/tmp/W_vals", sep=",", row.names=FALSE, col.names=FALSE)
model$W <- read.csv("/home/alexeyche/tmp/W_vals", sep=",")
model$W
model$W <- as.matrix(read.csv("/home/alexeyche/tmp/W_vals", sep=","))
model$W
model$W[0]
model$W[0,]
model$W[1,]
model$W[1,1]
as.matrix(read.table("/home/alexeyche/tmp/W_vals", sep=","))
model$W <- as.matrix(read.table("/home/alexeyche/tmp/W_vals", sep=","))
model$W
str(model$W)
model$W[1,1]
model$W[1,]
model$W <- as.matrix(read.table("/home/alexeyche/tmp/W_vals", sep=","))
model$vis_bias <- as.matrix(read.table("/home/alexeyche/tmp/vis_bias_vals", sep=","))
model$hid_bias <- as.matrix(read.table("/home/alexeyche/tmp/hid_bias_vals", sep=","))
source('~/my/git/alexeyche-junk/ml/dbn/ais_my2.R', echo=TRUE)
model$vis_bias <- matrix(read.table("/home/alexeyche/tmp/vis_bias_vals", sep=","), nrow=1)
model$hid_bias <- matrix(read.table("/home/alexeyche/tmp/hid_bias_vals", sep=","), nrow=1)
model$vis_bias
read.table("/home/alexeyche/tmp/hid_bias_vals", sep=",")
model$vis_bias <- matrix(read.table("/home/alexeyche/tmp/vis_bias_vals", sep=","), ncol=num.vis)
model$vis_bias
read.table("/home/alexeyche/tmp/vis_bias_vals", sep=",")
model$vis_bias <- t(read.table("/home/alexeyche/tmp/vis_bias_vals", sep=","))
model$vis_bias
model$vis_bias <- t(read.table("/home/alexeyche/tmp/vis_bias_vals", sep=","))
model$hid_bias <- t(read.table("/home/alexeyche/tmp/hid_bias_vals", sep=","))
source('~/my/git/alexeyche-junk/ml/dbn/ais_my2.R', echo=TRUE)
mean(logw)
#!/usr/bin/RScript
source('sys.R')
source('rbm.R')
source('ais_tools.R')
betas <- c(seq(0,0.5,by=1e-03), seq(0.5,0.9,by=1e-04), seq(0.9,1,by=1e-04))
numruns <- 1000
c(num.vis, num.hid) := dim(model$W)
log_base_rate <- log(colMeans(data.all)) - log(1-colMeans(data.all))
# init base_model
base_model <- list(W = array(0,dim=c(num.vis,num.hid)), # visible units for row, hidden units for col
vis_bias = array(log_base_rate, dim=c(1,num.vis)),
hid_bias = array(0,dim = c(1,num.hid)),
num.cases = numruns)
prop_up.t <- function(v,bb,model) {
sigmoid( bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) ) )
}
prop_down.t <- function(h, bb, base_model, model) {
sigmoid( (1-bb) * rep.row(base_model$vis_bias, nrow(h)) + bb*(h %*% t(model$W) + rep.row(model$vis_bias,nrow(h)) ) )
}
free_energy.t <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias)) - sum.col(log(1+exp(bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) )) ) )
}
free_energy.t.base <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias))
}
log_p_k <- function(v, bb, base_model, model) {
-free_energy.t.base(v,(1-bb),base_model) -free_energy.t(v,bb,model)
}
# init first logw
bb <- betas[1]
i <- 1
v.m <- rep.row(sigmoid(base_model$vis_bias), numruns)
v <- sample_bernoulli(v.m)
logw <- -log_p_k(v, bb, base_model,model)
mean(logw)
log_base_rate
log_base_rate
?rep
log_base_rate <- rep(0, num.vis)
# init base_model
log_base_rate
base_model <- list(W = array(0,dim=c(num.vis,num.hid)), # visible units for row, hidden units for col
vis_bias = array(log_base_rate, dim=c(1,num.vis)),
hid_bias = array(0,dim = c(1,num.hid)),
num.cases = numruns)
base_model
#!/usr/bin/RScript
source('sys.R')
source('rbm.R')
source('ais_tools.R')
betas <- c(seq(0,0.5,by=1e-03), seq(0.5,0.9,by=1e-04), seq(0.9,1,by=1e-04))
numruns <- 1000
c(num.vis, num.hid) := dim(model$W)
log_base_rate <- rep(0, num.vis) # log(colMeans(data.all)) - log(1-colMeans(data.all))
# init base_model
base_model <- list(W = array(0,dim=c(num.vis,num.hid)), # visible units for row, hidden units for col
vis_bias = array(log_base_rate, dim=c(1,num.vis)),
hid_bias = array(0,dim = c(1,num.hid)),
num.cases = numruns)
prop_up.t <- function(v,bb,model) {
sigmoid( bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) ) )
}
prop_down.t <- function(h, bb, base_model, model) {
sigmoid( (1-bb) * rep.row(base_model$vis_bias, nrow(h)) + bb*(h %*% t(model$W) + rep.row(model$vis_bias,nrow(h)) ) )
}
free_energy.t <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias)) - sum.col(log(1+exp(bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) )) ) )
}
free_energy.t.base <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias))
}
log_p_k <- function(v, bb, base_model, model) {
-free_energy.t.base(v,(1-bb),base_model) -free_energy.t(v,bb,model)
}
# init first logw
bb <- betas[1]
i <- 1
v.m <- rep.row(sigmoid(base_model$vis_bias), numruns)
v <- sample_bernoulli(v.m)
logw <- -log_p_k(v, bb, base_model,model)
logw
free_energy.t.base(v,(1-bb),base_model)
free_energy.t(v,bb,model)
source('~/my/git/alexeyche-junk/ml/dbn/ais_my2.R', echo=TRUE)
logw
mean(logw)
model$W
model$W <- as.matrix(read.table("/home/alexeyche/tmp/W_vals", sep=","))
model$vis_bias <- t(read.table("/home/alexeyche/tmp/vis_bias_vals", sep=","))
model$hid_bias <- t(read.table("/home/alexeyche/tmp/hid_bias_vals", sep=","))
is.matrix(model$W)
betas
length(betas)
model$W <- as.matrix(read.table("/home/alexeyche/tmp/W_vals", sep=","))
model$vis_bias <- t(read.table("/home/alexeyche/tmp/vis_bias_vals", sep=","))
model$hid_bias <- t(read.table("/home/alexeyche/tmp/hid_bias_vals", sep=","))
model <- list(W = array(0.1*rnorm(num.vis*num.hid,mean=0.5,sd=0.3),dim=c(num.vis,num.hid)), # visible units for row, hidden units for col
vis_bias = array(0,dim = c(1,num.vis)),
hid_bias = array(0,dim = c(1,num.hid)),
num.cases = num.cases, batch.size = batch.size)
#!/usr/bin/RScript
source('rbm.R')
source('sys.R')
source('makebatches.R')
source('dbn_util.R')
set.seed(2)
num.vis <- 10
num.hid <- 15
num.dims <- num.vis
num.cases <- 500
batch.size <- 50
# gen data
data.all <- NULL
for(c in 1:num.cases) {
m <- matrix(0, ncol = num.dims)
p <- sample(seq(0.1,0.9,length.out=10),1)
c <- sample(3,1)
for(j in 1:c) {
rb <- rbinom(10,10,p)
for(i in 1:length(rb)) {
m[rb[i]] = m[rb[i]]+1
}
}
m <- m/max(m)
data.all <- rbind(data.all, m)
}
c(data.b, data.b.t) := makebatches(data = data.all, target.data = data.all, batch.size = batch.size, normalize=FALSE)
num.batches <- dim(data.b)[3]
# init model
train.params = list(e.w = 0.1, e.v = 0.1, e.h = 0.1, w_cost = 0.0002,
init.moment = 0.5, fin.moment = 0.9,
epochs = 1000, cd.iter = 3, persistent = TRUE)
#model <- train_rbm(data.b, train.params, num.hid)
#test <- matrix(0, ncol = num.vis, nrow=100)
#hid_probs <- prop_up(test, model)
#plot(energy_all(test,hid_probs,model), type = 'l')
model <- list(W = array(0.1*rnorm(num.vis*num.hid,mean=0.5,sd=0.3),dim=c(num.vis,num.hid)), # visible units for row, hidden units for col
vis_bias = array(0,dim = c(1,num.vis)),
hid_bias = array(0,dim = c(1,num.hid)),
num.cases = num.cases, batch.size = batch.size)
model$W <- as.matrix(read.table("/home/alexeyche/tmp/W_vals", sep=","))
model$vis_bias <- t(read.table("/home/alexeyche/tmp/vis_bias_vals", sep=","))
model$hid_bias <- t(read.table("/home/alexeyche/tmp/hid_bias_vals", sep=","))
#!/usr/bin/RScript
source('sys.R')
source('rbm.R')
source('ais_tools.R')
betas <- c(seq(0,0.5,by=1e-03), seq(0.5,0.9,by=1e-04), seq(0.9,1,by=1e-04))
numruns <- 1000
c(num.vis, num.hid) := dim(model$W)
log_base_rate <- rep(0, num.vis) # log(colMeans(data.all)) - log(1-colMeans(data.all))
# init base_model
base_model <- list(W = array(0,dim=c(num.vis,num.hid)), # visible units for row, hidden units for col
vis_bias = array(log_base_rate, dim=c(1,num.vis)),
hid_bias = array(0,dim = c(1,num.hid)),
num.cases = numruns)
prop_up.t <- function(v,bb,model) {
sigmoid( bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) ) )
}
prop_down.t <- function(h, bb, base_model, model) {
sigmoid( (1-bb) * rep.row(base_model$vis_bias, nrow(h)) + bb*(h %*% t(model$W) + rep.row(model$vis_bias,nrow(h)) ) )
}
free_energy.t <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias)) - sum.col(log(1+exp(bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) )) ) )
}
free_energy.t.base <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias))
}
log_p_k <- function(v, bb, base_model, model) {
-free_energy.t.base(v,(1-bb),base_model) -free_energy.t(v,bb,model)
}
# init first logw
bb <- betas[1]
i <- 1
v.m <- rep.row(sigmoid(base_model$vis_bias), numruns)
v <- sample_bernoulli(v.m)
logw <- -log_p_k(v, bb, base_model,model)
logw
bb_i <- 2
bb <- betas[bb_i]
i <- i+1
logw <- logw + log_p_k(v, bb, base_model,model)
if(i %% 500 == 0) {
cat("var log_w: ", var(logw), " (", i/length(betas),")\n")
}
h.m <- prop_up.t(v, bb, model)
h <- sample_bernoulli(h.m)
v.m <- prop_down.t(h, bb, base_model, model)
v <- sample_bernoulli(v.m)
logw <- logw - log_p_k(v, bb, base_model, model)
logw
bb_i <- 3
bb <- betas[bb_i]
i <- i+1
logw <- logw + log_p_k(v, bb, base_model,model)
if(i %% 500 == 0) {
cat("var log_w: ", var(logw), " (", i/length(betas),")\n")
}
h.m <- prop_up.t(v, bb, model)
h <- sample_bernoulli(h.m)
v.m <- prop_down.t(h, bb, base_model, model)
v <- sample_bernoulli(v.m)
logw <- logw - log_p_k(v, bb, base_model, model)
logw
#!/usr/bin/RScript
source('sys.R')
source('rbm.R')
source('ais_tools.R')
betas <- c(seq(0,0.5,by=1e-03), seq(0.5,0.9,by=1e-04), seq(0.9,1,by=1e-04))
numruns <- 100
c(num.vis, num.hid) := dim(model$W)
log_base_rate <- rep(0, num.vis) # log(colMeans(data.all)) - log(1-colMeans(data.all))
# init base_model
base_model <- list(W = array(0,dim=c(num.vis,num.hid)), # visible units for row, hidden units for col
vis_bias = array(log_base_rate, dim=c(1,num.vis)),
hid_bias = array(0,dim = c(1,num.hid)),
num.cases = numruns)
prop_up.t <- function(v,bb,model) {
sigmoid( bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) ) )
}
prop_down.t <- function(h, bb, base_model, model) {
sigmoid( (1-bb) * rep.row(base_model$vis_bias, nrow(h)) + bb*(h %*% t(model$W) + rep.row(model$vis_bias,nrow(h)) ) )
}
free_energy.t <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias)) - sum.col(log(1+exp(bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) )) ) )
}
free_energy.t.base <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias))
}
log_p_k <- function(v, bb, base_model, model) {
-free_energy.t.base(v,(1-bb),base_model) -free_energy.t(v,bb,model)
}
# init first logw
bb <- betas[1]
i <- 1
v.m <- rep.row(sigmoid(base_model$vis_bias), numruns)
v <- sample_bernoulli(v.m)
logw <- -log_p_k(v, bb, base_model,model)
logw
source('~/my/git/alexeyche-junk/ml/dbn/ais_my2.R', echo=TRUE)
source('~/my/git/alexeyche-junk/ml/dbn/ais_my2.R', echo=TRUE)
source('~/my/git/alexeyche-junk/ml/dbn/ais_my2.R', echo=TRUE)
#!/usr/bin/RScript
source('sys.R')
source('rbm.R')
source('ais_tools.R')
betas <- c(seq(0,0.5,by=1e-03), seq(0.5,0.9,by=1e-04), seq(0.9,1,by=1e-04))
numruns <- 100
c(num.vis, num.hid) := dim(model$W)
log_base_rate <- rep(0, num.vis) # log(colMeans(data.all)) - log(1-colMeans(data.all))
# init base_model
base_model <- list(W = array(0,dim=c(num.vis,num.hid)), # visible units for row, hidden units for col
vis_bias = array(log_base_rate, dim=c(1,num.vis)),
hid_bias = array(0,dim = c(1,num.hid)),
num.cases = numruns)
prop_up.t <- function(v,bb,model) {
sigmoid( bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) ) )
}
prop_down.t <- function(h, bb, base_model, model) {
sigmoid( (1-bb) * rep.row(base_model$vis_bias, nrow(h)) + bb*(h %*% t(model$W) + rep.row(model$vis_bias,nrow(h)) ) )
}
free_energy.t <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias)) - sum.col(log(1+exp(bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) )) ) )
}
free_energy.t.base <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias))
}
log_p_k <- function(v, bb, base_model, model) {
-free_energy.t.base(v,(1-bb),base_model) -free_energy.t(v,bb,model)
}
# init first logw
bb <- betas[1]
i <- 1
v.m <- rep.row(sigmoid(base_model$vis_bias), numruns)
v <- sample_bernoulli(v.m)
logw <- -log_p_k(v, bb, base_model,model)
logw
bb_i <- 2
bb <- betas[bb_i]
i <- i+1
logw <- logw + log_p_k(v, bb, base_model,model)
logw
log_p_k(v, 1, base_model,model)
#!/usr/bin/RScript
source('sys.R')
source('rbm.R')
source('ais_tools.R')
betas <- c(seq(0,0.5,by=1e-03), seq(0.5,0.9,by=1e-04), seq(0.9,1,by=1e-04))
numruns <- 100
c(num.vis, num.hid) := dim(model$W)
log_base_rate <- rep(0, num.vis) # log(colMeans(data.all)) - log(1-colMeans(data.all))
# init base_model
base_model <- list(W = array(0,dim=c(num.vis,num.hid)), # visible units for row, hidden units for col
vis_bias = array(log_base_rate, dim=c(1,num.vis)),
hid_bias = array(0,dim = c(1,num.hid)),
num.cases = numruns)
prop_up.t <- function(v,bb,model) {
sigmoid( bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) ) )
}
prop_down.t <- function(h, bb, base_model, model) {
sigmoid( (1-bb) * rep.row(base_model$vis_bias, nrow(h)) + bb*(h %*% t(model$W) + rep.row(model$vis_bias,nrow(h)) ) )
}
free_energy.t <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias)) - sum.col(log(1+exp(bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) )) ) )
}
free_energy.t.base <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias))
}
log_p_k <- function(v, bb, base_model, model) {
-free_energy.t.base(v,(1-bb),base_model) -free_energy.t(v,bb,model)
}
# init first logw
bb <- betas[1]
i <- 1
v.m <- rep.row(sigmoid(base_model$vis_bias), numruns)
v <- sample_bernoulli(v.m)
logw <- -log_p_k(v, bb, base_model,model)
for( bb_i in seq(2, length(betas)-1) ) {
bb <- betas[bb_i]
i <- i+1
logw <- logw + log_p_k(v, bb, base_model,model)
if(i %% 1 == 0) {
cat("mean log_w: ", mean(logw), " (", i/length(betas),")\n")
}
h.m <- prop_up.t(v, bb, model)
h <- sample_bernoulli(h.m)
v.m <- prop_down.t(h, bb, base_model, model)
v <- sample_bernoulli(v.m)
logw <- logw - log_p_k(v, bb, base_model, model)
}
#!/usr/bin/RScript
source('sys.R')
source('rbm.R')
source('ais_tools.R')
betas <- c(seq(0,0.5,by=1e-03), seq(0.5,0.9,by=1e-04), seq(0.9,1,by=1e-04))
numruns <- 100
c(num.vis, num.hid) := dim(model$W)
log_base_rate <- rep(0, num.vis) # log(colMeans(data.all)) - log(1-colMeans(data.all))
# init base_model
base_model <- list(W = array(0,dim=c(num.vis,num.hid)), # visible units for row, hidden units for col
vis_bias = array(log_base_rate, dim=c(1,num.vis)),
hid_bias = array(0,dim = c(1,num.hid)),
num.cases = numruns)
prop_up.t <- function(v,bb,model) {
sigmoid( bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) ) )
}
prop_down.t <- function(h, bb, base_model, model) {
sigmoid( (1-bb) * rep.row(base_model$vis_bias, nrow(h)) + bb*(h %*% t(model$W) + rep.row(model$vis_bias,nrow(h)) ) )
}
free_energy.t <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias)) - sum.col(log(1+exp(bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) )) ) )
}
free_energy.t.base <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias))
}
log_p_k <- function(v, bb, base_model, model) {
-free_energy.t.base(v,(1-bb),base_model) -free_energy.t(v,bb,model)
}
# init first logw
bb <- betas[1]
i <- 1
v.m <- rep.row(sigmoid(base_model$vis_bias), numruns)
v <- sample_bernoulli(v.m)
logw <- -log_p_k(v, bb, base_model,model)
for( bb_i in seq(2, length(betas)-1) ) {
bb <- betas[bb_i]
i <- i+1
logw <- logw + log_p_k(v, bb, base_model,model)
if(i %% 1 == 500) {
cat("mean log_w: ", mean(logw), " (", i/length(betas),")\n")
}
h.m <- prop_up.t(v, bb, model)
h <- sample_bernoulli(h.m)
v.m <- prop_down.t(h, bb, base_model, model)
v <- sample_bernoulli(v.m)
logw <- logw - log_p_k(v, bb, base_model, model)
}
log_p_k(v, 1, base_model,model)
v
model$W <- as.matrix(read.table("/home/alexeyche/tmp/W_vals", sep=","))
model$vis_bias <- t(read.table("/home/alexeyche/tmp/vis_bias_vals", sep=","))
model$hid_bias <- t(read.table("/home/alexeyche/tmp/hid_bias_vals", sep=","))
model$W
#!/usr/bin/RScript
source('sys.R')
source('rbm.R')
source('ais_tools.R')
betas <- c(seq(0,0.5,by=1e-03), seq(0.5,0.9,by=1e-04), seq(0.9,1,by=1e-04))
numruns <- 100
c(num.vis, num.hid) := dim(model$W)
log_base_rate <- rep(0, num.vis) # log(colMeans(data.all)) - log(1-colMeans(data.all))
# init base_model
base_model <- list(W = array(0,dim=c(num.vis,num.hid)), # visible units for row, hidden units for col
vis_bias = array(log_base_rate, dim=c(1,num.vis)),
hid_bias = array(0,dim = c(1,num.hid)),
num.cases = numruns)
prop_up.t <- function(v,bb,model) {
sigmoid( bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) ) )
}
prop_down.t <- function(h, bb, base_model, model) {
sigmoid( (1-bb) * rep.row(base_model$vis_bias, nrow(h)) + bb*(h %*% t(model$W) + rep.row(model$vis_bias,nrow(h)) ) )
}
free_energy.t <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias)) - sum.col(log(1+exp(bb * (v %*% model$W + rep.row(model$hid_bias,nrow(v)) )) ) )
}
free_energy.t.base <- function(v,bb,model) {
- bb*(v %*% t(model$vis_bias))
}
log_p_k <- function(v, bb, base_model, model) {
-free_energy.t.base(v,(1-bb),base_model) -free_energy.t(v,bb,model)
}
# init first logw
bb <- betas[1]
i <- 1
v.m <- rep.row(sigmoid(base_model$vis_bias), numruns)
v <- sample_bernoulli(v.m)
logw <- -log_p_k(v, bb, base_model,model)
logw
bb_i <- 2
log_p_k(v, bb, base_model,model)
bb <- betas[bb_i]
log_p_k(v, bb, base_model,model)
b
bb
log_p_k(v, bb, base_model,model)
mean(log_p_k(v, bb, base_model,model))
mean(log_p_k(v, bb, base_model,model))
mean(log_p_k(v, bb, base_model,model))
mean(log_p_k(v, bb, base_model,model))
mean(log_p_k(v, bb, base_model,model))
mean(log_p_k(v, bb, base_model,model))
mean(log_p_k(v, bb, base_model,model))
v.m <- rep.row(sigmoid(base_model$vis_bias), numruns)
v <- sample_bernoulli(v.m)
mean(log_p_k(v, bb, base_model,model))
bb
source('~/my/git/alexeyche-junk/ml/dbn/ais_my2.R', echo=TRUE)
logw
log_p_k(v, 1, base_model,model)
logw
betas <- seq(0,1,by=0.01)
betas
source('~/my/git/alexeyche-junk/ml/dbn/ais_my2.R', echo=TRUE)
logw
