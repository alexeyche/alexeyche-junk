r1
#!/usr/bin/RScript
require(rredis)
require(grid)
require(ggplot2)
require(reshape)
redisConnect()
it <- NULL
if(is.null(it)) {
patt <- "*"
} else {
patt <- paste(it, ":*", sep="")
}
keys <- redisKeys(patt)
k <- keys[[1]]
bb <- redisGet(k,raw=TRUE)
# reading header, 9999:9999 is maximum
b_head <- bb[1:10]
at_index <- which(b_head == '40')
b_head <- b_head[1:(at_index-1)]
header <- readBin(b_head, "character")
spl_h <- strsplit(header,":")[[1]]
n1 <- as.integer(spl_h[1])
n2 <- as.integer(spl_h[2])
bb <- bb[(at_index+1):n1*n2*4]
bb
r1 <- readBin(bb, "numeric", n=1,size=4,endian="little")
r1
at_index
source('~/.active-rstudio-document', echo=TRUE)
r1
r1 <- readBin(bb, "numeric", n=10,size=4,endian="little")
bb
r1
#!/usr/bin/RScript
require(rredis)
require(grid)
require(ggplot2)
require(reshape)
redisConnect()
it <- NULL
if(is.null(it)) {
patt <- "*"
} else {
patt <- paste(it, ":*", sep="")
}
keys <- redisKeys(patt)
k <- keys[[1]]
bb <- redisGet(k,raw=TRUE)
# reading header, 9999:9999 is maximum
b_head <- bb[1:10]
b_head
at_index <- which(b_head == '40')
at_index
b_head <- b_head[1:(at_index-1)]
header <- readBin(b_head, "character")
header
spl_h <- strsplit(header,":")[[1]]
n1 <- as.integer(spl_h[1])
n2 <- as.integer(spl_h[2])
n1
n2
bb[1:10]
r1 <- readBin(bb, "numeric", n=10,size=4,endian="little")
r1
source('~/my/git/alexeyche-junk/ml/dbn/db_redis_bin.R', echo=TRUE)
r1
source('~/.active-rstudio-document', echo=TRUE)
r1
source('~/my/git/alexeyche-junk/ml/dbn/db_redis_bin.R', echo=TRUE)
r1
#!/usr/bin/RScript
require(rredis)
require(grid)
require(ggplot2)
require(reshape)
redisConnect()
it <- NULL
if(is.null(it)) {
patt <- "*"
} else {
patt <- paste(it, ":*", sep="")
}
keys <- redisKeys(patt)
k <- keys[[1]]
bb <- redisGet(k,raw=TRUE)
# reading header, 9999:9999 is maximum
b_head <- bb[1:10]
at_index <- which(b_head == '40')
b_head <- b_head[1:(at_index-1)]
header <- readBin(b_head, "character")
spl_h <- strsplit(header,":")[[1]]
n1 <- as.integer(spl_h[1])
n2 <- as.integer(spl_h[2])
bb
length(bb)
bb <- bb[(at_index+1):n1*n2*4]
length(bb)
bb <- bb[(at_index+1):(n1*n2*4)]
length(bb)
#!/usr/bin/RScript
require(rredis)
require(grid)
require(ggplot2)
require(reshape)
redisConnect()
it <- NULL
if(is.null(it)) {
patt <- "*"
} else {
patt <- paste(it, ":*", sep="")
}
keys <- redisKeys(patt)
k <- keys[[1]]
bb <- redisGet(k,raw=TRUE)
# reading header, 9999:9999 is maximum
b_head <- bb[1:10]
at_index <- which(b_head == '40')
b_head <- b_head[1:(at_index-1)]
header <- readBin(b_head, "character")
spl_h <- strsplit(header,":")[[1]]
n1 <- as.integer(spl_h[1])
n2 <- as.integer(spl_h[2])
bb <- bb[(at_index+1):(n1*n2*4)]
length(bb)
at_index
#!/usr/bin/RScript
require(rredis)
require(grid)
require(ggplot2)
require(reshape)
redisConnect()
it <- NULL
if(is.null(it)) {
patt <- "*"
} else {
patt <- paste(it, ":*", sep="")
}
keys <- redisKeys(patt)
k <- keys[[1]]
bb <- redisGet(k,raw=TRUE)
# reading header, 9999:9999 is maximum
b_head <- bb[1:10]
at_index <- which(b_head == '40')
b_head <- b_head[1:(at_index-1)]
header <- readBin(b_head, "character")
spl_h <- strsplit(header,":")[[1]]
n1 <- as.integer(spl_h[1])
n2 <- as.integer(spl_h[2])
length(bb)
at_index
n1
n2
n1*n2
n1*n2*4
length(bb[10:4000000])
length(bb[10:])
length(bb[10:length(bb)])
?":"
?tail
#!/usr/bin/RScript
require(rredis)
require(grid)
require(ggplot2)
require(reshape)
redisConnect()
it <- NULL
if(is.null(it)) {
patt <- "*"
} else {
patt <- paste(it, ":*", sep="")
}
keys <- redisKeys(patt)
k <- keys[[1]]
bb <- redisGet(k,raw=TRUE)
# reading header, 9999:9999 is maximum
b_head <- bb[1:10]
at_index <- which(b_head == '40')
b_head <- b_head[1:(at_index-1)]
header <- readBin(b_head, "character")
spl_h <- strsplit(header,":")[[1]]
n1 <- as.integer(spl_h[1])
n2 <- as.integer(spl_h[2])
bb <- tail(bb, n1*n2*4)
#!/usr/bin/RScript
require(rredis)
require(grid)
require(ggplot2)
require(reshape)
redisConnect()
it <- NULL
if(is.null(it)) {
patt <- "*"
} else {
patt <- paste(it, ":*", sep="")
}
keys <- redisKeys(patt)
k <- keys[[1]]
bb <- redisGet(k,raw=TRUE)
# reading header, 9999:9999 is maximum
b_head <- bb[1:10]
at_index <- which(b_head == '40')
b_head <- b_head[1:(at_index-1)]
header <- readBin(b_head, "character")
spl_h <- strsplit(header,":")[[1]]
n1 <- as.integer(spl_h[1])
n2 <- as.integer(spl_h[2])
bb <- tail(bb, n1*n2*4)
length(bb)
r1 <- readBin(bb, "numeric", n=10,size=4,endian="little")
r1
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
r1
hist(r1)
?sparseMatrix
seq(1:n1)
n2*seq(1:n1)
rep(seq(1:n1), 200)
length(rep(seq(1:n1), 200))
seq(1:n2)
?apply
f <- function(x) { rep(x, n1) }
apply(seq(1:n2),1,f)
?sapply
sapply(seq(1:n2),f)
dim(sapply(seq(1:n2),f))
vapply(seq(1:n2),f))
vapply(seq(1:n2),f)
replicate(seq(1:n2),f)
lapply(seq(1:n2),f)
j <- lapply(seq(1:n2),function(x) { rep(x, n1) })
value <- readBin(bb, "numeric", n=n1*n2,size=4,endian="little")
i <- rep(seq(1:n1), n2)
j <- lapply(seq(1:n2),function(x) { rep(x, n1) })
mat <- sparseMatrix(i = i,j = j,x = value)
value <- readBin(bb, "numeric", n=n1*n2,size=4,endian="little")
i_index <- rep(seq(1:n1), n2)
j_index <- lapply(seq(1:n2),function(x) { rep(x, n1) })
mat <- sparseMatrix(i = i_index,j = j_index,x = value)
j_index
i_index
i_index[1:100]
j_index[1:100]
str(j_index)
?lapply
vapply(seq(1:n2),function(x) { rep(x, n1) })
vapply(seq(1:n2),function(x) { rep(x, n1) },"")
sapply(seq(1:n2),function(x) { rep(x, n1) },"")
sapply(seq(1:n2),function(x) { rep(x, n1) }\)
sapply(seq(1:n2),function(x) { rep(x, n1) })
str(sapply(seq(1:n2),function(x) { rep(x, n1) }))
c(sapply(seq(1:n2),function(x) { rep(x, n1) }))
source('~/my/git/alexeyche-junk/ml/dbn/db_redis_bin.R', echo=TRUE)
mat
mat[100,100]
source('~/my/git/alexeyche-junk/ml/dbn/db_redis_bin.R', echo=TRUE)
last_it_new <- redisGet("last_it")
if(is.null(it)) {
patt <- "*"
} else {
patt <- paste(it, ":*", sep="")
}
keys <- redisKeys(patt)
keys
source('~/my/git/alexeyche-junk/ml/dbn/db_redis_bin.R', echo=TRUE)
source('~/my/git/alexeyche-junk/ml/dbn/db_redis_bin.R', echo=TRUE)
source('~/my/git/alexeyche-junk/ml/dbn/db_redis_bin.R', echo=TRUE)
k
names(keys)
redisConnect()
last_it_new <- redisGet("last_it")
source('~/my/git/alexeyche-junk/ml/dbn/db_redis_bin.R', echo=TRUE)
keys
k
names(keys)
source('~/my/git/alexeyche-junk/ml/dbn/db_redis_bin.R', echo=TRUE)
source('~/my/git/alexeyche-junk/ml/dbn/db_redis_bin.R', echo=TRUE)
0:W
source('~/my/git/alexeyche-junk/ml/dbn/db_redis_bin.R', echo=TRUE)
W
hist(W)
hist(W@x)
hist(hid_m@x)
source('~/my/git/alexeyche-junk/ml/dbn/db_redis_bin.R', echo=TRUE)
source('~/my/git/alexeyche-junk/ml/dbn/db_redis_bin.R', echo=TRUE)
pl_w_inc <- get_gray_plot(W_inc, "W_inc")
get_gray_plot <- function(d, title) {
ggplot(melt(d),aes(X1,X2))+
geom_tile(aes(fill=value))+
scale_fill_gradient(low="black",high="white",limits=c(min(d),max(d)))+
coord_equal() + labs(title = title)
}
pl_w_inc <- get_gray_plot(W_inc, "W_inc")
pl_w_inc <- get_gray_plot(W_inc@x, "W_inc")
pl_w_inc <- get_gray_plot(W_inc@x, "W_inc")
plot(pl_w_inc)
print(pl_w_inc)
W_inc
str(W_inc)
data.frame
d <- matrix(0, nrow=10,ncol=10)
melt(d)
str(melt(d))
data.frame(X1 = W_inc@i, X2 = W_inc@j, value = W_inc@x)
W_inc
str(W_inc)
W_inc@j
W_inc@i
W_inc@p
?sparseMatrix
as.dataframe
as.data.frame
as.data.frame(W_inc)
as.matrix(W_inc)
melt(as.matrix(W_inc))
pl_w_inc <- get_gray_plot(as.matrix(W_inc), "W_inc")
plot(pl_w_inc)
pl_w_inc <- get_gray_plot(as.matrix(W_inc[1:500,]), "W_inc")
plot(pl_w_inc)
pl_w_inc <- get_gray_plot(as.matrix(W_inc[1:300,]), "W_inc")
pl_w_inc
pl_w <- get_gray_plot(as.matrix(W[1:300]), "W")
plot(pl_w)
pl_w <- get_gray_plot(as.matrix(W[1:300,]), "W")
plot(pl_w)
free_en
pl_fen <- ggplot(melt(as.matrix(free_en)),aes(X2,value)) + geom_point() + geom_line() +
ylim(min(free_en),0) + labs(title = "Free energy")
pl_fen
melt(as.matrix(free_en))
pl_h_m <- get_gray_plot(as.matrix(hid_m), "hid_m")
hid_m
plot(pl_h_m)
neg_hid_m
pl_neg_vis_m <- get_gray_plot(as.matrix(neg_vis_m[1:300,])), "neg_vis_m")
neg_vis_m
pl_neg_vis_s <- get_gray_plot(as.matrix(neg_vis_s[1:300,])), "neg_vis_s")
neg_vis_s
pl_neg_vis_s <- get_gray_plot(as.matrix(neg_vis_s[1:300,]), "neg_vis_s")
neg_vis_s
as.matrix(neg_vis_s)
str(as.matrix(neg_vis_s))
as.matrix(neg_vis_s[1:300,])
neg_vis_s[1:300,]
str(neg_vis_s)
pl_neg_vis_s <- get_gray_plot(as.matrix(neg_vis_s[,1:300]), "neg_vis_s")
plot(pl_neg_vis_s)
melt(W@x)
str(melt(W@x))
pl_hist_W <- ggplot(melt(W@x), aes(x=value)) + geom_histogram(binwidth=.5, colour="black", fill="white") + labs(title = "W hist")
plot(pl_hist_W)
free_en_valid
hbias_inc
hist(hbias_inc)
hist(hbias_inc@x)
source('~/my/git/alexeyche-junk/ml/dbn/db_redis_bin.R', echo=TRUE)
iterate()
iterate()
hid_m@x
redisGet("last_it")
source('~/my/git/alexeyche-junk/ml/dbn/db_redis_bin.R', echo=TRUE)
last_it
iterate(last_it)
iterate(last_it)
hid_m@x
iterate <- function(it=redisGet("last_it")) {
patt <- paste(it, ":*", sep="")
keys <- redisKeys(patt)
read_and_assign(keys)
}
hid_m@x
source('~/my/git/alexeyche-junk/ml/dbn/db_redis_bin.R', echo=TRUE)
hid_m@x
iterate <- function(it=redisGet("last_it")) {
patt <- paste(it, ":*", sep="")
keys <- redisKeys(patt)
read_and_assign(keys)
}
iterate()
hid_m@x
hist(hid_m@x)
hist(W@x)
iterate()
hist(hid_m@x)
pl_hid_m <- get_gray_plot(as.matrix(hid_m), "hid_m")
plot(pl_hid_m)
iterate()
hist(hid_m@x)
iterate()
hist(hid_m@x)
hist(hid_m@x)
iterate()
redisConnect()
iterate()
hist(hid_m@x)
hist(W@x)
redisConnect()
iterate()
iterate()
hist(W@x)
hist(hid_m@x)
iterate()
hist(hid_m@x)
iterate()
iterate()
hist(hid_m@x)
iterate()
hist(hid_m@x)
iterate()
hist(hid_m@x)
iterate()
hist(hid_m@x)
iterate()
hist(hid_m@x)
hist(hid_m@x)
iterate()
iterate()
redisConnect()
iterate()
hist(hid_m@x)
iterate()
hist(hid_m@x)
iterate()
redisConnect()
iterate()
hist(hid_m@x)
redisConnect()
hist(hid_m@x)
iterate()
hist(hid_m@x)
iterate()
hist(hid_m@x)
iterate()
hist(hid_m@x)
iterate()
hist(hid_m@x)
iterate()
iterate()
hist(hid_m@x)
hid_m@x
iterate()
hbias
hbias_inc
hid_m
nig_hid_m
neg_hid_m
iterate()
hid_m@sx
hid_m@x
W
neg_vis_s
iterate()
redisConnect()
iterate()
neg_vis_s
hid_m@x
redisConnect()
iterate()
hid_m@x
redisConnect()
iterate()
hid_m@x
redisConnect()
iterate()
hid_m@x
iterate()
hid_m@x
hist(hid_m@x)
W
hist(W@x)
hbias
vbias
iterate()
redisConnect()
iterate()
hist(W@x)
hist(W@x)
hist(hid_m@x)
iterate()
redisConnect()
iterate()
hist(hid_m@x)
redisConnect()
iterate()
hist(hid_m@x)
redisConnect()
iterate()
hist(hid_m@x)
redisConnect()
iterate()
hist(hid_m@x)
refresh <- function() {
redisConnect()
it <- redisGet("last_it")
cat("Refresh iteration: ", it,"\n")
iterate(it)
}
refresh()
iterate("10")
hist(hid_m@x)
iterate("19")
hist(hid_m@x)
refresh()
hid_m
refresh()
refresh()
hid_m
hid_m@x
hid_m
str(hid_m)
hid_m
